#defcfunc calcmedalvalue int calcmedalvalue_itemid
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_SCROLL_GROWTH ) {
		return 15
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_SCROLL_FAITH ) {
		return 8
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_SCROLL_SUPERIOR_MATERIAL ) {
		return 7
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_ROD_DOMINATION ) {
		return 20
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_ARTIFACT_SEED ) {
		return 5
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_PRESIDENTS_CHAIR ) {
		return 20
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_BILL ) {
		return 5
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_POTION_CURE_CORRUPTION ) {
		return 10
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_BOTTLE_WATER ) {
		return 3
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_TAX_MASTERS_TAX_BOX ) {
		return 18
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_CAT_SISTERS_DIARY ) {
		return 85
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_GIRLS_DIARY ) {
		return 25
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_LITTLE_SISTERS_DIARY ) {
		return 12
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_SHRINE_GATE ) {
		return 11
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_BOTTLE_HERMES_BLOOD ) {
		return 60
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_NYOI_MIMIKAKI ) {
		return 30
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_ELEMENTS_EYES ) {
		return 35
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_CLOTHWORLD ) {
		return 40
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_SHIELD_TONFA ) {
		return 50
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_SAGES_HELM ) {
		return 55
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_DIABLOS ) {
		return 65
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_LICENCE_THE_VOID_EXPLORER ) {
		return 72
	}
	if ( inv(INV_ITEM_ID, calcmedalvalue_itemid) == ITEM_ID_GAROKS_HAMMER ) {
		return 47
	}
	return 1

#defcfunc calcmusicticketvalue int calcmusicticketvalue_itemid
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_VERNIS_ORIGINAL ) {
		return 1500
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_STOMAFILLIA ) {
		return 1000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_CURARIA ) {
		return 1500
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_ALRAUNIA ) {
		return 2000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_SPENSEWEED ) {
		return 2000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_MORGIA ) {
		return 2000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_MAREILON ) {
		return 2000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_OLDER_SISTERS_DIARY ) {
		return 4000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_BUTLERS_DIARY ) {
		return 4500
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_BAMAGICAR ) {
		return 5000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_DOG_SISTERS_DIARY ) {
		return 6000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_FIXITY_ANCHOR ) {
		return 6500
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_NECROMANTIS ) {
		return 7000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_BOTTLE_SPEED_UPPER ) {
		return 8000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_STRADIVARIUS ) {
		return 9000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_SUPER_LURE ) {
		return 10000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_VALKOINEN_KUOLEMA ) {
		return 10000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_HERO_CHEESE ) {
		return 35000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_MAGIC_FRUIT ) {
		return 35000
	}
	if ( inv(INV_ITEM_ID, calcmusicticketvalue_itemid) == ITEM_ID_HAPPY_APPLE ) {
		return 50000
	}
	return 1

#defcfunc calcitemvalue int calcitemvalue_itemid, int calcitemvalue_mode
	locvar_calcitemvalue_reftype = refitem(inv(INV_ITEM_ID, calcitemvalue_itemid), DBSPEC_TYPE)
	if ( inv(INV_ITEM_KNOWN, calcitemvalue_itemid) == ITEM_KNOWN_NONE ) {
		if ( calcitemvalue_mode == 2 ) {
			locvar_calcitemvalue_value = inv(INV_ITEM_VALUE, calcitemvalue_itemid) * 4 / 10
		}
		else {
			locvar_calcitemvalue_value = (gdata(GDATA_RAND_SEED_A) + calcitemvalue_itemid * 31) \ 10 + 10
		}
	}
	else {
		if ( locvar_calcitemvalue_reftype >= FILTER_ITEM_MIN ) {
			locvar_calcitemvalue_value = inv(INV_ITEM_VALUE, calcitemvalue_itemid)
		}
		else {
			if ( inv(INV_ITEM_KNOWN, calcitemvalue_itemid) == ITEM_KNOWN_NAME ) {
				locvar_calcitemvalue_value = inv(INV_ITEM_VALUE, calcitemvalue_itemid) * 2 / 10
			}
			if ( inv(INV_ITEM_KNOWN, calcitemvalue_itemid) == ITEM_KNOWN_QUALITY ) {
				locvar_calcitemvalue_value = inv(INV_ITEM_VALUE, calcitemvalue_itemid) * 5 / 10
			}
			if ( inv(INV_ITEM_KNOWN, calcitemvalue_itemid) >= ITEM_KNOWN_FULL ) {
				locvar_calcitemvalue_value = inv(INV_ITEM_VALUE, calcitemvalue_itemid)
			}
		}
	}
	if ( locvar_calcitemvalue_reftype == FILTER_ITEM_FOOD ) {
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) != 0 ) {
			if ( inv(INV_ITEM_PARAM1, calcitemvalue_itemid) == 2000 | inv(INV_ITEM_PARAM1, calcitemvalue_itemid) == 3000 ) {
				locvar_calcitemvalue_value += inv(INV_ITEM_LEVEL, calcitemvalue_itemid) * 30
			}
		}
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) != 0 ) {
			if ( inv(INV_ITEM_PARAM1, calcitemvalue_itemid) != 6000 ) {
				if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_CORPSE ) {
					locvar_calcitemvalue_value = limit(locvar_calcitemvalue_value / 9 * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 8), 1, 20000)
				}
				else {
					locvar_calcitemvalue_value = limit(locvar_calcitemvalue_value / 5 * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 4), 1, 20000)
				}
			}
		}
		if ( inv(INV_ITEM_PARAM1, calcitemvalue_itemid) == 6000 ) {
			if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_FISH ) {
				if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) < 1 ) {
					locvar_calcitemvalue_value /= 2
				}
			}
			if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) > 0 ) {
				locvar_calcitemvalue_value += inv(INV_ITEM_LEVEL, calcitemvalue_itemid) * 300 + 1000
				locvar_calcitemvalue_value = limit(locvar_calcitemvalue_value / 15 * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 15), 1, 60000)
			}
		}
		if ( inv(INV_ITEM_PARAM2, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value = inv(INV_ITEM_PARAM2, calcitemvalue_itemid) * locvar_calcitemvalue_value / 10 * inv(INV_ITEM_PARAM2, calcitemvalue_itemid)
		}
		if ( inv(INV_ITEM_AMUR_CAGE, calcitemvalue_itemid) == 1 ) {
			locvar_calcitemvalue_value = 1
		}
	}
	if ( locvar_calcitemvalue_reftype >= FILTER_WEAPON & locvar_calcitemvalue_reftype < FILTER_ITEM_MIN ) {
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value += limit(inv(INV_ITEM_LEVEL, calcitemvalue_itemid) * inv(INV_ITEM_LEVEL, calcitemvalue_itemid) * 200 * 3, 0, 60000)
		}
	}
	if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_COFFEE | inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_BLACK_TEA | inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_GREEN_TEA ) {
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value += (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * 50
		}
	}
	if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_BOTTLE_MILK ) {
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value += (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * 60
		}
	}
	if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_SKIN ) {
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value += (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * 100
		}
	}
	if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_WILD_FLOWER ) {
		if ( inv(INV_ITEM_LEVEL, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value += (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * (inv(INV_ITEM_LEVEL, calcitemvalue_itemid) + 5) * 100
		}
	}
	if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_MYSTERIOUS_FOSSIL ) {
		if ( inv(INV_ITEM_PARAM2, calcitemvalue_itemid) > 0 ) {
			locvar_calcitemvalue_value += inv(INV_ITEM_PARAM2, calcitemvalue_itemid) * 450
		}
	}
	if ( inv(INV_ITEM_KNOWN, calcitemvalue_itemid) >= ITEM_KNOWN_FULL ) {
		if ( inv(INV_ITEM_STATUS, calcitemvalue_itemid) == ITEM_STATUS_BLESSED ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_value * 6 / 5
		}
		if ( inv(INV_ITEM_STATUS, calcitemvalue_itemid) == ITEM_STATUS_CURSED ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_value / 2
		}
		if ( inv(INV_ITEM_STATUS, calcitemvalue_itemid) == ITEM_STATUS_DOOMED ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_value / 5
		}
	}
	if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_TRAVELERS_FOOD ) {
		if ( calcitemvalue_mode == 0 ) {
			locvar_calcitemvalue_value += limit(cdata(CDATA_FAME, CHARA_PLAYER) / 40 + locvar_calcitemvalue_value * (cdata(CDATA_FAME, CHARA_PLAYER) / 80) / 100, 0, 800)
		}
	}
	if ( inv(INV_ITEM_WEIGHT, calcitemvalue_itemid) < 0 ) {
		if ( mode == MODELIST_SHOP ) {
			if ( locvar_calcitemvalue_reftype == FILTER_CARGO_TRADE ) {
				if ( trate(inv(INV_ITEM_PARAM1, calcitemvalue_itemid)) == 0 ) {
					trate(inv(INV_ITEM_PARAM1, calcitemvalue_itemid)) = 100
				}
				locvar_calcitemvalue_value = locvar_calcitemvalue_value * trate(inv(INV_ITEM_PARAM1, calcitemvalue_itemid)) / 100
				if ( calcitemvalue_mode == 1 ) {
					locvar_calcitemvalue_value = locvar_calcitemvalue_value * 75 / 100
				}
				return locvar_calcitemvalue_value
			}
		}
	}
	if ( ibit(ITEM_BIT_CHARGE_ITEM, calcitemvalue_itemid) == 1 ) {
		dbid = inv(INV_ITEM_ID, calcitemvalue_itemid)
		dbmode = DBMODE_REF
		gosub *db_item
		if ( inv(INV_ITEM_CHARGE, calcitemvalue_itemid) < 0 ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_value / 10
		}
		else {
			if ( locvar_calcitemvalue_reftype == FILTER_ITEM_SPELLBOOK ) {
				locvar_calcitemvalue_value = locvar_calcitemvalue_value / 5 + locvar_calcitemvalue_value * inv(INV_ITEM_CHARGE, calcitemvalue_itemid) / (ichargelevel * 2 + 1)
			}
			else {
				locvar_calcitemvalue_value = locvar_calcitemvalue_value / 2 + locvar_calcitemvalue_value * inv(INV_ITEM_CHARGE, calcitemvalue_itemid) / (ichargelevel * 3 + 1)
			}
		}
	}
	if ( locvar_calcitemvalue_reftype == FILTER_CONTAINER ) {
		if ( inv(INV_ITEM_PARAM1, calcitemvalue_itemid) == 0 ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_value / 100 + 1
		}
	}
	if ( locvar_calcitemvalue_value >= 2000000 ) {
		locvar_calcitemvalue_value = 2000000
	}
	if ( locvar_calcitemvalue_value == 0 ) {
		locvar_calcitemvalue_value = 1
	}
	repeat MAX_CHARA_FOLLOWER - 1, 1
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cbit(CHARA_BIT_SHOP_STRONG_ALLY, cnt) ) {
			locvar_calcitemvalue_tiep = (sdata(SKILL_NORMAL_NEGOTIATION, cnt) + 1) / 2
			break
		}
	loop
	if ( calcitemvalue_mode == 0 ) {
		locvar_calcitemvalue_limitvalue = locvar_calcitemvalue_value / 2
		locvar_calcitemvalue_value = locvar_calcitemvalue_value * 100 / (100 + sdata(SKILL_NORMAL_NEGOTIATION, CHARA_PLAYER) + locvar_calcitemvalue_tiep)
		if ( gdata(GDATA_FLAG_GUILD_MAGE) != 0 ) {
			if ( locvar_calcitemvalue_reftype == FILTER_ITEM_SPELLBOOK ) {
				locvar_calcitemvalue_value = locvar_calcitemvalue_value * 80 / 100
			}
		}
		if ( locvar_calcitemvalue_value <= locvar_calcitemvalue_limitvalue ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_limitvalue
		}
		if ( inv(INV_ITEM_ID, calcitemvalue_itemid) == ITEM_ID_SCROLL_GROWTH ) {
			locvar_calcitemvalue_value = 3500000
		}
	}
	if ( calcitemvalue_mode == 1 ) {
		locvar_calcitemvalue_limitvalue = (sdata(SKILL_NORMAL_NEGOTIATION, CHARA_PLAYER) + locvar_calcitemvalue_tiep) * 250 + 5000
		if ( locvar_calcitemvalue_value / 3 < locvar_calcitemvalue_limitvalue ) {
			locvar_calcitemvalue_limitvalue = locvar_calcitemvalue_value / 3
		}
		locvar_calcitemvalue_value = locvar_calcitemvalue_value / 20 * (20 + sdata(SKILL_NORMAL_NEGOTIATION, CHARA_PLAYER) + locvar_calcitemvalue_tiep) / 10
		if ( locvar_calcitemvalue_reftype < FILTER_ITEM_MIN ) {
			locvar_calcitemvalue_value /= 20
		}
		if ( ibit(ITEM_BIT_STOLEN, calcitemvalue_itemid) ) {
			if ( gdata(GDATA_FLAG_GUILD_THIEF) == 0 ) {
				locvar_calcitemvalue_value /= 10
			}
			else {
				locvar_calcitemvalue_value = locvar_calcitemvalue_value / 3 * 2
			}
		}
		if ( locvar_calcitemvalue_value >= locvar_calcitemvalue_limitvalue ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_limitvalue
		}
	}
	if ( calcitemvalue_mode == 2 ) {
		limitvalue = locvar_calcitemvalue_value * 9 / 25
		locvar_calcitemvalue_value /= 6
		if ( locvar_calcitemvalue_value > 300000 ) {
			locvar_calcitemvalue_value = 300000
		}
		if ( ibit(ITEM_BIT_STOLEN, calcitemvalue_itemid) ) {
			locvar_calcitemvalue_value = 1
		}
	}
	if ( calcitemvalue_mode == 3 ) {
		locvar_calcitemvalue_limitvalue = ((sdata(SKILL_NORMAL_NEGOTIATION, CHARA_PLAYER) + locvar_calcitemvalue_tiep) * 250 + 5000) * 4 / 5
		if ( locvar_calcitemvalue_value * 4 / 15 < locvar_calcitemvalue_limitvalue ) {
			locvar_calcitemvalue_limitvalue = locvar_calcitemvalue_value * 4 / 15
		}
		locvar_calcitemvalue_value = locvar_calcitemvalue_value / 20 * (20 + sdata(SKILL_NORMAL_NEGOTIATION, CHARA_PLAYER) + locvar_calcitemvalue_tiep) / 10 * 4 / 5
		if ( locvar_calcitemvalue_reftype < FILTER_ITEM_MIN ) {
			locvar_calcitemvalue_value /= 20
		}
		if ( ibit(ITEM_BIT_STOLEN, calcitemvalue_itemid) ) {
			if ( gdata(GDATA_FLAG_GUILD_THIEF) == 0 ) {
				locvar_calcitemvalue_value /= 10
			}
			else {
				locvar_calcitemvalue_value = locvar_calcitemvalue_value / 3 * 2
			}
		}
		if ( refitem(inv(INV_ITEM_ID, calcitemvalue_itemid), DBSPEC_TYPE) == FILTER_ITEM_FOOD ) {
			if ( inv(INV_ITEM_MATERIAL, calcitemvalue_itemid) == ITEM_MATERIAL_RAW ) {
				if ( inv(INV_ITEM_PARAM3, calcitemvalue_itemid) < 0 ) {
					locvar_calcitemvalue_value = 1
				}
			}
		}
		if ( ibit(ITEM_BIT_PRECIOUS, calcitemvalue_itemid) == 1 | inv(INV_ITEM_QUALITY, calcitemvalue_itemid) == FIX_QUALITY_UNIQUE ) {
			locvar_calcitemvalue_value = 1
		}
		if ( locvar_calcitemvalue_value >= locvar_calcitemvalue_limitvalue ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_limitvalue
		}
	}
	if ( locvar_calcitemvalue_value < (-50000) ) {
		locvar_calcitemvalue_value = 2000000
	}
	if ( locvar_calcitemvalue_value <= 0 ) {
		locvar_calcitemvalue_value = 1
	}
	locvar_calcitemvalue_tiep = 0
	return locvar_calcitemvalue_value

#defcfunc calcinvestvalue int
	locvar_calcinvestvalue_invwari = 0
	repeat MAX_CHARA_FOLLOWER - 1, 1
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( dist(cdata(CDATA_X, locvar_calcinvestvalue_cc), cdata(CDATA_Y, locvar_calcinvestvalue_cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
			continue
		}
		if ( fov_los(cdata(CDATA_X, locvar_calcinvestvalue_cc), cdata(CDATA_Y, locvar_calcinvestvalue_cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) == 0 ) {
			continue
		}
		if ( sdata(SKILL_NORMAL_INVESTING, cnt) > 0 ) {
			locvar_calcinvestvalue_invwari += limit(sdata(SKILL_NORMAL_INVESTING, cnt), 0, sdata(SKILL_NORMAL_INVESTING, CHARA_PLAYER))
		}
	loop
	locvar_calcitemvalue_value = limit(cdata(CDATA_ROLE_SHOP_LEVEL, tc), 1, 200) * limit(cdata(CDATA_ROLE_SHOP_LEVEL, tc), 1, 200) * 15 + 200
	if ( locvar_calcitemvalue_value > 500000 ) {
		locvar_calcitemvalue_value = 500000
	}
	locvar_calcitemvalue_value = locvar_calcitemvalue_value * 100 / (100 + sdata(SKILL_NORMAL_INVESTING, CHARA_PLAYER) * 10 + locvar_calcinvestvalue_invwari * 2) + 200
	locvar_calcinvestvalue_invwari = 0
	return locvar_calcitemvalue_value

#defcfunc calcinvestvalue50 int
	locvar_calcinvestvalue_invwari = 0
	repeat MAX_CHARA_FOLLOWER - 1, 1
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( dist(cdata(CDATA_X, locvar_calcinvestvalue_cc), cdata(CDATA_Y, locvar_calcinvestvalue_cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) > sdataref(SKILL_DATAREF_TG_RANGE, SKILL_SPACT_CHEER) \ EXT_SDATAREF + 1 ) {
			continue
		}
		if ( fov_los(cdata(CDATA_X, locvar_calcinvestvalue_cc), cdata(CDATA_Y, locvar_calcinvestvalue_cc), cdata(CDATA_X, cnt), cdata(CDATA_Y, cnt)) == 0 ) {
			continue
		}
		if ( sdata(SKILL_NORMAL_INVESTING, cnt) > 0 ) {
			locvar_calcinvestvalue_invwari += limit(sdata(SKILL_NORMAL_INVESTING, cnt), 0, sdata(SKILL_NORMAL_INVESTING, CHARA_PLAYER))
		}
	loop
	locvar_calcinvestvalue50_value50 = 0
	repeat 20
		locvar_calcitemvalue_value = limit(cdata(CDATA_ROLE_SHOP_LEVEL, tc) + 25, 1, 200) * limit(cdata(CDATA_ROLE_SHOP_LEVEL, tc), 1, 200) * 15 + 200
		if ( locvar_calcitemvalue_value > 500000 ) {
			locvar_calcitemvalue_value = 500000
		}
		locvar_calcinvestvalue50_value50 += locvar_calcitemvalue_value * 100 / (100 + sdata(SKILL_NORMAL_INVESTING, CHARA_PLAYER) * 10 + locvar_calcinvestvalue_invwari * 2) + 200
	loop
	locvar_calcinvestvalue_invwari = 0
	return locvar_calcinvestvalue50_value50

#defcfunc calcguiltvalue int
	locvar_calcitemvalue_value = (-cdata(CDATA_KARMA, CHARA_PLAYER) + (-30)) * (cdata(CDATA_FAME, CHARA_PLAYER) / 2 + cdata(CDATA_LEVEL, CHARA_PLAYER) * 200)
	return locvar_calcitemvalue_value

#defcfunc calchireadv int calchireadv_arg1
	locvar_calchireadv_hire = limit(cdata(CDATA_LEVEL, calchireadv_arg1), 1, 300)
	if ( cdata(CDATA_IMPRESSION, calchireadv_arg1) > 350 ) {
		cdata(CDATA_IMPRESSION, calchireadv_arg1) = 350
	}
	return limit(250 + (400 - cdata(CDATA_IMPRESSION, calchireadv_arg1)) / 10 * locvar_calchireadv_hire * sqrt(locvar_calchireadv_hire + 1), 3000, 50000)

#defcfunc calchirecost int calchirecost_charid
	locvar_calcitemvalue_value = 0
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_MAID ) {
		locvar_calcitemvalue_value = 450
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_TRAINER ) {
		locvar_calcitemvalue_value = 250
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_BARTENDER ) {
		locvar_calcitemvalue_value = 350
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_HEALER ) {
		locvar_calcitemvalue_value = 500
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_IDENTIFIER ) {
		locvar_calcitemvalue_value = 750
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_INFORMER ) {
		locvar_calcitemvalue_value = 250
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_GUARD ) {
		locvar_calcitemvalue_value = 50
	}
	if ( cdata(CDATA_ROLE, calchirecost_charid) >= ROLE_SHOP_MIN & cdata(CDATA_ROLE, calchirecost_charid) < ROLE_GUEST_MIN | cdata(CDATA_ROLE, calchirecost_charid) == ROLE_GUEST_MERCHANT ) {
		locvar_calcitemvalue_value = 1000
		if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_SHOP_BLACKMARKET ) {
			locvar_calcitemvalue_value *= 4
		}
		if ( cdata(CDATA_ROLE, calchirecost_charid) == ROLE_GUEST_MERCHANT ) {
			locvar_calcitemvalue_value = 0
		}
	}
	return locvar_calcitemvalue_value

#deffunc generatemoney int generatemoney_charid
	locvar_generatemoney_p = rnd(100) + rnd(cdata(CDATA_LEVEL, generatemoney_charid) * 50 + 1)
	if ( cdata(CDATA_ROLE, generatemoney_charid) >= ROLE_SHOP_MIN & cdata(CDATA_ROLE, generatemoney_charid) < ROLE_GUEST_MIN | cdata(CDATA_ROLE, generatemoney_charid) == ROLE_GUEST_MERCHANT ) {
		locvar_generatemoney_p += 2500 + cdata(CDATA_ROLE_SHOP_LEVEL, generatemoney_charid) * 250
		if ( cdata(CDATA_ROLE, generatemoney_charid) == ROLE_SHOP_TRADE ) {
			locvar_generatemoney_p = 25000 + cdata(CDATA_ROLE_SHOP_LEVEL, generatemoney_charid) * 500
		}
	}
	if ( adata(ADATA_ID, gdata(GDATA_AREA)) == AREA_SHOP ) {
		if ( getworker(gdata(GDATA_AREA)) != (-1) ) {
			locvar_generatemoney_sc = getworker(gdata(GDATA_AREA))
			if ( cbit(CHARA_BIT_SHOP_ELEGANCE, locvar_generatemoney_sc) ) {
				if ( cdata(CDATA_RELATION, generatemoney_charid) != (-3) ) {
					locvar_generatemoney_p = locvar_generatemoney_p * 7 / 4 + 2000
				}
			}
		}
	}
	if ( cdata(CDATA_GOLD, generatemoney_charid) < locvar_generatemoney_p / 2 ) {
		cdata(CDATA_GOLD, generatemoney_charid) = locvar_generatemoney_p
	}
	return

#deffunc calccosthire
	locvar_calccosthire_cost = 0
	repeat MAX_CHARA_TOTAL - MAX_CHARA_SAVE, MAX_CHARA_SAVE
		if ( cdata(CDATA_ROLE, cnt) == ROLE_NONE ) {
			continue
		}
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		locvar_calccosthire_cost += calchirecost(cnt)
	loop
	locvar_calccosthire_cost = abs(locvar_calccosthire_cost * limit(100 - limit(cdata(CDATA_KARMA, CHARA_PLAYER) / 2, 0, 50) - 7 * trait(TRAIT_NORMAL_OTHER_ACCOUNTANT) - (cdata(CDATA_KARMA, CHARA_PLAYER) >= 20) * 5, 25, 200) / 100)
	gdata(GDATA_COST_HIRE) = locvar_calccosthire_cost
	return

#defcfunc calccostbuilding
	locvar_calccostbuilding_hantei = 0
	locvar_calccostbuilding_omise = 0
	locvar_calccosthire_cost = 0
	locvar_calccosthire_cost += gdata(GDATA_HOME_LEVEL) * gdata(GDATA_HOME_LEVEL) * 200
	if ( gdata(GDATA_FLAG_SUB_MANSION_FOR_SALE) == 1000 ) {
		locvar_calccosthire_cost += 6000
	}
	repeat STARTING_RANDOM_AREA - STARTING_USER_AREA, STARTING_USER_AREA
		if ( adata(ADATA_ID, cnt) == AREA_MUSEUM ) {
			locvar_calccosthire_cost += 1500
			locvar_calccostbuilding_hantei++
		}
		if ( adata(ADATA_ID, cnt) == AREA_RANCH ) {
			locvar_calccosthire_cost += 1000
		}
		if ( adata(ADATA_ID, cnt) == AREA_CROP ) {
			locvar_calccosthire_cost += 750
		}
		if ( adata(ADATA_ID, cnt) == AREA_SHOP ) {
			locvar_calccosthire_cost += 2000
			locvar_calccostbuilding_omise++
		}
		if ( adata(ADATA_ID, cnt) == AREA_STORAGE_HOUSE ) {
			locvar_calccosthire_cost += 750
		}
	loop
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == VEHICLE_CARRIAGE ) {
		locvar_calccosthire_cost += 500
	}
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == VEHICLE_TRUCK ) {
		locvar_calccosthire_cost += 2000
	}
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == VEHICLE_MAGIC_LOCOMOTIVE ) {
		locvar_calccosthire_cost += 10000
	}
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == VEHICLE_LAND_BATTLESHIP ) {
		locvar_calccosthire_cost += 200000
	}
	if ( locvar_calccostbuilding_hantei == 0 ) {
		gdata(GDATA_RANK_MUSEUM) = 10000
	}
	if ( locvar_calccostbuilding_omise == 0 ) {
		gdata(GDATA_RANK_SHOP) = 10000
	}
	locvar_calccosthire_cost = abs(locvar_calccosthire_cost * limit(100 - limit(cdata(CDATA_KARMA, CHARA_PLAYER) / 2, 0, 50) - 7 * trait(TRAIT_NORMAL_OTHER_ACCOUNTANT) - (cdata(CDATA_KARMA, CHARA_PLAYER) >= 20) * 5, 25, 200) / 100)
	return locvar_calccosthire_cost

#defcfunc calccosttax
	locvar_calccosthire_cost = 0
	locvar_calccosthire_cost += limit(cdata(CDATA_GOLD, CHARA_PLAYER) / 33, 100, 100000)
	if ( cdata(CDATA_GOLD, CHARA_PLAYER) < gdata(GDATA_TURN) / 10 ) {
		locvar_calccosthire_cost += gdata(GDATA_TURN) / 100
	}
	if ( locvar_calccosthire_cost >= 100000 ) {
		locvar_calccosthire_cost = 100000
	}
	locvar_calccosthire_cost = abs(locvar_calccosthire_cost * limit(100 - limit(cdata(CDATA_KARMA, CHARA_PLAYER) / 2, 0, 50) - 7 * trait(TRAIT_NORMAL_OTHER_ACCOUNTANT) - (cdata(CDATA_KARMA, CHARA_PLAYER) >= 20) * 5, 25, 200) / 100)
	return locvar_calccosthire_cost

#defcfunc calcmealvalue
	locvar_calcitemvalue_value = 140
	return locvar_calcitemvalue_value

#defcfunc calcmealvalued
	locvar_calcitemvalue_value = 70
	return locvar_calcitemvalue_value

#defcfunc calccostreload int calccostreload_arg1, int calccostreload_arg2
	locvar_calccosthire_cost = 0
	inv_getheader calccostreload_arg1
	repeat invrange, invhead
		if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
			continue
		}
		if ( refitem(inv(INV_ITEM_ID, cnt), DBSPEC_TYPE) != FILTER_AMMO ) {
			continue
		}
		locvar_calccostreload_ci = cnt
		repeat RANGE_INV_ITEM_ENCHANT
			if ( inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, locvar_calccostreload_ci) == 0 ) {
				break
			}
			locvar_calccostreload_enc = inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, locvar_calccostreload_ci)
			locvar_calccostreload_i = locvar_calccostreload_enc / EXT_ENCHANTMENT
			if ( locvar_calccostreload_i != 0 ) {
				locvar_calccostreload_enc = locvar_calccostreload_enc \ EXT_ENCHANTMENT
				if ( locvar_calccostreload_i == ENCHANT_AMMO ) {
					locvar_calccostreload_i = inv(STARTING_INV_ITEM_ENCHANT + cnt * 2 + 1, locvar_calccostreload_ci) \ EXT_ENCHANTMENT_AMMO, inv(STARTING_INV_ITEM_ENCHANT + cnt * 2 + 1, locvar_calccostreload_ci) / EXT_ENCHANTMENT_AMMO
					locvar_calccosthire_cost += (locvar_calccostreload_i(1) - locvar_calccostreload_i) * (50 + locvar_calccostreload_enc * locvar_calccostreload_enc * 10)
					if ( calccostreload_arg2 == 1 ) {
						inv(STARTING_INV_ITEM_ENCHANT + cnt * 2 + 1, locvar_calccostreload_ci) = locvar_calccostreload_i(1) * EXT_ENCHANTMENT_AMMO + locvar_calccostreload_i(1)
					}
				}
			}
		loop
	loop
	repeat MAX_CHARA_FOLLOWER - 1, 1
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cnt == CHARA_PLAYER ) {
			continue
		}
		locvar_calccostreload_idd = cnt
		inv_getheader locvar_calccostreload_idd
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
				continue
			}
			if ( refitem(inv(INV_ITEM_ID, cnt), DBSPEC_TYPE) != FILTER_AMMO ) {
				continue
			}
			locvar_calccostreload_ci = cnt
			repeat RANGE_INV_ITEM_ENCHANT
				if ( inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, locvar_calccostreload_ci) == 0 ) {
					break
				}
				locvar_calccostreload_enc = inv(STARTING_INV_ITEM_ENCHANT + cnt * 2, locvar_calccostreload_ci)
				locvar_calccostreload_i = locvar_calccostreload_enc / EXT_ENCHANTMENT
				if ( locvar_calccostreload_i != 0 ) {
					locvar_calccostreload_enc = locvar_calccostreload_enc \ EXT_ENCHANTMENT
					if ( locvar_calccostreload_i == ENCHANT_AMMO ) {
						locvar_calccostreload_i = inv(STARTING_INV_ITEM_ENCHANT + cnt * 2 + 1, locvar_calccostreload_ci) \ EXT_ENCHANTMENT_AMMO, inv(STARTING_INV_ITEM_ENCHANT + cnt * 2 + 1, locvar_calccostreload_ci) / EXT_ENCHANTMENT_AMMO
						locvar_calccosthire_cost += (locvar_calccostreload_i(1) - locvar_calccostreload_i) * (50 + locvar_calccostreload_enc * locvar_calccostreload_enc * 10)
						if ( calccostreload_arg2 == 1 ) {
							inv(STARTING_INV_ITEM_ENCHANT + cnt * 2 + 1, locvar_calccostreload_ci) = locvar_calccostreload_i(1) * EXT_ENCHANTMENT_AMMO + locvar_calccostreload_i(1)
						}
					}
				}
			loop
		loop
	loop
	if ( locvar_calccosthire_cost > 0 ) {
		locvar_calccosthire_cost = locvar_calccosthire_cost / 2 + 1
	}
	return locvar_calccosthire_cost

#defcfunc calccargoupdate
	return 10000

#defcfunc calccargoupdatecost
	locvar_calccargoupdatecost_cargo = gdata(GDATA_CARGO_LIMIT)
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == 1 ) {
		locvar_calccargoupdatecost_cargo -= 10 * 1000
	}
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == 2 ) {
		locvar_calccargoupdatecost_cargo -= 20 * 1000
	}
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == 3 ) {
		locvar_calccargoupdatecost_cargo -= 30 * 1000
	}
	if ( gdata(GDATA_FLAG_WORLD_MAP_VEHICLE_KIND) == 4 ) {
		locvar_calccargoupdatecost_cargo -= 100 * 1000
	}
	locvar_calccosthire_cost = (locvar_calccargoupdatecost_cargo - gdata(GDATA_CARGO_LIMIT_ORG)) / 10000 + 1
	return locvar_calccosthire_cost

#defcfunc calcidentifyvalue int calcidentifyvalue_arg1
	locvar_calcitemvalue_value = 100
	if ( calcidentifyvalue_arg1 == 2 ) {
		locvar_calcitemvalue_value = 5000
	}
	if ( calcidentifyvalue_arg1 == 1 ) {
		inv_getheader 0
		locvar_generatemoney_p = 0
		repeat invrange, invhead
			if ( inv(INV_ITEM_NUM, cnt) == 0 ) {
				continue
			}
			if ( inv(INV_ITEM_KNOWN, cnt) < ITEM_KNOWN_FULL ) {
				if ( inv(INV_ITEM_KNOWN, cnt) == ITEM_KNOWN_NAME ) {
					locvar_generatemoney_p++
				}
				else {
					locvar_generatemoney_p += 10
				}
			}
		loop
		if ( locvar_generatemoney_p >= 10 ) {
			locvar_calcitemvalue_value = locvar_calcitemvalue_value * locvar_generatemoney_p * 7 / 100
		}
	}
	locvar_calcitemvalue_value = locvar_calcitemvalue_value * (limit(cdata(CDATA_FAME, CHARA_PLAYER) / 1000, 1, 100) + 100) / 200
	if ( gdata(GDATA_FLAG_GUILD_FIGHTER) ) {
		locvar_calcitemvalue_value /= 2
	}
	return locvar_calcitemvalue_value

#defcfunc calctraincost int calctraincost_arg1, int calctraincost_arg2, int calctraincost_arg3
	locvar_calcitemvalue_value = limit(sorg(calctraincost_arg1, calctraincost_arg2) / 40 + 1, 2, 5)
	if ( calctraincost_arg3 ) {
		locvar_calcitemvalue_value /= 2
	}
	return locvar_calcitemvalue_value

#defcfunc calclearncost int, int, int calclearncost_arg1
	locvar_calcitemvalue_value = limit(5 + gdata(GDATA_LEARNED), 5, 15)
	if ( calclearncost_arg1 ) {
		locvar_calcitemvalue_value = locvar_calcitemvalue_value * 2 / 3
	}
	return locvar_calcitemvalue_value

#defcfunc calcresurrectvalue int calcresurrectvalue_arg1
	if ( cdata(CDATA_EXIST, calcresurrectvalue_arg1) != CHAR_STATE_ALLY_DEAD ) {
		return 100
	}
	locvar_calcitemvalue_value = cdata(CDATA_LEVEL, calcresurrectvalue_arg1) * cdata(CDATA_LEVEL, calcresurrectvalue_arg1) * 15
	return locvar_calcitemvalue_value

#defcfunc calcslavevalue int calcslavevalue_arg1
	locvar_calcitemvalue_value = sdata(SKILL_ATTR_STR, calcslavevalue_arg1) * sdata(SKILL_ATTR_CON, calcslavevalue_arg1) + cdata(CDATA_LEVEL, calcslavevalue_arg1) * cdata(CDATA_LEVEL, calcslavevalue_arg1) + 1000
	if ( locvar_calcitemvalue_value > 50000 ) {
		locvar_calcitemvalue_value = 50000
	}
	if ( cdata(CDATA_BRUSH_LEVEL, calcslavevalue_arg1) > 0 ) {
		locvar_calcitemvalue_value = locvar_calcitemvalue_value * (cdata(CDATA_BRUSH_LEVEL, calcslavevalue_arg1) + 10) * (cdata(CDATA_BRUSH_LEVEL, calcslavevalue_arg1) + 10) / 100
	}
	locvar_calcitemvalue_value += limit(cdata(CDATA_IMPRESSION, calcslavevalue_arg1) - 50, 0, 300) * limit(cdata(CDATA_MASTER_SERVANT, calcslavevalue_arg1) - 50, 0, 300)
	if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, calcslavevalue_arg1) | cbit(CHARA_BIT_SPLIT_NO_EFFECT, calcslavevalue_arg1) ) {
		locvar_calcitemvalue_value = 10
	}
	return locvar_calcitemvalue_value

#defcfunc calcrestorecost
	locvar_calcitemvalue_value = 500
	if ( gdata(GDATA_FLAG_GUILD_FIGHTER) ) {
		locvar_calcitemvalue_value /= 2
	}
	return locvar_calcitemvalue_value

#defcfunc calcrestorecostc
	locvar_calcitemvalue_value = limit((cdata(CDATA_FAME, CHARA_PLAYER) + 1) / 100 * 200, 300, 3000)
	if ( gdata(GDATA_FLAG_GUILD_FIGHTER) ) {
		locvar_calcitemvalue_value /= 2
	}
	return locvar_calcitemvalue_value

#defcfunc calcinitgold int calcinitgold_arg1
	if ( calcinitgold_arg1 < 0 ) {
		return rnd(gdata(GDATA_LEVEL) * 25 * (gdata(GDATA_AREA) != AREA_SHELTER) + 10) + 1
	}
	locvar_calcinitgold_lootrich = -1
	if ( cdata(CDATA_ID, calcinitgold_arg1) == CREATURE_ID_RICH_PERSON ) {
		locvar_calcinitgold_lootrich = 10
	}
	if ( cdata(CDATA_ID, calcinitgold_arg1) == CREATURE_ID_NOBLE_CHILD ) {
		locvar_calcinitgold_lootrich = 4
	}
	if ( cdata(CDATA_ID, calcinitgold_arg1) == CREATURE_ID_TOURIST ) {
		locvar_calcinitgold_lootrich = 2
	}
	if ( locvar_calcinitgold_lootrich != (-1) ) {
		return locvar_calcinitgold_lootrich * 500 + rnd(1000 + locvar_calcinitgold_lootrich * 1000)
	}
	return rnd(cdata(CDATA_LEVEL, calcinitgold_arg1) * 25 + 10) + 1

#defcfunc calcspellpower int calcspellpower_skillid, int calcspellpower_charid
	if ( calcspellpower_skillid >= STARTING_SKILL_SPACT ) {
		if ( sdataref(SKILL_DATAREF_USE, calcspellpower_skillid) != 0 ) {
			return sdata(sdataref(SKILL_DATAREF_USE, calcspellpower_skillid), calcspellpower_charid) * 6 + 10
		}
		return 100
	}
	if ( calcspellpower_charid == CHARA_PLAYER ) {
		if ( gdata(GDATA_TEMPORARY_FLAGS) == 666 ) {
			if ( sdata(calcspellpower_skillid, calcspellpower_charid) * 10 + 50 < sdata(SKILL_NORMAL_CASTING, calcspellpower_charid) * 6 + 10 ) {
				return sdata(SKILL_NORMAL_CASTING, calcspellpower_charid) * 6 + 10
			}
		}
	}
	if ( calcspellpower_charid == CHARA_PLAYER ) {
		return sdata(calcspellpower_skillid, calcspellpower_charid) * 10 + 50
	}
	if ( sdata(SKILL_NORMAL_CASTING, calcspellpower_charid) == 0 ) {
		if ( calcspellpower_charid >= MAX_CHARA_FOLLOWER ) {
			return cdata(CDATA_LEVEL, calcspellpower_charid) * 6 + 10
		}
	}
	return sdata(SKILL_NORMAL_CASTING, calcspellpower_charid) * 7 + 10

#defcfunc calcspellfail int calcspellfail_skillid, int calcspellfail_charid
	if ( calcspellfail_charid != CHARA_PLAYER ) {
		if ( findbuff(calcspellfail_charid, BUFF_DISTRACTED) != (-1) ) {
			if ( gdata(GDATA_RIDER) == calcspellfail_charid ) {
				return 92 - limit(30 - sdata(SKILL_ACTIVE_RIDING, CHARA_PLAYER) / 2, 0, 30)
			}
			if ( cdatan(CDATAN_CLASS, calcspellfail_charid) == "warmage" ) {
				return 97
			}
			else {
				return 92
			}
		}
		else {
			if ( gdata(GDATA_RIDER) == calcspellfail_charid ) {
				return 95 - limit(30 - sdata(SKILL_ACTIVE_RIDING, CHARA_PLAYER) / 2, 0, 30)
			}
			if ( cdatan(CDATAN_CLASS, calcspellfail_charid) == "warmage" ) {
				return 100
			}
			else {
				return 95
			}
		}
	}
	locvar_calcspellfail_i = 4
	locvar_calcspellfail_f = carmor(calcspellfail_charid)
	if ( locvar_calcspellfail_f == 169 ) {
		locvar_calcspellfail_i = 17 - sdata(SKILL_NORMAL_HEAVY_ARMOR, calcspellfail_charid) / 5
	}
	if ( locvar_calcspellfail_f == 170 ) {
		locvar_calcspellfail_i = 12 - sdata(SKILL_NORMAL_MEDIUM_ARMOR, calcspellfail_charid) / 5
	}
	if ( locvar_calcspellfail_i < 4 ) {
		locvar_calcspellfail_i = 4
	}
	if ( gdata(GDATA_RIDER) != 0 ) {
		locvar_calcspellfail_i += 4
	}
	if ( calcspellfail_skillid == SKILL_SPELL_WISH ) {
		locvar_calcspellfail_i += sdata(calcspellfail_skillid, calcspellfail_charid)
	}
	if ( calcspellfail_skillid == SKILL_SPELL_WIZARDS_HARVEST ) {
		locvar_calcspellfail_i += sdata(calcspellfail_skillid, calcspellfail_charid) / 3
	}
	if ( cdata(CDATA_ADVANCED_CASTING_ENABLED, CHARA_PLAYER) == 1 ) {
		locvar_calcspellfail_i = locvar_calcspellfail_i * 3
	}
	locvar_calcspellfail_p = 90 + sdata(calcspellfail_skillid, calcspellfail_charid) - sdataref(SKILL_DATAREF_DIFF, calcspellfail_skillid) * locvar_calcspellfail_i / (5 + sdata(SKILL_NORMAL_CASTING, calcspellfail_charid) * 4)
	if ( locvar_calcspellfail_f == 169 ) {
		if ( locvar_calcspellfail_p > 80 ) {
			locvar_calcspellfail_p = 80
		}
	}
	else {
		if ( locvar_calcspellfail_f == 170 ) {
			if ( locvar_calcspellfail_p > 92 ) {
				locvar_calcspellfail_p = 92
			}
		}
		else {
			if ( locvar_calcspellfail_p > 100 ) {
				locvar_calcspellfail_p = 100
			}
		}
	}
	if ( cdata(CDATA_ATTACK_STYLE, calcspellfail_charid) & STYLE_DUAL_WIELD ) {
		locvar_calcspellfail_p -= 6
	}
	if ( cdata(CDATA_ATTACK_STYLE, calcspellfail_charid) & STYLE_SHIELD ) {
		if ( cdata(CDATA_SHIELD_STYLE_TYPE, calcspellfail_charid) == SHIELD_STYLE_NORMAL ) {
			locvar_calcspellfail_p -= 5
		}
	}
	if ( cdatan(CDATAN_CLASS, calcspellfail_charid) == "warmage" ) {
		locvar_calcspellfail_p += 5
	}
	if ( findbuff(calcspellfail_charid, BUFF_DISTRACTED) != (-1) ) {
		locvar_calcspellfail_p -= 3
	}
	if ( locvar_calcspellfail_p > 100 ) {
		locvar_calcspellfail_p = 100
	}
	if ( locvar_calcspellfail_p < 1 ) {
		locvar_calcspellfail_p = 1
	}
	return locvar_calcspellfail_p

#defcfunc calcspellcostmp int calcspellcostmp_skillid, int calcspellcostmp_charid
	if ( calcspellcostmp_charid == CHARA_PLAYER ) {
		if ( calcspellcostmp_skillid == SKILL_SPELL_ORACLE | calcspellcostmp_skillid == SKILL_SPELL_RESURRECTION | calcspellcostmp_skillid == SKILL_SPELL_DOOR_CREATION | calcspellcostmp_skillid == SKILL_SPELL_WALL_CREATION | calcspellcostmp_skillid == SKILL_SPELL_TELEPORT_OTHER | calcspellcostmp_skillid == SKILL_SPELL_TELEPORT | calcspellcostmp_skillid == SKILL_SPELL_SHORT_TELEPORT | calcspellcostmp_skillid == SKILL_SPELL_GRAVITY ) {
			locvar_calcspellcostmp_cost = sdataref(SKILL_DATAREF_COST, calcspellcostmp_skillid)
			return locvar_calcspellcostmp_cost
		}
		locvar_calcspellcostmp_cost = sdataref(SKILL_DATAREF_COST, calcspellcostmp_skillid) * (100 + sdata(calcspellcostmp_skillid, calcspellcostmp_charid) * 3) / 100 + sdata(calcspellcostmp_skillid, calcspellcostmp_charid) / 8
	}
	else {
		locvar_calcspellcostmp_cost = sdataref(SKILL_DATAREF_COST, calcspellcostmp_skillid) * (50 + cdata(CDATA_LEVEL, calcspellcostmp_charid) * 3) / 100
	}
	if ( cdatan(CDATAN_CLASS, locvar_calcspellcostmp_cc) == "wizard" ) {
		locvar_calcspellcostmp_cost = locvar_calcspellcostmp_cost * 90 / 100
	}
	return locvar_calcspellcostmp_cost

#defcfunc calcspellcoststock int calcspellcoststock_skillid, int calcspellcoststock_charid
	locvar_calcspellcoststock_cost = sdataref(SKILL_DATAREF_COST, calcspellcoststock_skillid) * 200 / (sdata(calcspellcoststock_skillid, calcspellcoststock_charid) * 3 + 100)
	if ( locvar_calcspellcoststock_cost < sdataref(SKILL_DATAREF_COST, calcspellcoststock_skillid) / 5 ) {
		locvar_calcspellcoststock_cost = sdataref(SKILL_DATAREF_COST, calcspellcoststock_skillid) / 5
	}
	locvar_calcspellcoststock_cost = rnd(locvar_calcspellcoststock_cost / 6 + 1) + locvar_calcspellcoststock_cost / 6
	if ( locvar_calcspellcoststock_cost < 1 ) {
		locvar_calcspellcoststock_cost = 1
	}
	return locvar_calcspellcoststock_cost

#deffunc skillinit int skillinit_skillid, int skillinit_charid, int skillinit_arg3
	dup locvar_skillinit_sdatadup, sdata(skillinit_skillid + STARTING_SKILL_SPACT, skillinit_charid)
	if ( skillinit_skillid >= STARTING_SKILL_WEAPON ) {
		locvar_skillinit_p = skillinit_arg3 * 5
		if ( locvar_skillinit_sdatadup / 1000000 == 0 ) {
			locvar_skillinit_p += 100
		}
		else {
			locvar_skillinit_p += 50
		}
	}
	else {
		locvar_skillinit_p = skillinit_arg3 * 20
		if ( locvar_skillinit_p > 400 ) {
			locvar_skillinit_p = 400
		}
	}
	if ( skillinit_skillid == SKILL_ATTR_SPD ) {
		locvar_skillinit_p(1) = skillinit_arg3 * (100 + cdata(CDATA_LEVEL, skillinit_charid) * 2) / 100
	}
	else {
		locvar_skillinit_p(1) = locvar_skillinit_p * locvar_skillinit_p * cdata(CDATA_LEVEL, skillinit_charid) / 45000 + skillinit_arg3 + cdata(CDATA_LEVEL, skillinit_charid) / 3
	}
	if ( cdata(CDATA_ID, skillinit_charid) == CREATURE_ID_FRON_THE_TOUR_PLANNER ) {
		if ( skillinit_skillid == SKILL_ATTR_CHA ) {
			locvar_skillinit_p(1) = locvar_skillinit_p(1) / 2 + 1
		}
	}
	if ( cdata(CDATA_LEVEL, skillinit_charid) > 1 ) {
		locvar_skillinit_p = int(expf(logf(0.9) * cdata(CDATA_LEVEL, skillinit_charid)) * locvar_skillinit_p)
	}
	if ( locvar_skillinit_p < 1 ) {
		locvar_skillinit_p = 1
	}
	if ( skillinit_skillid == SKILL_ATTR_LIFE | skillinit_skillid == SKILL_ATTR_LUC | skillinit_skillid == SKILL_ATTR_MANA ) {
		locvar_skillinit_p(1) = skillinit_arg3
		locvar_skillinit_p = 100
	}
	if ( locvar_skillinit_sdatadup / 1000000 + locvar_skillinit_p(1) > 2000 ) {
		locvar_skillinit_p(1) = 2000 - locvar_skillinit_sdatadup / 1000000
	}
	locvar_skillinit_sdatadup += limit(locvar_skillinit_p(1), 0, 2000) * 1000000 + locvar_skillinit_p
	return

*calcInitialSkill
	repeat MAX_SKILL_RESIST - STARTING_SKILL_RESIST, STARTING_SKILL_RESIST
		if ( cdata(CDATA_LEVEL, r1) < 100 ) {
			p = cdata(CDATA_LEVEL, r1) * 2 + 98
		}
		if ( cdata(CDATA_LEVEL, r1) >= 100 ) {
			p = cdata(CDATA_LEVEL, r1) / 2 + 250
		}
		if ( p > 400 ) {
			p = 400
		}
		if ( cnt == SKILL_RES_MAGIC | cdata(CDATA_LEVEL, r1) == 1 ) {
			p = limit(p / 2, 100, 200)
		}
		if ( sdata(cnt, r1) != 0 ) {
			if ( sdata(cnt, r1) < 100 ) {
				p = sdata(cnt, r1)
			}
			if ( sdata(cnt, r1) >= 400 ) {
				p += sdata(cnt, r1)
			}
			if ( cdata(CDATA_ALLIED, r1) != 0 ) {
				p = sdata(cnt, r1)
			}
		}
		sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(p, 1, 800) * 1000000
	loop
	i = 4
	skillinit SKILL_WEAPON_LONGSWORD, r1, i
	skillinit SKILL_WEAPON_SHORTSWORD, r1, i
	skillinit SKILL_WEAPON_BLUNT, r1, i
	skillinit SKILL_WEAPON_AXE, r1, i
	skillinit SKILL_WEAPON_POLEARM, r1, i
	skillinit SKILL_WEAPON_STAVE, r1, i
	skillinit SKILL_WEAPON_SCYTHE, r1, i
	skillinit SKILL_WEAPON_BOW, r1, i
	skillinit SKILL_WEAPON_THROWING, r1, i
	skillinit SKILL_WEAPON_FIREARM, r1, i
	skillinit SKILL_WEAPON_CROSSBOW, r1, i
	skillinit SKILL_NORMAL_EVASION, r1, 4
	skillinit SKILL_NORMAL_HEALING, r1, 4
	skillinit SKILL_NORMAL_MEDITATION, r1, 4
	skillinit SKILL_WEAPON_MARTIAL_ARTS, r1, 4
	skillinit SKILL_NORMAL_STEALTH, r1, 4
	skillinit SKILL_NORMAL_FAITH, r1, 4
	skillinit SKILL_NORMAL_LIGHT_ARMOR, r1, 4
	skillinit SKILL_NORMAL_MEDIUM_ARMOR, r1, 4
	skillinit SKILL_NORMAL_HEAVY_ARMOR, r1, 4
	skillinit SKILL_NORMAL_SHIELD, r1, 3
	skillinit SKILL_ATTR_LUC, r1, 50
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_URCAGUARY ) {
		skillinit SKILL_NORMAL_JEWELER, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_KARAVIKA ) {
		skillinit SKILL_NORMAL_PERFORMER, r1, 40
		skillinit SKILL_NORMAL_TACTICS, r1, 2
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_GARZIEM ) {
		skillinit SKILL_ACTIVE_RIDING, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ROVID ) {
		skillinit SKILL_NORMAL_SHIELD, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SINAHA ) {
		skillinit SKILL_NORMAL_EVASION, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ARASIEL ) {
		skillinit SKILL_NORMAL_EVASION, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_AMURDAD ) {
		skillinit SKILL_NORMAL_HEALING, r1, 40
		skillinit SKILL_NORMAL_TACTICS, r1, 2
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SOPHIA_THE_WISE ) {
		skillinit SKILL_NORMAL_MEMORIZATION, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ITZPALT | cdata(CDATA_ID, r1) == CREATURE_ID_THE_ELEMENT ) {
		skillinit SKILL_NORMAL_MAGIC_DEVICE, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_YACATECT | cdata(CDATA_ID, r1) == CREATURE_ID_HYPER_YACATECT ) {
		skillinit SKILL_NORMAL_NEGOTIATION, r1, 40
		skillinit SKILL_NORMAL_INVESTING, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_JURE | cdata(CDATA_ID, r1) == CREATURE_ID_BLESSED_JURE ) {
		skillinit SKILL_NORMAL_HEALING, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_OPATOS | cdata(CDATA_ID, r1) == CREATURE_ID_BUILDUP_OPATOS ) {
		skillinit SKILL_NORMAL_WEIGHT_LIFTING, r1, 40
		skillinit SKILL_NORMAL_MINING, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MANI | cdata(CDATA_ID, r1) == CREATURE_ID_DEUS_EX_MANINA ) {
		skillinit SKILL_NORMAL_DISARM_TRAP, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_KUMIROMI | cdata(CDATA_ID, r1) == CREATURE_ID_KUMIROMI ) {
		skillinit SKILL_NORMAL_GARDENING, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_LULWY | cdata(CDATA_ID, r1) == CREATURE_ID_DEVASTATE_LULWY ) {
		skillinit SKILL_NORMAL_GREATER_EVASION, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_EHEKATL | cdata(CDATA_ID, r1) == CREATURE_ID_GOD_INSIDE_EHEKATL ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MARKA_THE_SILVER_BEAR ) {
		skillinit SKILL_ATTR_STR, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SHOPKEEPER_CROW | cdata(CDATA_ID, r1) == CREATURE_ID_LEND_THE_TAKER | cdata(CDATA_ID, r1) == CREATURE_ID_BANKRUPT_GUO | cdata(CDATA_ID, r1) == CREATURE_ID_SHOPKEEPER | cdata(CDATA_ID, r1) == CREATURE_ID_SHOPKEEPER2 ) {
		skillinit SKILL_NORMAL_NEGOTIATION, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SMALL_STONE_GOLEM | cdata(CDATA_ID, r1) == CREATURE_ID_SMALL_WOODEN_GOLEM | cdata(CDATA_ID, r1) == CREATURE_ID_STEEL_ARMOR_SPIDER | cdata(CDATA_ID, r1) == CREATURE_ID_GOLD_ARMOR_ANT ) {
		skillinit SKILL_NORMAL_CASTING, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_WANDERING_PENGUIN ) {
		skillinit SKILL_NORMAL_SWIMMING, r1, 15
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_NERES_THE_AMNESIAC ) {
		skillinit SKILL_ATTR_STR, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_REGULUS_THE_ALTERED ) {
		skillinit SKILL_ATTR_STR, r1, 3
		skillinit SKILL_NORMAL_HEALING, r1, 40
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_FRON_THE_TOUR_PLANNER ) {
		skillinit SKILL_ATTR_STR, r1, 3
		skillinit SKILL_ATTR_CON, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_EGELVEIL_THE_BIND ) {
		skillinit SKILL_ATTR_CON, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_EFFECT_BUTTERFLY ) {
		skillinit SKILL_ATTR_MAG, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_LAZASYE_THE_DESTROY ) {
		skillinit SKILL_ATTR_CON, r1, 5
		skillinit SKILL_ATTR_MAG, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_CONDUCTOR_KOALA ) {
		skillinit SKILL_ATTR_CON, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ZOMBIE_QUEEN ) {
		skillinit SKILL_ATTR_CHA, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_REQUIEM ) {
		skillinit SKILL_NORMAL_CASTING, r1, 7
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ZOMBIE_GIRL ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_FORTRESSNAIL ) {
		skillinit SKILL_WEAPON_FIREARM, r1, 7
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SHURAIDA_THE_EXPERT_MERC ) {
		skillinit SKILL_NORMAL_MARKSMAN, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ARIBEL_THE_WHITE_ARMS ) {
		skillinit SKILL_NORMAL_EVASION, r1, 7
		skillinit SKILL_NORMAL_GREATER_EVASION, r1, 7
		skillinit SKILL_ATTR_STR, r1, 5
		skillinit SKILL_ATTR_WIL, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SPIPHA_THE_DRAGON_HUNTER ) {
		skillinit SKILL_NORMAL_TACTICS, r1, 4
		skillinit SKILL_ATTR_PER, r1, 3
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_DHWTY ) {
		skillinit SKILL_NORMAL_MARKSMAN, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_PERFORMAID_COCRUEL ) {
		skillinit SKILL_NORMAL_COOKING, r1, 7
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MOBILE_COMMUNICATION_EQUIPMENT ) {
		skillinit SKILL_ATTR_CON, r1, 10
		skillinit SKILL_NORMAL_MARKSMAN, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_BIND_DEVIL_WORM ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 3
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SAIMEF_THE_DOGGOD ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 8
		skillinit SKILL_ATTR_MAG, r1, 3
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_FASHIONABLE_KUNOICHI ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 8
		skillinit SKILL_WEAPON_SCYTHE, r1, 5
		skillinit SKILL_ATTR_DEX, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SHELL_KING_OF_VINDALE ) {
		skillinit SKILL_ATTR_CON, r1, 8
		skillinit SKILL_ATTR_MAG, r1, 12
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MANYTIA_THE_ADVENTURE_MERCHANT ) {
		skillinit SKILL_ATTR_PER, r1, 6
		skillinit SKILL_ATTR_CON, r1, 8
		skillinit SKILL_NORMAL_TACTICS, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MARY_THE_INSECT_MASTER ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 9
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ICOLLE_THE_BIOLOGIST ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 9
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_NURSE ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MAD_SCIENTIST ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 8
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_KILLER_NURSE ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 2
		skillinit SKILL_NORMAL_ANATOMY, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_KOBOLD_BLUE ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 2
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ZOMBIE_QUEEN ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 8
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MESHERA_GAMMA ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_LANKATA_THE_LIGHTNING_OF_BLUE ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 6
		skillinit SKILL_ATTR_DEX, r1, 6
		skillinit SKILL_NORMAL_TACTICS, r1, 9
		skillinit SKILL_ATTR_CON, r1, 8
		skillinit SKILL_WEAPON_POLEARM, r1, 7
		skillinit SKILL_NORMAL_CASTING, r1, 6
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 8
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ZOIBO ) {
		skillinit SKILL_NORMAL_MARKSMAN, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ALFRED_THE_CANGNAN_WIND ) {
		skillinit SKILL_ATTR_STR, r1, 7
		skillinit SKILL_ATTR_CON, r1, 6
		skillinit SKILL_ATTR_DEX, r1, 6
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 8
		skillinit SKILL_NORMAL_TACTICS, r1, 4
		skillinit SKILL_WEAPON_AXE, r1, 6
		skillinit SKILL_NORMAL_MARKSMAN, r1, 8
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_ZANAN_ENHANCED_SOLDIER ) {
		skillinit SKILL_ATTR_CON, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_GRASS_DANCER ) {
		skillinit SKILL_ATTR_CHA, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_CHAOS_SERPENT ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 8
		skillinit SKILL_NORMAL_MARKSMAN, r1, 6
		skillinit SKILL_ATTR_STR, r1, 4
		skillinit SKILL_ATTR_CON, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_CRESCE_THE_SEMINAR_LECTURER ) {
		skillinit SKILL_NORMAL_CARPENTRY, r1, 4
		skillinit SKILL_NORMAL_MAGIC_DEVICE, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MAGIC_HAWK_MOTH ) {
		skillinit SKILL_ATTR_CHA, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_BLACK_HOPPER_X ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_FIN_CROCODILE ) {
		skillinit SKILL_NORMAL_SWIMMING, r1, 15
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SICKFULL_OLDER_BROTHER ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 6
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_GRAVEED_THE_GRAVITY_VALLEY ) {
		skillinit SKILL_NORMAL_MAGIC_CAPACITY, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_FOREST_ASSASSIN ) {
		skillinit SKILL_NORMAL_DETECTION, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_FALLEN_BIRD ) {
		skillinit SKILL_ACTIVE_RIDING, r1, 7
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_STRANGE_OLD_PERSON ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_DESKTOP_NAVY ) {
		skillinit SKILL_NORMAL_SWIMMING, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_OLD_BELL ) {
		skillinit SKILL_NORMAL_INVESTING, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_SILVER_SKULL_MAJESTY ) {
		skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 7
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_LIAR_POISON_FUNGUS ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 7
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MATANGODDESS ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 5
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_BONYAC_THE_GENERAL_VENDOR ) {
		skillinit SKILL_NORMAL_COOKING, r1, 10
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_MONOEYE_GIRL ) {
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 4
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_IRIS ) {
		skillinit SKILL_NORMAL_ALCHEMY, r1, 3
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_PROFANITY_PRIEST ) {
		skillinit SKILL_NORMAL_ALCHEMY, r1, 3
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_HEQET ) {
		skillinit SKILL_NORMAL_ALCHEMY, r1, 3
	}
	if ( necrop2 > 0 ) {
		if ( necrop2 == ITEM_ID_BONE ) {
			skillinit SKILL_NORMAL_TACTICS, r1, 2
		}
		if ( necrop2 == ITEM_ID_HEART ) {
			skillinit SKILL_ATTR_CON, r1, 3
		}
		if ( necrop2 == ITEM_ID_EYE ) {
			skillinit SKILL_NORMAL_CONTROL_MAGIC, r1, 6
		}
		if ( necrop2 == ITEM_ID_BLOOD ) {
			skillinit SKILL_NORMAL_SWIMMING, r1, 3
		}
		if ( necrop2 == ITEM_ID_SKIN ) {
			skillinit SKILL_RES_FIRE, r1, 5
		}
	}
	if ( cdata(CDATA_ID, r1) == CREATURE_ID_UNITDEAD_KING ) {
		skillinit SKILL_ATTR_STR, r1, 8
	}

    if ( dbg_extraSkills & r1 == CHARA_PLAYER ) {
		spact(SKILL_SPACT_DRAIN_BLOOD - STARTING_SKILL_SPACT) = 1
		spact(SKILL_SPACT_FIRE_BREATH - STARTING_SKILL_SPACT) = 1
		spact(SKILL_SPACT_TOUCH_OF_WEAKNESS - STARTING_SKILL_SPACT) = 1
		spact(SKILL_SPACT_PSYCHOANALYSIS - STARTING_SKILL_SPACT) = 1
		repeat MAX_SKILL - STARTING_SKILL_SPACT
			spact(cnt + STARTING_SKILL_SPACT - STARTING_SKILL_SPACT) = 1
		loop
		skillinit SKILL_NORMAL_CASTING, r1, 6
		skillinit SKILL_NORMAL_SHIELD, r1, 2
		skillinit SKILL_WEAPON_FIREARM, r1, 2
		skillinit SKILL_NORMAL_TWO_HAND, r1, 5
		skillinit SKILL_NORMAL_DUAL_WIELD, r1, 5
		skillinit SKILL_NORMAL_NEGOTIATION, r1, 5
		skillinit SKILL_NORMAL_INVESTING, r1, 5
		skillinit SKILL_NORMAL_ANATOMY, r1, 5
		skillinit SKILL_NORMAL_SENSE_QUALITY, r1, 5
		skillinit SKILL_NORMAL_MINING, r1, 5
		skillinit SKILL_NORMAL_LITERACY, r1, 6
		skillinit SKILL_NORMAL_MAGIC_CAPACITY, r1, 6
		skillinit SKILL_NORMAL_COOKING, r1, 8
		skillinit SKILL_NORMAL_WEIGHT_LIFTING, r1, 1
		skillinit SKILL_NORMAL_LOCK_PICKING, r1, 5
		skillinit SKILL_NORMAL_PERFORMER, r1, 5
		skillinit SKILL_NORMAL_FISHING, r1, 8
		skillinit SKILL_NORMAL_DETECTION, r1, 1
		skillinit SKILL_NORMAL_MAGIC_DEVICE, r1, 6
		skillinit SKILL_NORMAL_DISARM_TRAP, r1, 6
		skillinit SKILL_NORMAL_CARPENTRY, r1, 6
		skillinit SKILL_NORMAL_TAILORING, r1, 6
		skillinit SKILL_NORMAL_ALCHEMY, r1, 6
		skillinit SKILL_NORMAL_JEWELER, r1, 6
		skillinit SKILL_NORMAL_GARDENING, r1, 6
		skillinit SKILL_NORMAL_GREATER_EVASION, r1, 6
		skillinit SKILL_NORMAL_EYE_OF_MIND, r1, 6
		skillinit SKILL_NORMAL_SWIMMING, r1, 8
		skillinit SKILL_ACTIVE_PICKPOCKET, r1, 6
		skillinit SKILL_NORMAL_TRAVELING, r1, 6
		skillinit SKILL_NORMAL_GENE_ENGINEER, r1, 6
		skillinit SKILL_ACTIVE_RIDING, r1, 6
		repeat MAX_SPELL - STARTING_SKILL_SPELL, STARTING_SKILL_SPELL
			skillgain r1, cnt, cdata(CDATA_LEVEL, r1), 100 * 2
		loop
		return
    }

	return

*calcReadCheck
	if ( ens2 != 0 ) {
		if ( rnd(2) == 0 ) {
			snd SOUNDLIST_BOOK1
		}
	}
	f = 1
	tc = cc
	if ( cdata(CDATA_CONDITION_BLIND, cc) != 0 ) {
		f = 0
	}
	if ( cdata(CDATA_CONDITION_CONFUSE, cc) != 0 ) {
		if ( rnd(4) != 0 ) {
			f = 0
		}
	}
	else {
		if ( r3 == 0 ) {
			r4 = sdata(SKILL_ATTR_MAG, cc)
		}
		else {
			r4 = sdata(sdataref(SKILL_DATAREF_USE, r3), cc)
		}
		if ( rnd((sdata(SKILL_NORMAL_LITERACY, cc) + ens2) * r4 * 4 + 250) < rnd(r2 + 1) ) {
			if ( rnd(7) == 0 ) {
				f = 0
			}
			if ( r4 * 10 < r2 ) {
				if ( rnd(r4 * 10 + 1) < rnd(r2 + 1) ) {
					f = 0
				}
			}
			if ( r4 * 20 < r2 ) {
				if ( rnd(r4 * 20 + 1) < rnd(r2 + 1) ) {
					f = 0
				}
			}
			if ( r4 * 30 < r2 ) {
				if ( rnd(r4 * 30 + 1) < rnd(r2 + 1) ) {
					f = 0
				}
			}
		}
	}
	if ( f == 1 ) {
		return 1
	}
	if ( ens2 != 0 ) {
		txt lang("「危ない！」魔力の渦の発生に気がついた仲間が、読書を中断させた。", "\"Look out!\" An ally notices a magical vortex and interrupts your reading.")
		ens2 = 0
		return 0
	}
	if ( rnd(4) == 0 ) {
		if ( synccheck(cc, -1) ) {
			txt lang(name(cc) + "はマナを吸い取られた！", name(cc) + your(cc) + " mana is absorbed.")
		}
		if ( cc == CHARA_PLAYER ) {
			dmgmp cc, cdata(CDATA_MAX_MP, cc)
		}
		else {
			dmgmp cc, cdata(CDATA_MAX_MP, cc) / 3
		}
		return 0
	}
	if ( rnd(4) == 0 ) {
		if ( synccheck(cc, -1) ) {
			if ( cdata(CDATA_CONDITION_CONFUSE, cc) != 0 ) {
				txt lang(name(cc) + "は余計に混乱した。", name(cc) + " " + is(cc) + " even more confused now.")
			}
			else {
				txt lang("難解だ！", "It's too difficult!")
			}
		}
		dmgcon cc, CONDITION_CONFUSE, 100
		return 0
	}
	if ( rnd(4) == 0 ) {
		if ( cc == CHARA_PLAYER ) {
			if ( synccheck(cc, -1) ) {
				txt lang("魔力の渦が何かを召喚した！", "Several creatures are summoned from a magical vortex.")
			}
			repeat 2 + rnd(3)
				flt calcobjlv(cdata(CDATA_LEVEL, CHARA_PLAYER) * 3 / 2 + 3), calcfixlv(FIX_QUALITY_GOOD)
				characreate -1, CREATURE_ID_BUG, cdata(CDATA_X, cc), cdata(CDATA_Y, cc)
				cbitmod CHARA_BIT_SUMMONED, rc, 1
				if ( stat != 0 ) {
					if ( cdata(CDATA_RELATION, cc) <= (-3) ) {
						cdata(CDATA_RELATION, rc) = -1
						cdata(CDATA_RELATION_ORG, rc) = -1
					}
				}
			loop
			return 0
		}
	}
	if ( cdata(CDATA_CONDITION_CONFUSE, cc) != 0 ) {
		return 0
	}
	if ( synccheck(cc, -1) ) {
		txt lang(name(cc) + "は奇妙な力に捻じ曲げられた！", "A dimensional door opens in front of you.")
	}
	tc = cc
	efid = SKILL_SPELL_TELEPORT
	gosub *effect
	return 0

*calcSearch
	if ( rnd(sdata(SKILL_NORMAL_DETECTION, cc) * 15 + 20 + sdata(SKILL_ATTR_PER, cc)) > rnd(gdata(GDATA_LEVEL) * 8 + 60) ) {
		gosub *expDetection
		return 1
	}
	return 0

*calcTrap
	if ( feat(2) == CELL_SUB_FEATURE_TRAP_QUEST_MINE ) {
		return 0
	}
	if ( cdata(CDATA_CONDITION_GRAVITY, cc) > 0 ) {
		if ( findbuff(cc, BUFF_GRAVITY_ACCEL) == (-1) ) {
			return 0
		}
	}
	if ( cdata(CDATA_FRIENDSHIP, CHARA_PLAYER) == 2 ) {
		return 0
	}
	if ( cc < MAX_CHARA_FOLLOWER ) {
		if ( rnd(refdiff + 1) < sdata(SKILL_ATTR_PER, cc) + sdata(SKILL_NORMAL_DETECTION, cc) * 4 ) {
			return 1
		}
	}
	else {
		if ( rnd(4) != 0 ) {
			return 1
		}
	}
	return 0

*expDisarm
	skillexp SKILL_NORMAL_DISARM_TRAP, cc, 50
	return

*calcDisarm
	if ( rnd(sdata(SKILL_NORMAL_DISARM_TRAP, cc) * 15 + 20 + sdata(SKILL_ATTR_DEX, cc)) > rnd(gdata(GDATA_LEVEL) * 12 + 100) ) {
		gosub *expDisarm
		return 1
	}
	return 0

*calcStealth
	if ( cdata(CDATA_CONDITION_SEPPUKU, r2) > 0 ) {
		return 0
	}
	if ( map(cdata(CDATA_X, r2), cdata(CDATA_Y, r2), 5) != 0 ) {
		if ( mapitemfind(cdata(CDATA_X, r2), cdata(CDATA_Y, r2), ITEM_ID_LULWYS_PHOTO_COLLECTION) != (-1) ) {
			if ( cdata(CDATA_ID, cc) != CREATURE_ID_LULWY & cdata(CDATA_ID, cc) != CREATURE_ID_DEVASTATE_LULWY ) {
				return 0
			}
		}
	}
	cv = 8
	if ( cdata(CDATA_X, r1) > cdata(CDATA_X, r2) - cv & cdata(CDATA_X, r1) < cdata(CDATA_X, r2) + cv ) {
		if ( cdata(CDATA_Y, r1) > cdata(CDATA_Y, r2) - cv & cdata(CDATA_Y, r1) < cdata(CDATA_Y, r2) + cv ) {
			if ( cdata(CDATA_AI_AGGRO, r2) > 0 ) {
				return 1
			}
			p = dist(cdata(CDATA_X, r1), cdata(CDATA_Y, r1), cdata(CDATA_X, r2), cdata(CDATA_Y, r2)) * 150 + (sdata(SKILL_NORMAL_STEALTH, r1) * 100 + 150) + 1
			if ( rnd(p) * 3 < rnd(sdata(SKILL_ATTR_PER, r2) * 60 + 150) ) {
				return 1
			}
		}
	}
	if ( pcnoise != 0 ) {
		if ( rnd(150) < pcnoise ) {
			return 1
		}
	}
	return 0

*calcHunger
	if ( trait(TRAIT_RACE_SLOW_DIGESTION) ) {
		if ( cdata(CDATA_HUNGER, r1) <= 5000 ) {
			if ( rnd(3) == 0 ) {
				return
			}
		}
	}
	if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_PURGE ) {
		if ( cdata(CDATA_HUNGER, r1) < 5000 ) {
			cdata(CDATA_HUNGER, r1) = 5000
		}
		if ( cdata(CDATA_HUNGER, r1) <= 5000 ) {
			return
		}
	}
	p = cdata(CDATA_HUNGER, r1) / 1000
	if ( gdata(GDATA_FLAG_MAIN) != 900 ) {
		cdata(CDATA_HUNGER, r1) -= 8
	}
	if ( findbuff(r1, BUFF_CURSE_OF_HUNGER) != (-1) ) {
		cdata(CDATA_HUNGER, r1) -= 8
	}
	if ( cdata(CDATA_HUNGER, r1) / 1000 != p ) {
		if ( p == 1000 / 1000 ) {
			msgalert = 1
			txt lang("このままだと餓死してしまう！", "You are starving!"), lang("腹が減ってほとんど死にかけている。", "You are almost dead from hunger.")
		}
		if ( p == 2000 / 1000 ) {
			msgalert = 1
			txt lang("空腹で目が回りだした…", "Your hunger makes you dizzy."), lang("すぐに何かを食べなくては…", "You have to eat something NOW.")
		}
		if ( p == 5000 / 1000 ) {
			msgalert = 1
			txt lang("腹がすいてきた。", "You are getting hungry."), lang("空腹になった。", "You feel hungry."), lang("さて何を食べようか。", "Now what shall I eat?")
		}
		refreshspeed r1
	}
	return

*calcThirst
	if ( cdata(CDATA_THIRST, r1) <= 0 ) {
		cdata(CDATA_THIRST, r1) = 1
	}
	if ( gdata(GDATA_FLAG_GAME_MODE) == 5 ) {
		if ( cdata(CDATA_THIRST, r1) < 5000 ) {
			cdata(CDATA_THIRST, r1) = 5000
		}
		if ( cdata(CDATA_THIRST, r1) <= 5000 ) {
			return
		}
	}
	p = cdata(CDATA_THIRST, r1) / 1000
	if ( gdata(GDATA_FLAG_MAIN) != 900 ) {
		if ( cdata(CDATA_CONDITION_WET, r1) <= 0 ) {
			cdata(CDATA_THIRST, r1) -= 8 / 2
		}
	}
	if ( cdata(CDATA_CONDITION_WET, r1) > 0 ) {
		if ( cdata(CDATA_THIRST, r1) < 10000 ) {
			cdata(CDATA_THIRST, r1) += 8 * 10
		}
	}
	if ( findbuff(r1, BUFF_CURSE_OF_HUNGER) != (-1) ) {
		cdata(CDATA_THIRST, r1) -= 8 / 2
	}
	if ( cdata(CDATA_THIRST, r1) / 1000 != p ) {
		if ( p == 1000 / 1000 ) {
			msgalert = 1
			txt lang("このままだと脱水症状で倒れてしまう！", "You are about to collapse from dehydration!"), lang("水分不足で干物になりそうだ。", "You are almost a mummy.")
		}
		if ( p == 2000 / 1000 ) {
			msgalert = 1
			txt lang("水分不足で目が回りだした…", "Your thirst makes you dizzy."), lang("すぐに何かを飲まなくては…", "You have to drink something NOW.")
		}
		if ( p == 5000 / 1000 ) {
			msgalert = 1
			txt lang("喉がカラカラだ。", "You are getting thirsty."), lang("喉が渇いた。", "You feel thirsty."), lang("さて何を飲もうか。", "Now what shall I drink?")
		}
		refreshspeed r1
	}
	return

*calcCondition
	if ( tarudmg != 0 ) {
		repeat MAX_CHARA_TOTAL
			if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
				continue
			}
			if ( cdata(CDATA_CONDITION_SLEEP, cnt) >= 0 ) {
				continue
			}
			txt lang(name(cnt) + "は爆風に巻き込まれた。", name(cnt) + " was hurt by the blast.")
			dmghp cnt, -cdata(CDATA_CONDITION_SLEEP, cnt), -1
			cdata(CDATA_CONDITION_SLEEP, cnt) = 0
		loop
		tarudmg = 0
	}
	regen = 1
	if ( cdata(CDATA_CONDITION_SLEEP, r1) > 0 ) {
		healcon r1, CONDITION_SLEEP, 1
		if ( cdata(CDATA_CONDITION_SLEEP, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 14 + 100
		}
		healhp r1, 1, FALSE
		healmp r1, 1, FALSE
	}
	if ( cdata(CDATA_CONDITION_POISON, r1) > 0 ) {
		dmghp r1, rnd(2 + sdata(SKILL_ATTR_CON, r1) / 10), DAMAGE_FROM_POISON
		healcon r1, CONDITION_POISON, 1
		if ( cdata(CDATA_CONDITION_POISON, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 8 + 100
		}
		regen = 0
	}
	if ( cdata(CDATA_CONDITION_MPOISON, r1) > 0 ) {
		dmgmp r1, rnd(2 + sdata(SKILL_ATTR_MAG, r1) / 10)
		healcon r1, CONDITION_MPOISON, 1
		if ( cdata(CDATA_CONDITION_MPOISON, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 27 + 100
		}
		regen = 0
	}
	if ( cdata(CDATA_CONDITION_SUFFOCATION, r1) > 0 ) {
		if ( cdata(CDATA_CONDITION_SUFFOCATION, r1) \ 3 == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang("「うぐぐ…！」", cnvtalk("Ughh...!"))
			}
		}
		cdata(CDATA_CONDITION_SUFFOCATION, r1) -= rnd(3)
		if ( cdata(CDATA_CONDITION_SUFFOCATION, r1) <= 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "は気道を確保した。「げほっげほっ！」", name(cc) + " stopped choking.")
			}
			cdata(CDATA_CONDITION_SUFFOCATION, r1) = 0
		}
		else {
			dmghp r1, rnd(50 + sdata(SKILL_ATTR_CON, r1)) + 50, DAMAGE_FROM_SUFFOCATION
			regen = 0
		}
	}
	if ( cdata(CDATA_CONDITION_GRAVITY, r1) > 0 ) {
		cdata(CDATA_CONDITION_GRAVITY, r1)--
		if ( cdata(CDATA_CONDITION_GRAVITY, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "は重力から抜け出した。", name(r1) + " break" + _s(r1) + " away from gravity.")
			}
		}
	}
	if ( cdata(CDATA_CONDITION_ANGRY, r1) > 0 ) {
		cdata(CDATA_CONDITION_ANGRY, r1)--
		if ( cdata(CDATA_CONDITION_ANGRY, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "はやや落ち着いた。", name(r1) + " calm" + _s(r1) + " down.")
			}
		}
	}
	if ( cdata(CDATA_CONDITION_INVERT, r1) > 0 ) {
		cdata(CDATA_CONDITION_INVERT, r1)--
		if ( cdata(CDATA_CONDITION_INVERT, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "は体勢を立て直した。", name(r1) + " stand" + _s(r1) + " up.")
			}
		}
	}
	if ( cdata(CDATA_CONDITION_BIND, r1) > 0 ) {
		cdata(CDATA_CONDITION_BIND, r1)--
		dmgsp r1, 1
		if ( cdata(CDATA_CONDITION_BIND, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "は束縛から解放された。", name(cc) + " released from bind.")
			}
		}
	}
	if ( findbuff(r1, BUFF_DATA_SCAN) != (-1) ) {
		if ( r1 == 0 ) {
			dmgsp CHARA_PLAYER, 2
		}
		if ( r1 != 0 ) {
			dmgspt r1, 2
		}
	}
	if ( cdata(CDATA_CONDITION_SEPPUKU, r1) > 0 ) {
		cdata(CDATA_CONDITION_SEPPUKU, r1)--
	}
	if ( cdata(CDATA_CONDITION_BRAINWASH, r1) > 0 ) {
		cdata(CDATA_CONDITION_BRAINWASH, r1)--
		if ( cdata(CDATA_CONDITION_BRAINWASH, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "は正気に戻った。", name(cc) + " recovered from brainwash.")
			}
			cdata(CDATA_TARGET, r1) = 0
			cdata(CDATA_AI_AGGRO, r1) = 0
			if ( cc < MAX_CHARA_FOLLOWER ) {
				cdata(CDATA_RELATION, r1) = 10
			}
		}
	}
	if ( cdata(CDATA_CONDITION_ATROPHY, r1) > 0 ) {
		cdata(CDATA_CONDITION_ATROPHY, r1)--
		if ( cdata(CDATA_CONDITION_ATROPHY, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "は戦意を取り戻した。", name(r1) + " recovered from atrophy.")
			}
		}
	}
	if ( cdata(CDATA_CONDITION_METAL, r1) > 0 ) {
		cdata(CDATA_CONDITION_METAL, r1)--
		if ( cdata(CDATA_CONDITION_METAL, r1) == 0 ) {
			if ( synccheck(r1, -1) ) {
				txt lang(name(r1) + "の防御は緩んだ。", name(r1) + "'s protection vanishes.")
			}
		}
	}
	if ( cdata(CDATA_CONDITION_SICK, r1) > 0 ) {
		if ( rnd(80) == 0 ) {
			p = rnd(MAX_SKILL_ATTR - STARTING_SKILL_ATTR)
			if ( encfind(r1, ENCHANT_SUSTAIN * EXT_ENCHANTMENT + STARTING_SKILL_ATTR + p) == (-1) ) {
				cdata(STARTING_CDATA_ATTR + p, r1) -= sorg(STARTING_SKILL_ATTR + p, r1) / 25 + 1
				gosub *charaRefresh
			}
		}
		if ( rnd(5) ) {
			regen = 0
		}
		if ( r1 >= MAX_CHARA_FOLLOWER ) {
			if ( cdata(CDATA_QUALITY, r1) >= FIX_QUALITY_MIRACLE ) {
				if ( rnd(200) == 0 ) {
					healcon r1, CONDITION_SICK
				}
			}
		}
	}
	if ( cdata(CDATA_CONDITION_BLIND, r1) > 0 ) {
		healcon r1, CONDITION_BLIND, 1
		if ( cdata(CDATA_CONDITION_BLIND, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 10 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_PARALYZE, r1) > 0 ) {
		regen = 0
		healcon r1, CONDITION_PARALYZE, 1
		if ( cdata(CDATA_CONDITION_PARALYZE, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 15 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_PARALYZE, r1) < 0 ) {
		if ( rnd(2) == 0 ) {
			cdata(CDATA_CONDITION_PARALYZE, r1) = 0
		}
	}
	if ( cdata(CDATA_CONDITION_CONFUSE, r1) > 0 ) {
		healcon r1, CONDITION_CONFUSE, 1
		if ( cdata(CDATA_CONDITION_CONFUSE, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 11 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_FEAR, r1) > 0 ) {
		healcon r1, CONDITION_FEAR, 1
		if ( cdata(CDATA_CONDITION_FEAR, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 13 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_DIM, r1) > 0 ) {
		healcon r1, CONDITION_DIM, 1
		if ( cdata(CDATA_CONDITION_DIM, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 12 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_DRUNK, r1) > 0 ) {
		healcon r1, CONDITION_DRUNK, 1
		if ( cdata(CDATA_CONDITION_DRUNK, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 6 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_BLEED, r1) > 0 ) {
		if ( cdata(CDATA_CONDITION_BLEED, r1) > 10000 ) {
			cdata(CDATA_CONDITION_BLEED, r1) = 10000
		}
		if ( cdata(CDATA_HP, r1) != 0 ) {
			dmghp r1, rnd(limit(cdata(CDATA_HP, r1) / 10, 1, 20000) * (1 + cdata(CDATA_CONDITION_BLEED, r1) / 4) / 10 + 3) + 1, DAMAGE_FROM_BLEED
		}
		healcon r1, CONDITION_BLEED, 1 + cbit(CHARA_BIT_CURE_BLEEDING, r1) * 3
		if ( cdata(CDATA_CONDITION_BLEED, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 9 + 100
		}
		regen = 0
		spillblood cdata(CDATA_X, r1), cdata(CDATA_Y, r1)
	}
	if ( gdata(GDATA_FLAG_MAIN) >= 875 & gdata(GDATA_FLAG_MAIN) < 900 ) {
		if ( r1 == 0 ) {
			if ( cdata(CDATA_HP, CHARA_PLAYER) > 0 ) {
				dmghp CHARA_PLAYER, cdata(CDATA_HP, CHARA_PLAYER) / 5 + 1, DAMAGE_FROM_JALDABAOTH
			}
			else {
				dmghp CHARA_PLAYER, 1, DAMAGE_FROM_JALDABAOTH
			}
			txt lang("身体が少しずつ崩れていく…。", "Your body is gradually falling apart...")
			regen = 0
		}
	}
	if ( cdata(CDATA_CONDITION_WET, r1) > 0 ) {
		if ( chipm(CHIPM_ROLE, map(cdata(CDATA_X, r1), cdata(CDATA_Y, r1), MAP_TILE_ID)) == MAP_CHIP_ROLE_WATER ) {
			cdata(CDATA_CONDITION_WET, r1)++
		}
		cdata(CDATA_CONDITION_WET, r1)--
		refreshspeed r1
	}
	if ( cdata(CDATA_CONDITION_WINCE, r1) > 0 ) {
		healcon r1, CONDITION_WINCE, 1
		if ( cdata(CDATA_CONDITION_WINCE, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 28 + 100
		}
	}
	if ( cdata(CDATA_CONDITION_CHILLS, r1) > 0 ) {
		healcon r1, CONDITION_CHILLS, 1
		if ( cdata(CDATA_CONDITION_CHILLS, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 29 + 100
		}
	}
	if ( cdata(CDATA_GAUGE_COOLDOWN, r1) > 0 ) {
		cdata(CDATA_GAUGE_COOLDOWN, r1) = 0
	}
	if ( cdata(CDATA_GAUGE_COOLDOWN2, r1) > 0 ) {
		cdata(CDATA_GAUGE_COOLDOWN2, r1) = 0
	}
	if ( r1 == CHARA_PLAYER ) {
		if ( cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) != 0 ) {
			if ( cdata(CDATA_POWER_GAUGE, CHARA_PLAYER) < 30 ) {
				cdata(CDATA_EVOLUTION_STAGE, CHARA_PLAYER) = 0
			}
		}
	}
	if ( cdata(CDATA_PROT_PENALTY, r1) > 0 ) {
		cdata(CDATA_PROT_PENALTY, r1)--
	}
	if ( cdata(CDATA_PROT_PENALTY, r1) < 0 ) {
		cdata(CDATA_PROT_PENALTY, r1)++
	}
	if ( cdata(CDATA_EVASION_PENALTY, r1) > 0 ) {
		cdata(CDATA_EVASION_PENALTY, r1)--
	}
	if ( cdata(CDATA_EVASION_PENALTY, r1) < 0 ) {
		cdata(CDATA_EVASION_PENALTY, r1)++
	}
	if ( gdata(GDATA_FLAG_INVULNERABLE_TURNS) > 0 ) {
		if ( r1 == CHARA_PLAYER ) {
			gdata(GDATA_FLAG_INVULNERABLE_TURNS)--
		}
	}
	if ( r1 != CHARA_PLAYER ) {
		if ( cdata(CDATA_KARMA, r1) > 0 ) {
			cdata(CDATA_KARMA, r1)--
		}
	}
	if ( cdata(CDATA_CONDITION_OIL, r1) > 0 ) {
		healcon r1, CONDITION_OIL, 1
		if ( cdata(CDATA_CONDITION_OIL, r1) == 0 ) {
			r1 = r1
			gosub *charaRefresh
		}
	}
	if ( cdata(CDATA_DRUG_DEPENDENCE, r1) > 0 ) {
		if ( mdata(MDATA_TYPE) != MAP_TYPE_WORLD & rnd(50) == 0 ) {
			if ( findbuff(r1, BUFF_MELANCHOLY) == (-1) & cdata(CDATA_POWER_GAUGE, r1) < 100 & cdata(CDATA_CONDITION_DRUNK, r1) == 0 ) {
				addbuff r1, BUFF_MELANCHOLY, cdata(CDATA_DRUG_DEPENDENCE, r1) * 5000, 50
				if ( synccheck(r1, -1) ) {
					snd SOUNDLIST_FIZZLE
				}
				cdata(CDATA_DRUG_DEPENDENCE, r1)--
				cdata(CDATA_SANITY, r1)++
				if ( cdata(CDATA_DRUG_DEPENDENCE, r1) > 300 ) {
					cdata(CDATA_DRUG_DEPENDENCE, r1) = 300
				}
				if ( cdata(CDATA_ID, r1) == CREATURE_ID_WHOM_DWELL_IN_THE_VANITY ) {
					if ( cdata(CDATA_DRUG_DEPENDENCE, r1) < 100 ) {
						cdata(CDATA_DRUG_DEPENDENCE, r1) = 100
					}
				}
			}
		}
	}
	if ( cdata(CDATA_TOBACCO_DEPENDENCE, r1) > 0 ) {
		if ( mdata(MDATA_TYPE) != MAP_TYPE_WORLD & rnd(50) == 0 ) {
			if ( findbuff(r1, BUFF_DISTRACTED) == (-1) & findbuff(r1, BUFF_CONCENTRATION) == (-1) ) {
				addbuff r1, BUFF_DISTRACTED, cdata(CDATA_TOBACCO_DEPENDENCE, r1) * 5000, 20
				if ( synccheck(r1, -1) ) {
					snd SOUNDLIST_FIZZLE
				}
				cdata(CDATA_TOBACCO_DEPENDENCE, r1)--
				if ( cdata(CDATA_TOBACCO_DEPENDENCE, r1) > 200 ) {
					cdata(CDATA_TOBACCO_DEPENDENCE, r1) = 200
				}
			}
		}
	}
	cdata(CDATA_EXTRA_ATTACKS_TYPE, r1) = 0
	slinger = 0
	if ( cdata(CDATA_POWER_GAUGE, r1) > 0 ) {
		if ( findbuff(r1, BUFF_FORM_SHIFT_OMEGA) == (-1) ) {
			if ( cdata(CDATA_POWER_GAUGE, r1) < 100 ) {
				cdata(CDATA_POWER_GAUGE, r1)--
			}
			if ( cdata(CDATA_POWER_GAUGE, r1) > 100 & cdata(CDATA_POWER_GAUGE, r1) < 200 ) {
				cdata(CDATA_POWER_GAUGE, r1)--
			}
			if ( findbuff(r1, BUFF_MELANCHOLY) != (-1) ) {
				if ( cdata(CDATA_POWER_GAUGE, r1) > 0 ) {
					cdata(CDATA_POWER_GAUGE, r1)--
				}
			}
		}
	}
	if ( findbuff(r1, BUFF_FORM_SHIFT_OMEGA) != (-1) ) {
		cdata(CDATA_MP, r1) -= limit(cdata(CDATA_MAX_MP, r1) / 150, 1, 10000)
		cdata(CDATA_HP, r1) -= limit(cdata(CDATA_MAX_HP, r1) / 150, 1, 10000)
	}
	if ( cdata(CDATA_SHIFT_FORM, r1) > SHIFT_FORM_NONE ) {
		if ( findbuff(r1, BUFF_FORM_SHIFT_ALPHA) == (-1) & findbuff(r1, BUFF_FORM_SHIFT_BETA) == (-1) & findbuff(r1, BUFF_FORM_SHIFT_GAMMA) == (-1) & findbuff(r1, BUFF_FORM_SHIFT_DELTA) == (-1) & findbuff(r1, BUFF_FORM_SHIFT_OMEGA) == (-1) ) {
			txtef COLOR_SKY_BLUE
			txt lang(name(r1) + "は元の姿に戻った。", name(r1) + " returned to their original form.")

			hikae = cdatan(CDATAN_NAME, r1)
			cdatan(CDATAN_NAME, r1) = cdatan(CDATAN_FORM_SHIFT_NAME, r1)
			cdatan(CDATAN_FORM_SHIFT_NAME, r1) = hikae

			hikae = cdata(CDATA_PORTRAIT, r1)
			cdata(CDATA_PORTRAIT, r1) = cdata(CDATA_FORM_SHIFT_PORTRAIT, r1)
			cdata(CDATA_FORM_SHIFT_PORTRAIT, r1) = hikae

			hikae = cdata(CDATA_FACE, r1)
			cdata(CDATA_FACE, r1) = cdata(CDATA_FORM_SHIFT_FACE, r1)
			cdata(CDATA_FORM_SHIFT_FACE, r1) = hikae

			hikae = pcc(PCC_HAIR, r1)
			pcc(PCC_HAIR, r1) = cdata(CDATA_FORM_SHIFT_PCC_HAIR, cc)
			cdata(CDATA_FORM_SHIFT_PCC_HAIR, r1) = hikae

			hikae = pcc(PCC_SUB_HAIR, r1)
			pcc(PCC_SUB_HAIR, r1) = cdata(CDATA_FORM_SHIFT_PCC_SUB_HAIR, r1)
			cdata(CDATA_FORM_SHIFT_PCC_SUB_HAIR, r1) = hikae

			hikae = pcc(PCC_BODY, r1)
			pcc(PCC_BODY, r1) = cdata(CDATA_FORM_SHIFT_PCC_BODY, r1)
			cdata(CDATA_FORM_SHIFT_PCC_BODY, r1) = hikae

			hikae = pcc(PCC_CLOTH, r1)
			pcc(PCC_CLOTH, r1) = cdata(CDATA_FORM_SHIFT_PCC_CLOTH, r1)
			cdata(CDATA_FORM_SHIFT_PCC_CLOTH, r1) = hikae

			hikae = pcc(PCC_PANTS, r1)
			pcc(PCC_PANTS, r1) = cdata(CDATA_FORM_SHIFT_PCC_PANTS, r1)
			cdata(CDATA_FORM_SHIFT_PCC_PANTS, r1) = hikae

			hikae = pcc(PCC_ETC1, r1)
			pcc(PCC_ETC1, r1) = cdata(CDATA_FORM_SHIFT_PCC_ETC1, r1)
			cdata(CDATA_FORM_SHIFT_PCC_ETC1, r1) = hikae

			hikae = pcc(PCC_ETC2, r1)
			pcc(PCC_ETC2, r1) = cdata(CDATA_FORM_SHIFT_PCC_ETC2, r1)
			cdata(CDATA_FORM_SHIFT_PCC_ETC2, r1) = hikae

			hikae = pcc(PCC_ETC3, r1)
			pcc(PCC_ETC3, r1) = cdata(CDATA_FORM_SHIFT_PCC_ETC3, r1)
			cdata(CDATA_FORM_SHIFT_PCC_ETC3, r1) = hikae

			hikae = pcc(PCC_EYE, r1)
			pcc(PCC_EYE, r1) = cdata(CDATA_FORM_SHIFT_PCC_EYE, r1)
			cdata(CDATA_FORM_SHIFT_PCC_EYE, r1) = hikae

			hikae = pcc(PCC_RIDE, r1)
			pcc(PCC_RIDE, r1) = cdata(CDATA_FORM_SHIFT_PCC_RIDE, r1)
			cdata(CDATA_FORM_SHIFT_PCC_RIDE, r1) = hikae
			create_pcpic r1, 1

			hikae = cdata(CDATA_PIC, r1)
			cdata(CDATA_PIC, r1) = cdata(CDATA_FORM_SHIFT_PIC, r1)
			cdata(CDATA_FORM_SHIFT_PIC, r1) = hikae

			cdata(CDATA_SHIFT_FORM, r1) = SHIFT_FORM_NONE
		}
	}
	if ( cdata(CDATA_CONDITION_INSANE, r1) > 0 ) {
		if ( synccheck(r1, -1) ) {
			if ( rnd(3) == 0 ) {
				txtmore
				txtef COLOR_SKY_BLUE
				if ( jp ) {
					r2 = rnd(5)
					if ( r2 == 0 ) {
						txt name(r1) + "「キョキョキョ」", name(r1) + "「クワッ」", name(r1) + "「シャアァァ」", name(r1) + "「ばぶっふ！」", name(r1) + "「煮殺せ！」", name(r1) + "「許しなさい許しなさい！！」"
					}
					if ( r2 == 1 ) {
						txt name(r1) + "「フゥハハハー！」", name(r1) + "「あ、あ、あ、あ」", name(r1) + "「ぴ…ぴ…ぴか…」", name(r1) + "「お兄ちゃん！」", name(r1) + "「うみみやぁ」"
					}
					if ( r2 == 2 ) {
						txt name(r1) + "は突然踊りだした。", name(r1) + "は着ていたものを脱ぎだした。", name(r1) + "はぐるぐる回りだした。", name(r1) + "は奇声を発した。", name(r1) + "「ねうねう♪ねうねう♪」"
					}
					if ( r2 == 3 ) {
						txt name(r1) + "「ウージッムシ♪ウージッムシ♪」", name(r1) + "「じゃあ殺さなきゃ。うん♪」", name(r1) + "「このナメクジがっ」", name(r1) + "「おすわり！」", name(r1) + "「フーーーーン フーーーーン･･･ フーーーンフ」"
					}
					if ( r2 == 4 ) {
						txt name(r1) + "「このかたつむり野郎がっ」", name(r1) + "「うにゅみゅあ！」", name(r1) + "「ごめんなさいごめんなさい！」", name(r1) + "「もうすぐ生まれるよ♪」", name(r1) + "「フーーーーン フー…クワッ！」"
					}
				}
				else {
					r2 = rnd(2)
					if ( r2 == 0 ) {
						txt name(r1) + " start" + _s(r1) + " to take " + his(r1) + " clothes off.", name(r1) + " shout" + _s(r1) + ".", name(r1) + " dance" + _s(r1) + "."
					}
					if ( r2 == 1 ) {
						txt cnvtalk("Wheeeeeee!"), cnvtalk("Forgive me! Forgive me!"), cnvtalk("P-P-Pika!"), cnvtalk("Shhhhhh!"), cnvtalk("So I have to kill."), cnvtalk("You snail!")
					}
				}
			}
		}
		if ( rnd(5) == 0 ) {
			f = cdata(CDATA_CONDITION_CONFUSE, r1)
			cdata(CDATA_CONDITION_CONFUSE, r1) += rnd(10)
			if ( f <= 0 & cdata(CDATA_CONDITION_CONFUSE, r1) > 0 ) {
				DamagePopupAdd "" + _conconfuse, r1, DMGPOPUP_ADD_CONDITION, CONDITION_CONFUSE
			}
		}
		if ( rnd(5) == 0 ) {
			f = cdata(CDATA_CONDITION_DIM, r1)
			cdata(CDATA_CONDITION_DIM, r1) += rnd(10)
			if ( f <= 0 & cdata(CDATA_CONDITION_DIM, r1) > 0 ) {
				DamagePopupAdd "" + _condim, r1, DMGPOPUP_ADD_CONDITION, CONDITION_DIM
			}
		}
		if ( rnd(5) == 0 ) {
			f = cdata(CDATA_CONDITION_SLEEP, r1)
			cdata(CDATA_CONDITION_SLEEP, r1) += rnd(5)
			if ( f <= 0 & cdata(CDATA_CONDITION_SLEEP, r1) > 0 ) {
				DamagePopupAdd "" + _consleep, r1, DMGPOPUP_ADD_CONDITION, CONDITION_SLEEP
			}
		}
		if ( rnd(5) == 0 ) {
			f = cdata(CDATA_CONDITION_FEAR, r1)
			cdata(CDATA_CONDITION_FEAR, r1) += rnd(10)
			if ( f <= 0 & cdata(CDATA_CONDITION_FEAR, r1) > 0 ) {
				DamagePopupAdd "" + _confear, r1, DMGPOPUP_ADD_CONDITION, CONDITION_FEAR
			}
		}
		if ( cdata(CDATA_CONDITION_FEAR, r1) > 0 ) {
			if ( cdata(CDATA_THIRST, r1) > 12000 ) {
				if ( synccheck(r1, -1) ) {
					snd SOUNDLIST_WATERM
					txt lang(name(r1) + "は漏らした。", name(r1) + " wets " + himself(r1) + ".")
				}
				if ( mdata(MDATA_TYPE) != MAP_TYPE_WORLD ) {
					if ( cfg_dust_select == 0 ) {
						flt
						itemcreate -1, ITEM_ID_URINE, cdata(CDATA_X, r1), cdata(CDATA_Y, r1), 0
						if ( stat != 0 ) {
							if ( r1 != 0 ) {
								inv(INV_ITEM_SUB_NAME, ci) = cdata(CDATA_ID, r1)
								item_stack -1, ci
							}
						}
					}
				}
				cdata(CDATA_THIRST, r1) = 5000
			}
		}
		healcon r1, CONDITION_INSANE, 1
		if ( cdata(CDATA_CONDITION_INSANE, r1) > 0 ) {
			cdata(CDATA_EMO_ICON, r1) = 24 + 100
		}
	}
	if ( r1 == CHARA_PLAYER ) {
		if ( cdata(CDATA_HUNGER, r1) < 2000 ) {
			if ( gdata(GDATA_FLAG_GAME_MODE) != GAMEMODE_PURGE ) {
				if ( cdata(CDATA_HUNGER, r1) < 1000 ) {
					if ( cdata(CDATA_ROW_ACT, r1) != ACTION_EAT & cdata(CDATA_ROW_ACT, r1) != ACTION_MEAL ) {
						dmghp r1, rnd(2) + cdata(CDATA_MAX_HP, CHARA_PLAYER) / 50 + 1, DAMAGE_FROM_HUNGER
						snd SOUNDLIST_FIZZLE
						if ( gdata(GDATA_TURN) \ 10 == 0 ) {
							rowact_check r1
							if ( rnd(50) == 0 ) {
								modweight r1, -1
							}
						}
					}
				}
				regen = 0
 			}
		}

		if ( TweakData(TWEAK_GAMEPLAY_CG_DISABLE_THIRST, TWEAK_CATEGORY_GAMEPLAY) == FALSE ) {
			if ( cdata(CDATA_THIRST, r1) < 2000 ) {
				if ( cdata(CDATA_CONDITION_WET, r1) <= 0 ) {
					if ( gdata(GDATA_FLAG_GAME_MODE) != 5 ) {
						if ( cdata(CDATA_THIRST, r1) < 1000 ) {
							if ( cdata(CDATA_SP, r1) > (-100) ) {
								if ( tc == CHARA_PLAYER ) {
									dmgsp CHARA_PLAYER, rnd(10) + 10
								}
								if ( tc != CHARA_PLAYER ) {
									dmgspt tc, rnd(10) + 10
								}
							}
						}
						regen = 0
					}
				}
			}
		}

		if ( gdata(GDATA_SLEEP) >= 30 ) {
			if ( gdata(GDATA_TURN) \ 100 == 0 ) {
				txt lang("あなたは眠りを必要としている。", "You need to sleep.")
			}
			if ( rnd(2) ) {
				regen = 0
			}
			if ( gdata(GDATA_SLEEP) >= 50 ) {
				if ( cdata(CDATA_SP, r1) > (-100) ) {
					regen = 0
					dmgsp r1, 1
				}
			}
		}
	}
	else {
		if ( cdata(CDATA_QUEST_NPC, r1) != 0 ) {
			p = cdata(CDATA_QUEST_NPC, r1) - 1
			if ( qdata(QDATA_QUEST_TARGET, p) > 0 ) {
				cdata(CDATA_EMO_ICON, r1) = 22 + 100
			}
			if ( qdata(QDATA_STATUS, p) != QUEST_STATE_NONE ) {
				if ( cdata(CDATA_TURN, r1) \ 2 == 1 ) {
					cdata(CDATA_EMO_ICON, r1) = 23 + 100
				}
			}
		}
	}
	if ( gdata(GDATA_QUEST) == QUEST_TYPE_PARTY ) {
		if ( r1 >= MAX_CHARA_SAVE ) {
			if ( cdata(CDATA_IMPRESSION, r1) >= 53 ) {
				cdata(CDATA_EMO_ICON, r1) = 25 + 100 + 100
			}
		}
	}
	if ( regen == 1 ) {
		if ( findbuff(r1, BUFF_ELEMENT_SCAR) == (-1) ) {
			iyasi = rnd(sdata(SKILL_NORMAL_HEALING, r1) / 3 + 1) + 1
			if ( cdata(CDATA_ID, r1) == CREATURE_ID_MESHERA_PLANT | cdata(CDATA_ID, r1) == CREATURE_ID_MESHERA_BETA | cdata(CDATA_ID, r1) == CREATURE_ID_MESHERA_GAMMA | cdata(CDATA_ID, r1) == CREATURE_ID_MESHERA_DELTA | cdata(CDATA_ID, r1) == CREATURE_ID_MESHERA_ALPHA_THE_DEFORMED_ANGEL | cdata(CDATA_ID, r1) == CREATURE_ID_REGULUS_THE_ALTERED | cdata(CDATA_ID, r1) == CREATURE_ID_TESTER | cdata(CDATA_ID, r1) == CREATURE_ID_RENAI_THE_OVER_MESHERA ) {
				if ( gdata(GDATA_WEATHER) == WEATHER_ETHER & mdata(MDATA_FIELD) == 2 | gdata(GDATA_AREA) == AREA_ANCIENT_GARDEN | gdata(GDATA_AREA) == AREA_MOUNTAIN_PASS_WINDY ) {
					iyasi = 0
					if ( cdata(CDATA_HP, r1) > 0 ) {
						cdata(CDATA_HP, r1) -= rnd(sdata(SKILL_ATTR_CON, r1) / 5 + 1) + 1
					}
				}
			}
			if ( rnd(6) == 0 | findbuff(r1, BUFF_REGENERATION) != (-1) ) {
				healhp r1, iyasi, FALSE
			}
			if ( rnd(6) == 0 & cdata(CDATA_HUNGER, r1) >= 10000 ) {
				healhp r1, iyasi, FALSE
			}
			if ( rnd(5) == 0 ) {
				healmp r1, rnd(sdata(SKILL_NORMAL_MEDITATION, r1) / 2 + 1) + 1, FALSE
			}
			if ( rnd(1000) == 0 ) {
				if ( cdata(CDATA_QUALITY, r1) >= FIX_QUALITY_MIRACLE ) {
					cure_anorexia r1
					cdata(CDATA_VOMIT, r1) = 0
					cdata(CDATA_CONDITION_DRUNK, r1) = 0
				}
			}
		}
	}
	if ( r1 == CHARA_PLAYER ) {
		if ( cdata(CDATA_GOD, CHARA_PLAYER) == GOD_KUMIROMI ) {
			if ( cdata(CDATA_TURN, CHARA_PLAYER) \ 2 == 0 ) {
				if ( cdata(CDATA_ROW_ACT, CHARA_PLAYER) == ACTION_NONE ) {
					healsp CHARA_PLAYER, 1, FALSE
				}
			}
		}
	}
	return

*calcBurdenPc
	if ( findbuff(CHARA_PLAYER, BUFF_GRAVITY_ACCEL) != (-1) ) {
		cdata(CDATA_INV_WEIGHT, CHARA_PLAYER) = limit(inv_weight(0), 0, 20000000) * (10 + trait(TRAIT_ETHER_EQUIP_BACK) * 2) / 10
	}
	else {
		cdata(CDATA_INV_WEIGHT, CHARA_PLAYER) = limit(inv_weight(0), 0, 20000000) * (10 - trait(TRAIT_ETHER_WEIGHT) + trait(TRAIT_ETHER_EQUIP_BACK) * 2) / 10
	}
	cdata(CDATA_CARRY_LIMIT, CHARA_PLAYER) = sdata(SKILL_ATTR_STR, CHARA_PLAYER) * 500 + sdata(SKILL_ATTR_CON, CHARA_PLAYER) * 250 + sdata(SKILL_NORMAL_WEIGHT_LIFTING, CHARA_PLAYER) * 2000 + 45000
	repeat 1
		if ( cdata(CDATA_INV_WEIGHT, CHARA_PLAYER) > cdata(CDATA_CARRY_LIMIT, CHARA_PLAYER) * 2 ) {
			cdata(CDATA_BURDEN, CHARA_PLAYER) = 4
			break
		}
		if ( cdata(CDATA_INV_WEIGHT, CHARA_PLAYER) > cdata(CDATA_CARRY_LIMIT, CHARA_PLAYER) ) {
			cdata(CDATA_BURDEN, CHARA_PLAYER) = 3
			break
		}
		if ( cdata(CDATA_INV_WEIGHT, CHARA_PLAYER) > cdata(CDATA_CARRY_LIMIT, CHARA_PLAYER) / 4 * 3 ) {
			cdata(CDATA_BURDEN, CHARA_PLAYER) = 2
			break
		}
		if ( cdata(CDATA_INV_WEIGHT, CHARA_PLAYER) > cdata(CDATA_CARRY_LIMIT, CHARA_PLAYER) / 2 ) {
			cdata(CDATA_BURDEN, CHARA_PLAYER) = 1
			break
		}
		cdata(CDATA_BURDEN, CHARA_PLAYER) = 0
	loop
	refreshspeed 0
	return

#defcfunc calcscore
	p = limit(cdata(CDATA_LEVEL, CHARA_PLAYER), 1, 2000) * limit(cdata(CDATA_LEVEL, CHARA_PLAYER), 1, 2000) + limit(gdata(GDATA_DEEPEST), 1, 2000) * limit(gdata(GDATA_DEEPEST), 1, 2000) + limit(gdata(GDATA_KILLED), 0, 20000000)
	if ( gdata(GDATA_DEATH) > 1 ) {
		p = p / 10 + 1
	}
	if ( gdata(GDATA_WIZARD) ) {
		p = 0
	}
	if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_OVERDOSE | gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_PURGE ) {
		p = 0
	}
	if ( gdata(GDATA_FLAG_GAME_MODE) == GAMEMODE_ABNORMAL ) {
		p = p * 20
	}
	return p

#deffunc calcpartyscore
	ptp = 0
	repeat MAX_CHARA_TOTAL - MAX_CHARA_SAVE, MAX_CHARA_SAVE
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
			continue
		}
		if ( cdata(CDATA_IMPRESSION, cnt) >= 53 ) {
			if ( cbit(CHARA_BIT_SPLIT_KEEP_EFFECT, cnt) == 1 | cbit(CHARA_BIT_SPLIT_NO_EFFECT, cnt) == 1 | cbit(CHARA_BIT_SUMMONED, cnt) == 1 ) {
				ptp += limit((cdata(CDATA_LEVEL, cnt) + 1) / 5 + 1, 1, 20)
			}
			else {
				ptp += cdata(CDATA_LEVEL, cnt) + 5
			}
		}
		if ( cdata(CDATA_IMPRESSION, cnt) < 50 ) {
			ptp -= 20
		}
	loop
	if ( ptp > qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) ) {
		txtef COLOR_BLUE
		txt "(+" + (ptp - qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF))) + ") "
	}
	if ( ptp < qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) ) {
		txtef COLOR_RED
		txt "(" + (ptp - qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF))) + ") "
	}
	qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) = ptp
	return

#deffunc calcpartyscore2
	ptp = 0
	repeat MAX_CHARA_TOTAL - MAX_CHARA_SAVE, MAX_CHARA_SAVE
		if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cbit(CHARA_BIT_NECRO, cnt) == 1 ) {
			continue
		}
		if ( cdata(CDATA_IMPRESSION, cnt) >= 53 ) {
			if ( cdata(CDATA_QUALITY, cnt) >= FIX_QUALITY_MIRACLE ) {
				ptp += 20 + cdata(CDATA_LEVEL, cnt) / 3
				txt lang(cdatan(CDATAN_NAME, cnt) + "は満足した。", cdatan(CDATAN_NAME, cnt) + " " + is(cnt) + " satisfied.")
			}
		}
	loop
	if ( ptp != 0 ) {
		txt lang("(合計ボーナス:" + ptp + "%) ", "(Total Bonus:" + ptp + "%)")
	}
	qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) = qdata(QDATA_PARAM2, gdata(GDATA_QUEST_REF)) * (100 + ptp) / 100
	return

