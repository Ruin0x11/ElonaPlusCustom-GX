*bRefDefine
	dim bdataref, 7, MAX_BUFF
	sdim buffname, 20, MAX_BUFF
	sdim bufftxt, 30, 2, MAX_BUFF
	sdim buffdesc, 200
	bdataref(0, BUFF_HOLY_SHIELD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HOLY_SHIELD) = lang("聖なる盾", "Holy Shield")
	bufftxt(0, BUFF_HOLY_SHIELD) = lang("は光り輝いた。", " begin"), " to shine."

	bdataref(0, BUFF_MIST_OF_SILENCE) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MIST_OF_SILENCE) = lang("沈黙の霧", "Mist of Silence")
	bufftxt(0, BUFF_MIST_OF_SILENCE) = lang("はぼやけた霧に覆われた。", " get"), " surrounded by a hazy mist."

	bdataref(0, BUFF_REGENERATION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_REGENERATION) = lang("リジェネレーション", "Regeneration")
	bufftxt(0, BUFF_REGENERATION) = lang("の代謝が活性化した。", " start"), " to regenerate."

	bdataref(0, BUFF_ATTRIBUTE_SHIELD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ATTRIBUTE_SHIELD) = lang("属性保護", "Attribute Shield")
	bufftxt(0, BUFF_ATTRIBUTE_SHIELD) = lang("は属性への耐性を得た。", " gain"), " resistance to attributes."

	bdataref(0, BUFF_MOGRANIC_AURA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_MOGRANIC_AURA) = lang("土竜闘気", "Mogranic Aura")
	bufftxt(0, BUFF_MOGRANIC_AURA) = lang("は闘気を纏った。", " wore"), " an anti-magic aura."

	bdataref(0, BUFF_SPEED) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SPEED) = lang("加速", "Speed")
	bufftxt(0, BUFF_SPEED) = lang("は機敏になった。", " speed"), " up."

	bdataref(0, BUFF_SLOW) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_SLOW) = lang("鈍足", "Slow")
	bufftxt(0, BUFF_SLOW) = lang("は鈍重になった。", " slow"), " down."

	bdataref(0, BUFF_HERO) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HERO) = lang("英雄", "Hero")
	bufftxt(0, BUFF_HERO) = lang("の士気が向上した。", " feel"), " heroic."

	bdataref(0, BUFF_MIST_OF_FRAILNESS) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MIST_OF_FRAILNESS) = lang("脆弱の霧", "Mist of Frailness")
	bufftxt(0, BUFF_MIST_OF_FRAILNESS) = lang("は脆くなった。", " feel"), " weak."

	bdataref(0, BUFF_ELEMENT_SCAR) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_ELEMENT_SCAR) = lang("元素の傷跡", "Element Scar")
	bufftxt(0, BUFF_ELEMENT_SCAR) = lang("は元素への耐性を失った。", " lose"), " resistance to elements."

	bdataref(0, BUFF_HOLY_VEIL) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HOLY_VEIL) = lang("ホーリーヴェイル", "Holy Veil")
	bufftxt(0, BUFF_HOLY_VEIL) = lang("は聖なる衣に保護された。", " receive"), " holy protection."

	bdataref(0, BUFF_NIGHTMARE) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_NIGHTMARE) = lang("ナイトメア", "Nightmare")
	bufftxt(0, BUFF_NIGHTMARE) = lang("は悪夢に襲われた。", " start"), " to suffer."

	bdataref(0, BUFF_DIVINE_WISDOM) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DIVINE_WISDOM) = lang("知者の加護", "Divine Wisdom")
	bufftxt(0, BUFF_DIVINE_WISDOM) = lang("の思考は冴え渡った。", " start"), " to think clearly."

	bdataref(0, BUFF_PUNISHMENT) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_PUNISHMENT) = lang("天罰", "Punishment")
	bufftxt(0, BUFF_PUNISHMENT) = lang("は雷に打たれた！", " incur"), " the wrath of the gods."

	bdataref(0, BUFF_LULWYS_TRICK) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_LULWYS_TRICK) = lang("ルルウィの憑依", "Lulwy's Trick")
	bufftxt(0, BUFF_LULWYS_TRICK) = lang("にルルウィが乗り移った。", " repeat"), " the name of Lulwy."

	bdataref(0, BUFF_INCOGNITO) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_INCOGNITO) = lang("インコグニート", "Incognito")
	bufftxt(0, BUFF_INCOGNITO) = lang("は別人になりすました。", " start"), " to disguise."

	bdataref(0, BUFF_DEATH_WORD) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_DEATH_WORD) = lang("死の宣告", "Death Word")
	bufftxt(0, BUFF_DEATH_WORD) = lang("は死の宣告を受けた！", " receive"), " a death sentence."

	bdataref(0, BUFF_BOOST) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_BOOST) = lang("ブースト", "Boost")
	bufftxt(0, BUFF_BOOST) = lang("はブーストした！", " gain"), " massive power."

	bdataref(0, BUFF_CONTINGENCY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CONTINGENCY) = lang("契約", "Contingency")
	bufftxt(0, BUFF_CONTINGENCY) = lang("は死神と契約した。", " sign"), " a contract with the Reaper."

	bdataref(0, BUFF_LUCK) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_LUCK) = lang("幸運", "Luck")
	bufftxt(0, BUFF_LUCK) = lang("に幸運な日が訪れた！", " feel"), " very lucky today!"

	bdataref(0, BUFF_LIFE_TASTING) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_LIFE_TASTING) = lang("人生の含味", "Life Tasting")
	bufftxt(0, BUFF_LIFE_TASTING) = lang("はスキルの成長期に突入した。", " enter"), " a period of rapid skill growth."

	bdataref(0, BUFF_GROW_STRENGTH) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_STRENGTH) = lang("筋力の成長", "Grow Strength")
	bufftxt(0, BUFF_GROW_STRENGTH) = lang("は筋力の成長期に突入した。", " enter"), " a period of rapid STR growth."

	bdataref(0, BUFF_GROW_CONSTITUTION) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_CONSTITUTION) = lang("耐久の成長", "Grow Constitution")
	bufftxt(0, BUFF_GROW_CONSTITUTION) = lang("は耐久の成長期に突入した。", " enter"), " a period of rapid CON growth."

	bdataref(0, BUFF_GROW_DEXTERITY) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_DEXTERITY) = lang("器用の成長", "Grow Dexterity")
	bufftxt(0, BUFF_GROW_DEXTERITY) = lang("は器用の成長期に突入した。", " enter"), " a period of rapid DEX growth."

	bdataref(0, BUFF_GROW_PERCEPTION) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_PERCEPTION) = lang("感覚の成長", "Grow Perception")
	bufftxt(0, BUFF_GROW_PERCEPTION) = lang("は感覚の成長期に突入した。", " enter"), " a period of rapid PER growth."

	bdataref(0, BUFF_GROW_LEARNING) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_LEARNING) = lang("習得の成長", "Grow Learning")
	bufftxt(0, BUFF_GROW_LEARNING) = lang("は習得の成長期に突入した。", " enter"), " a period of rapid LER growth."

	bdataref(0, BUFF_GROW_WILL) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_WILL) = lang("意志の成長", "Grow Will")
	bufftxt(0, BUFF_GROW_WILL) = lang("は意志の成長期に突入した。", " enter"), " a period of rapid WIL growth."

	bdataref(0, BUFF_GROW_MAGIC) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_MAGIC) = lang("魔力の成長", "Grow Magic")
	bufftxt(0, BUFF_GROW_MAGIC) = lang("は魔力の成長期に突入した。", " enter"), " a period of rapid MAG growth."

	bdataref(0, BUFF_GROW_CHARISMA) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_CHARISMA) = lang("魅力の成長", "Grow Charisma")
	bufftxt(0, BUFF_GROW_CHARISMA) = lang("は魅力の成長期に突入した。", " enter"), " a period of rapid CHR growth."

	bdataref(0, BUFF_GROW_SPEED) = BUFF_TYPE_FOOD, 1, 0
	buffname(BUFF_GROW_SPEED) = lang("速度の成長", "Grow Speed")
	bufftxt(0, BUFF_GROW_SPEED) = lang("は速度の成長期に突入した。", " enter"), " a period of rapid SPD growth."

	bdataref(0, BUFF_CLEAR_MIND) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CLEAR_MIND) = lang("明鏡止水", "Clear Mind")
	bufftxt(0, BUFF_CLEAR_MIND) = lang("は己の心を研ぎ澄ました…。", " sharpen"), " the mind..."

	bdataref(0, BUFF_SUPER_REGEN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SUPER_REGEN) = lang("超再生", "Super Regen")
	bufftxt(0, BUFF_SUPER_REGEN) = lang("の体は超再生を始めた。", "'s body regenerate"), " quickly."

	bdataref(0, BUFF_FEATHER) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FEATHER) = lang("フェザー", "Feather")
	bufftxt(0, BUFF_FEATHER) = lang("の体が羽のように軽くなった。", "'s body become"), " as light as a feather."

	bdataref(0, BUFF_CHARGE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CHARGE) = lang("チャージ", "Charge")
	bufftxt(0, BUFF_CHARGE) = lang("の力が最大限に達した。", " attain"), " full power."

	bdataref(0, BUFF_EMERGENCY_EVASION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_EMERGENCY_EVASION) = lang("緊急回避", "Emergency Evasion")
	bufftxt(0, BUFF_EMERGENCY_EVASION) = lang("は装備の力を引き出した。", " bring"), " out the power of the armor."

	bdataref(0, BUFF_MAGIC_EQUIP) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_MAGIC_EQUIP) = lang("魔装", "Magic Equip")
	bufftxt(0, BUFF_MAGIC_EQUIP) = lang("は装備の力を引き出した。", " bring"), " out the power of the armor."

	bdataref(0, BUFF_SUPER_ARMOR) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SUPER_ARMOR) = lang("超重装", "Super Armor")
	bufftxt(0, BUFF_SUPER_ARMOR) = lang("は装備の力を引き出した。", " bring"), " out the power of the armor."

	bdataref(0, BUFF_ATTRIBUTE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ATTRIBUTE) = lang("アトリビウト", "Attribute")
	bufftxt(0, BUFF_ATTRIBUTE) = lang("は己の属性を纏った。", " wield"), " their own attributes."

	bdataref(0, BUFF_AUTO_GUARD) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_AUTO_GUARD) = lang("絶対防衛", "Auto Guard")
	bufftxt(0, BUFF_AUTO_GUARD) = lang("は仲間を庇う体勢に入った。", " take"), " a posture to better protect allies."

	bdataref(0, BUFF_POWER_ITEM) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_POWER_ITEM) = lang("パワーアイテム", "Power Item")
	bufftxt(0, BUFF_POWER_ITEM) = lang("はアイテムの力を引き出した。", " bring out"), " the power of Items."

	bdataref(0, BUFF_UNLUCKY) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_UNLUCKY) = lang("不幸", "Unlucky")
	bufftxt(0, BUFF_UNLUCKY) = lang("に不幸な日が訪れた！", " feel"), " very unlucky today..."

	bdataref(0, BUFF_RUN_WILDLY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RUN_WILDLY) = lang("暴走", "Run Wildly")
	bufftxt(0, BUFF_RUN_WILDLY) = lang("は暴走を始めた。", " begin"), " to run wildly."

	bdataref(0, BUFF_RETENTION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RETENTION) = lang("空間掌握", "Retention")
	bufftxt(0, BUFF_RETENTION) = lang("は周囲の空間を掌握した。", " stabilize"), " the space around."

	bdataref(0, BUFF_TAG_FORCE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_TAG_FORCE) = lang("タッグフォース", "Tag Force")
	bufftxt(0, BUFF_TAG_FORCE) = lang("は結束した。", " shine"), " with the tag partner."

	bdataref(0, BUFF_CONCENTRATION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_CONCENTRATION) = lang("集中", "Concentration")
	bufftxt(0, BUFF_CONCENTRATION) = lang("の集中力が向上した。", " feel"), " concentrated."

	bdataref(0, BUFF_FORM_SHIFT_ALPHA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_ALPHA) = lang("フォルムシフト", "Form Shift (A)")
	bufftxt(0, BUFF_FORM_SHIFT_ALPHA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_BETA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_BETA) = lang("フォルムシフト", "Form Shift (B)")
	bufftxt(0, BUFF_FORM_SHIFT_BETA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_GAMMA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_GAMMA) = lang("フォルムシフト", "Form Shift (G)")
	bufftxt(0, BUFF_FORM_SHIFT_GAMMA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_DELTA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_DELTA) = lang("フォルムシフト", "Form Shift (D)")
	bufftxt(0, BUFF_FORM_SHIFT_DELTA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_FORM_SHIFT_OMEGA) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_FORM_SHIFT_OMEGA) = lang("ファイナルシフト", "Final Form Shift")
	bufftxt(0, BUFF_FORM_SHIFT_OMEGA) = lang("に変化した。", " change"), " form."

	bdataref(0, BUFF_RESOLUTION_HAND) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_RESOLUTION_HAND) = lang("錬成掌", "Resolution Hand")
	bufftxt(0, BUFF_RESOLUTION_HAND) = lang("の手が光りだした。", "'s hand"), " shine."

	bdataref(0, BUFF_ABYSS_IN_THE_EYE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_ABYSS_IN_THE_EYE) = lang("瞳の奥の深淵", "Abyss in the eye")
	bufftxt(0, BUFF_ABYSS_IN_THE_EYE) = lang("の眼に深みが増した。", " represent"), " the abyss in own eye."

	bdataref(0, BUFF_SHIELD_PARRY) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SHIELD_PARRY) = lang("シールドパリィ", "Shield Parry")
	bufftxt(0, BUFF_SHIELD_PARRY) = lang("は盾の力を引き出した。", " bring"), " out the power of the shield."

	bdataref(0, BUFF_JYUSOU_GOUSHIN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_JYUSOU_GOUSHIN) = lang("呪装豪身", "Jyusou Goushin")
	bufftxt(0, BUFF_JYUSOU_GOUSHIN) = lang("は呪いの力を引き出した。", " bring out"), " the power of curse."

	bdataref(0, BUFF_HARMONIC_ASSAULT) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HARMONIC_ASSAULT) = lang("ハーモニックアサルト", "Harmonic Assault")
	bufftxt(0, BUFF_HARMONIC_ASSAULT) = lang("は言葉の力を引き出した。", " bring out"), " the power of voice."

	bdataref(0, BUFF_GRAVITY_ACCEL) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_GRAVITY_ACCEL) = lang("重力偏向", "Gravity Accel")
	bufftxt(0, BUFF_GRAVITY_ACCEL) = lang("の重力の向きが変わった。", " accelerate"), " through gravity."

	bdataref(0, BUFF_HYPER_DASH) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_HYPER_DASH) = lang("烈走破", "Hyper Dash")
	bufftxt(0, BUFF_HYPER_DASH) = lang("は脚に力を込めた。", " put"), " power on the legs."

	bdataref(0, BUFF_BLACK_MIRROR) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_BLACK_MIRROR) = lang("黒曜鏡", "Black Mirror")
	bufftxt(0, BUFF_BLACK_MIRROR) = lang("はあなたの力を写し取った。", " copy"), " your power."

	bdataref(0, BUFF_GEM_POWER) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_GEM_POWER) = lang("守護石", "Gem Power")
	bufftxt(0, BUFF_GEM_POWER) = lang("は宝石の輝きを纏った。", " wear"), " the glow of gem."

	bdataref(0, BUFF_DISTRACTED) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_DISTRACTED) = lang("散漫", "Distracted")
	bufftxt(0, BUFF_DISTRACTED) = lang("は気が散り始めた。", " feel"), " distracted."

	bdataref(0, BUFF_MELANCHOLY) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_MELANCHOLY) = lang("鬱", "Melancholy")
	bufftxt(0, BUFF_MELANCHOLY) = lang("は鬱になった。", " became"), " melancholic."

	bdataref(0, BUFF_KILLING_DANCE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_KILLING_DANCE) = lang("死神の舞踏", "Killing Dance")
	bufftxt(0, BUFF_KILLING_DANCE) = lang("は戦闘動作を最適化した。", " optimize"), " the killing pattern."

	bdataref(0, BUFF_SHOOTING_MODE) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_SHOOTING_MODE) = lang("シューティングモード", "Shooting Mode")
	bufftxt(0, BUFF_SHOOTING_MODE) = lang("は姿勢を固定した。", " shift"), " to shooting mode."

	bdataref(0, BUFF_OVERLIMIT_THROW) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_OVERLIMIT_THROW) = lang("一投入魂", "OverLimit-Throw")
	bufftxt(0, BUFF_OVERLIMIT_THROW) = lang("は投擲に魂を込めた。", " pour"), " mana into throwing."

	bdataref(0, BUFF_DATA_SCAN) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DATA_SCAN) = lang("データスキャン", "Data scan")
	bufftxt(0, BUFF_DATA_SCAN) = lang("はスキャンモードに移行した。", " shift"), " to the scanning mode."

	bdataref(0, BUFF_DISINFECTION) = BUFF_TYPE_BUFF, 1, 0
	buffname(BUFF_DISINFECTION) = lang("ディスインフェクション", "Disinfection")
	bufftxt(0, BUFF_DISINFECTION) = lang("は汚染から守られた。", " receive"), " pollution protection."
	
	bdataref(0, BUFF_CURSE_OF_HUNGER) = BUFF_TYPE_HEX, 1, 0
	buffname(BUFF_CURSE_OF_HUNGER) = lang("脆弱の霧", "Curse of Hunger")
	bufftxt(0, BUFF_CURSE_OF_HUNGER) = lang("は脆くなった。", " feel"), " hungry."

	return

#deffunc calcbuff int calcbuff_charid, int calcbuff_buffid, int calcbuff_power
	if ( calcbuff_buffid >= BUFF_GROW_STRENGTH & calcbuff_buffid <= BUFF_GROW_SPEED ) {
		dur = 10 + calcbuff_power / 10
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang(skillname(calcbuff_buffid - BUFF_GROW_STRENGTH + SKILL_ATTR_STR) + "の成長率を" + locvar_calcbuff_p + "%上昇", "Increases " + skillname(calcbuff_buffid - BUFF_GROW_STRENGTH + SKILL_ATTR_STR) + " growth rate by " + locvar_calcbuff_p + "%")
				return
			}
		}
		cdata(STARTING_CDATA_FOOD_EXP + (calcbuff_buffid - BUFF_GROW_STRENGTH + SKILL_ATTR_STR) - RANGE_CDATA_FOOD_EXP, calcbuff_charid) = locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_LIFE_TASTING ) {
		dur = 10 + calcbuff_power / 10
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("全スキルの成長率を" + locvar_calcbuff_p + "%上昇", "Increases rate of skill growth by " + locvar_calcbuff_p + "%")
				return
			}
		}
		cdata(270 + 19 - 10, calcbuff_charid) = locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_HOLY_SHIELD ) {
		dur = 20 + calcbuff_power / 15
		locvar_calcbuff_p = limit(25 + calcbuff_power / 8, 1, 1000)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("PVを10%と" + locvar_calcbuff_p + "上昇/盾20%上昇/耐恐怖", "PV +10% and +" + locvar_calcbuff_p + "/Shield +20%/RES+ fear")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) >= 10 ) {
			cdata(CDATA_PV, calcbuff_charid) += cdata(CDATA_PV, calcbuff_charid) / 10
		}
		cdata(CDATA_PV, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		sdata(SKILL_NORMAL_SHIELD, calcbuff_charid) = sdata(SKILL_NORMAL_SHIELD, calcbuff_charid) * 12 / 10
		return
	}
	if ( calcbuff_buffid == BUFF_MIST_OF_SILENCE ) {
		dur = 5 + calcbuff_power / 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("魔法の使用を禁止", "Inhibits casting")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_REGENERATION ) {
		dur = limit(10 + calcbuff_power / 10, 11, 200)
		locvar_calcbuff_p = 30 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("体力、スタミナの回復強化/震え耐性", "Enhances regeneration/RES+ chills")
				return
			}
		}
		sdata(SKILL_NORMAL_HEALING, calcbuff_charid) += locvar_calcbuff_p / 2
		return
	}
	if ( calcbuff_buffid == BUFF_SUPER_REGEN ) {
		dur = 5
		locvar_calcbuff_p = 2000
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("体力の超回復", "Enhances regeneration hard")
				return
			}
		}
		sdata(SKILL_NORMAL_HEALING, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_ATTRIBUTE_SHIELD ) {
		dur = 10 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("火冷雷闇幻毒獄音神混耐性の獲得", "RES+ fire,cold,lightning,mind,nerve,nether,poison,sound,chaos,darkness")
				return
			}
		}
		sdata(SKILL_RES_FIRE, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_COLD, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_LIGHTNING, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_NERVE, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_MIND, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_NETHER, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_POISON, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_SOUND, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_CHAOS, calcbuff_charid) += 80 + calcbuff_power / 20
		sdata(SKILL_RES_DARKNESS, calcbuff_charid) += 80 + calcbuff_power / 20
		return
	}
	if ( calcbuff_buffid == BUFF_MOGRANIC_AURA ) {
		dur = 10 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("魔法耐性の獲得", "RES+ magic")
				return
			}
		}
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 100 + calcbuff_power
		return
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_ALPHA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("筋力・感覚の上昇/魔法反射", "Increases STR & PER/Magic Reflection")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 12 / 10 + 5
		cdata(CDATA_REFLECT_MAGIC, calcbuff_charid) += 40
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_ALPHA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_BETA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("器用・魔力・魔法耐性の上昇", "Increases DEX & MAG/RES+ magic")
				return
			}
		}
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = sdata(SKILL_ATTR_DEX, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 120
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_BETA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_GAMMA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("速度・DVの上昇/部位減速無視", "Increases Speed & DV/Immunity to Speed reduction")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) = sdata(SKILL_ATTR_SPD, calcbuff_charid) * 12 / 10 + 50
		if ( cdata(CDATA_DV, calcbuff_charid) > 0 ) {
			cdata(CDATA_DV, calcbuff_charid) = cdata(CDATA_DV, calcbuff_charid) * 12 / 10
		}
		cdata(CDATA_DV, calcbuff_charid) += 50
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_GAMMA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_DELTA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("耐久・PV・回復効果の上昇/ダメージ無効率上昇", "Increases CON & PV/Amplified Healing/Chance to nullify damage")
				return
			}
		}
		sdata(SKILL_ATTR_CON, calcbuff_charid) = sdata(SKILL_ATTR_CON, calcbuff_charid) * 12 / 10 + 5
		if ( cdata(CDATA_PV, calcbuff_charid) > 0 ) {
			cdata(CDATA_PV, calcbuff_charid) = cdata(CDATA_PV, calcbuff_charid) * 12 / 10
		}
		cdata(CDATA_PV, calcbuff_charid) += 50
		cdata(CDATA_IMMUNE_DAMAGE, calcbuff_charid) += 20
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_DELTA
	}
	if ( calcbuff_buffid == BUFF_FORM_SHIFT_OMEGA ) {
		dur = 100
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力と魔法耐性の上昇/HPMP消耗/ゲージ逓減オフ", "Attribute bonus & RES+ magic/Consumes HP & MP/Negates gauge depletion")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_CON, calcbuff_charid) = sdata(SKILL_ATTR_CON, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = sdata(SKILL_ATTR_DEX, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_ATTR_SPD, calcbuff_charid) = sdata(SKILL_ATTR_SPD, calcbuff_charid) * 12 / 10 + 5
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 120
		cdata(CDATA_SHIFT_FORM, calcbuff_charid) = SHIFT_FORM_OMEGA
	}
	if ( calcbuff_buffid == BUFF_HYPER_DASH ) {
		dur = 30
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("押しのけ移動しつつ乗馬依存ダメージ", "Run through and riding attack")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_GRAVITY_ACCEL ) {
		locvar_calcbuff_p = calcbuff_power
		if ( locvar_calcbuff_p > 200 ) {
			locvar_calcbuff_p = 200
		}
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("通常攻撃＋10％と通常防御＋5％と" + locvar_calcbuff_p + "の加速", "Attack +10%/Defense +5%/Speed +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_SPEED ) {
		locvar_calcbuff_p = limit(50 + calcbuff_power / 10, 1, 800)
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid == CHARA_PLAYER | (calcbuff_charid == -2 & tc == CHARA_PLAYER) ) {
			if ( cdata(CDATA_MATERIAL2_COUNTER, CHARA_PLAYER) == 1 ) {
				locvar_calcbuff_p = locvar_calcbuff_p * 13 / 10
			}
		}
		if ( locvar_calcbuff_p > 1000 ) {
			locvar_calcbuff_p = 1000
		}
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の加速", "Speed +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_SLOW ) {
		locvar_calcbuff_p = 20 + calcbuff_power / 5
		dur = 8 + calcbuff_power / 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の鈍足", "Speed -" + locvar_calcbuff_p)
				return
			}
		}
		if ( locvar_calcbuff_p > sdata(SKILL_ATTR_SPD, calcbuff_charid) / 2 ) {
			locvar_calcbuff_p = sdata(SKILL_ATTR_SPD, calcbuff_charid) / 2
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) -= locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_HERO ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( locvar_calcbuff_p > 1000 ) {
			locvar_calcbuff_p = 1000
		}
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("筋力・器用を10%と" + locvar_calcbuff_p + "上昇/耐恐怖/耐混乱", "STR & DEX +10% and +" + locvar_calcbuff_p + "/RES+ fear,confusion")
				return
			}
		}
		if ( sdata(SKILL_ATTR_STR, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_STR, calcbuff_charid) += sdata(SKILL_ATTR_STR, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_DEX, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_DEX, calcbuff_charid) += sdata(SKILL_ATTR_DEX, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_DEX, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_CONFUSE, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_JYUSOU_GOUSHIN ) {
		dur = 66
		locvar_calcbuff_p = limit(66 + calcbuff_power / 30, 66, 666)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("筋力耐久器用感覚意志魔力速度を" + locvar_calcbuff_p + "上昇/耐恐怖/魔法耐性上昇", "Increases STR,DEX by 10% and " + locvar_calcbuff_p + "/RES+ fear,confusion")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_CON, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_DEX, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_WIL, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_MAG, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_FEAR, calcbuff_charid) = 0
		sdata(SKILL_RES_MAGIC, calcbuff_charid) += 80 + calcbuff_power / 20
		return
	}
	if ( calcbuff_buffid == BUFF_SHOOTING_MODE ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("装備スキルで射撃力上昇/命中率上昇/不動", "Enhance shooting by equipped skill/Immobility")
				return
			}
		}
		cdata(CDATA_CONDITION_BIND, calcbuff_charid) += 25
		return
	}
	if ( calcbuff_buffid == BUFF_DATA_SCAN ) {
		dur = 20
		locvar_calcbuff_p = 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("分析率を上げやすくするが毎ターン微疲労", "Makes it easier to increase analysis rate/Expends stamina each turn")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_OVERLIMIT_THROW ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("瞑想依存で通常投擲強化/MP消費", "Throwing reinforced with meditation/MP expend")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_DISINFECTION ) {
		dur = 25
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力低下効果を一部無効化/耐毒", "Partially invalidates reduction effects/RES+ poison")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_GEM_POWER ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( locvar_calcbuff_p > 1000 ) {
			locvar_calcbuff_p = 1000
		}
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("耐久・魅力を10%と" + locvar_calcbuff_p + "上昇/耐麻痺/耐盲目", "CON & CHR +10% and +" + locvar_calcbuff_p + "/RES+ paralyze,blind")
				return
			}
		}
		if ( sdata(SKILL_ATTR_CON, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_CON, calcbuff_charid) += sdata(SKILL_ATTR_CON, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_CHA, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_CHA, calcbuff_charid) += sdata(SKILL_ATTR_CHA, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_CON, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_CHA, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_PARALYZE, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_BLIND, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_BLACK_MIRROR ) {
		dur = 200 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力の平均化", "Averaging")
				return
			}
		}
		sdata(SKILL_ATTR_STR, calcbuff_charid) = (sdata(SKILL_ATTR_STR, CHARA_PLAYER) + sdata(SKILL_ATTR_STR, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_CON, calcbuff_charid) = (sdata(SKILL_ATTR_CON, CHARA_PLAYER) + sdata(SKILL_ATTR_CON, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = (sdata(SKILL_ATTR_DEX, CHARA_PLAYER) + sdata(SKILL_ATTR_DEX, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_PER, calcbuff_charid) = (sdata(SKILL_ATTR_PER, CHARA_PLAYER) + sdata(SKILL_ATTR_PER, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_LER, calcbuff_charid) = (sdata(SKILL_ATTR_LER, CHARA_PLAYER) + sdata(SKILL_ATTR_LER, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = (sdata(SKILL_ATTR_WIL, CHARA_PLAYER) + sdata(SKILL_ATTR_WIL, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = (sdata(SKILL_ATTR_MAG, CHARA_PLAYER) + sdata(SKILL_ATTR_MAG, calcbuff_charid)) / 2
		sdata(SKILL_ATTR_CHA, calcbuff_charid) = (sdata(SKILL_ATTR_CHA, CHARA_PLAYER) + sdata(SKILL_ATTR_CHA, calcbuff_charid)) / 2
		return
	}
	if ( calcbuff_buffid == BUFF_CONCENTRATION ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 5 + calcbuff_power / 30
		if ( locvar_calcbuff_p > 1000 ) {
			locvar_calcbuff_p = 1000
		}
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("感覚・意志を10%と" + locvar_calcbuff_p + "上昇/耐睡眠/耐混乱", "PER & WIL +10% and +" + locvar_calcbuff_p + "/RES+ sleep,confusion")
				return
			}
		}
		if ( sdata(SKILL_ATTR_PER, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_PER, calcbuff_charid) += sdata(SKILL_ATTR_PER, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_WIL, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_WIL, calcbuff_charid) += sdata(SKILL_ATTR_WIL, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_WIL, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_SLEEP, calcbuff_charid) = 0
		cdata(CDATA_CONDITION_CONFUSE, calcbuff_charid) = 0
		return
	}
	if ( calcbuff_buffid == BUFF_DISTRACTED ) {
		dur = 200
		locvar_calcbuff_p = 200
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("感覚・意志が20％減少/詠唱成功率3％減少", "PER and WIL -20%, Casting chance -3%")
				return
			}
		}
		if ( sdata(SKILL_ATTR_PER, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 4 / 5
		}
		if ( sdata(SKILL_ATTR_WIL, calcbuff_charid) >= 1 ) {
			sdata(SKILL_ATTR_WIL, calcbuff_charid) = sdata(SKILL_ATTR_WIL, calcbuff_charid) * 4 / 5
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MELANCHOLY ) {
		dur = 200
		locvar_calcbuff_p = 200
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("10％の確率で行動ターン放棄/パワーゲージ逓減", "Skip turn with 10% chance/Diminishes power gauge")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_CURSE_OF_HUNGER ) {
		dur = 100
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("ターンごとの飢えと渇きが激しくなる", "Increase hunger")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MIST_OF_FRAILNESS ) {
		locvar_calcbuff_p = 30 + calcbuff_power / 10, 5 + calcbuff_power / 15
		locvar_calcbuff_p2 = limit(20 + calcbuff_power / 70, 20, 300)
		dur = 6 + calcbuff_power / 10
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("PVを半減", "Halves PV")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) > 0 ) {
			cdata(CDATA_PV, calcbuff_charid) = cdata(CDATA_PV, calcbuff_charid) / 2
		}
		return
	}
	if ( calcbuff_buffid == BUFF_ELEMENT_SCAR ) {
		dur = 20 + calcbuff_power / 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("火炎冷気電撃耐性減少/自然回復阻害", "RES- fire,cold,lightning/Inhibits regeneration")
				return
			}
		}
		sdata(SKILL_RES_FIRE, calcbuff_charid) = limit(sdata(SKILL_RES_FIRE, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_FIRE, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_COLD, calcbuff_charid) = limit(sdata(SKILL_RES_COLD, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_COLD, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_LIGHTNING, calcbuff_charid) = limit(sdata(SKILL_RES_LIGHTNING, calcbuff_charid) + limit((-50) - calcbuff_power / 15, -150, -80), sdata(SKILL_RES_LIGHTNING, calcbuff_charid) > 0, 9999)
		return
	}
	if ( calcbuff_buffid == BUFF_HOLY_VEIL ) {
		locvar_calcbuff_p = 50 + calcbuff_power / 3 * 2
		dur = 15 + calcbuff_power / 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("ﾊﾟﾜｰ" + locvar_calcbuff_p + "の呪い(hex)への抵抗/怯み耐性", "Hex protection (power: " + locvar_calcbuff_p + ")/RES+ wince")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_NIGHTMARE ) {
		dur = 4 + calcbuff_power / 15
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("闇幻毒獄音神混耐性の減少", "RES- mind,nerve,nether,poison,sound,chaos,darkness")
				return
			}
		}
		sdata(SKILL_RES_NERVE, calcbuff_charid) = limit(sdata(SKILL_RES_NERVE, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_NERVE, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_MIND, calcbuff_charid) = limit(sdata(SKILL_RES_MIND, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_MIND, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_NETHER, calcbuff_charid) = limit(sdata(SKILL_RES_NETHER, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_NETHER, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_POISON, calcbuff_charid) = limit(sdata(SKILL_RES_POISON, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_POISON, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_SOUND, calcbuff_charid) = limit(sdata(SKILL_RES_SOUND, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_SOUND, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_CHAOS, calcbuff_charid) = limit(sdata(SKILL_RES_CHAOS, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_CHAOS, calcbuff_charid) > 0, 9999)
		sdata(SKILL_RES_DARKNESS, calcbuff_charid) = limit(sdata(SKILL_RES_DARKNESS, calcbuff_charid) + limit((-50) - calcbuff_power / 20, -150, -80), sdata(SKILL_RES_DARKNESS, calcbuff_charid) > 0, 9999)
		return
	}
	if ( calcbuff_buffid == BUFF_DIVINE_WISDOM ) {
		dur = 20 + calcbuff_power / 10
		locvar_calcbuff_p = 10 + calcbuff_power / 40, 3 + calcbuff_power / 100
		if ( locvar_calcbuff_p > 1000 ) {
			locvar_calcbuff_p = 1000
		}
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("習得・魔力を10%と" + locvar_calcbuff_p + "上昇/読書を10%と" + locvar_calcbuff_p(1) + "上昇", "LER & MAG +10% and +" + locvar_calcbuff_p + "/Literacy +10% and +" + locvar_calcbuff_p(1))
				return
			}
		}
		if ( sdata(SKILL_ATTR_LER, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_LER, calcbuff_charid) += sdata(SKILL_ATTR_LER, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_ATTR_MAG, calcbuff_charid) >= 10 ) {
			sdata(SKILL_ATTR_MAG, calcbuff_charid) += sdata(SKILL_ATTR_MAG, calcbuff_charid) / 10
		}
		if ( sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) >= 10 ) {
			sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) += sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) / 10
		}
		sdata(SKILL_ATTR_LER, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_MAG, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) += locvar_calcbuff_p(1)
		return
	}
	if ( calcbuff_buffid == BUFF_PUNISHMENT ) {
		locvar_calcbuff_p = 20
		dur = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("DV・PV・速度を20%減少", "Speed, PV and DV -20%")
				return
			}
		}
		if ( cdata(CDATA_PV, calcbuff_charid) > 1 ) {
			cdata(CDATA_PV, calcbuff_charid) -= cdata(CDATA_PV, calcbuff_charid) / 5
		}
		if ( cdata(CDATA_DV, calcbuff_charid) > 1 ) {
			cdata(CDATA_DV, calcbuff_charid) -= cdata(CDATA_DV, calcbuff_charid) / 5
		}
		if ( sdata(SKILL_ATTR_SPD, calcbuff_charid) > 1 ) {
			sdata(SKILL_ATTR_SPD, calcbuff_charid) -= sdata(SKILL_ATTR_SPD, calcbuff_charid) / 5
		}
		return
	}
	if ( calcbuff_buffid == BUFF_LULWYS_TRICK ) {
		locvar_calcbuff_p = 150
		dur = 15
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("現在の速度の20%＋" + locvar_calcbuff_p + "の加速", "Speed +20% and +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p + sdata(SKILL_ATTR_SPD, calcbuff_charid) / 5
		return
	}
	if ( calcbuff_buffid == BUFF_INCOGNITO ) {
		dur = 4 + calcbuff_power / 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("変装", "Disguise")
				return
			}
		}
		cbitmod CHARA_BIT_INCOGNITO, calcbuff_charid, 1
		return
	}
	if ( calcbuff_buffid == BUFF_DEATH_WORD ) {
		dur = 20
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("呪いが完了したときに9999のダメージを受ける", "Receives 9999 damage when the curse ends")
				return
			}
		}
		cbitmod CHARA_BIT_DEATH_COUNT, calcbuff_charid, 1
		return
	}
	if ( calcbuff_buffid == BUFF_BOOST ) {
		locvar_calcbuff_p = limit(120 + calcbuff_power / 20, 120, 150)
		dur = limit(10 + calcbuff_power / 20, 10, 30)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の加速と能力のアップ", "Speed & Attributes +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p
		sdata(SKILL_ATTR_STR, calcbuff_charid) = sdata(SKILL_ATTR_STR, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * locvar_calcbuff_p / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_HARMONIC_ASSAULT ) {
		dur = 50
		locvar_calcbuff_p = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("交渉系技能に分析スキルで連携・中断耐性", "Cooperation chance/interrupt resist for performance-type skills")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_CONTINGENCY ) {
		dur = 66
		locvar_calcbuff_p = limit(25 + calcbuff_power / 17, 25, 80)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("致命傷を負ったとき" + locvar_calcbuff_p + "%の確率で一度だけダメージを0にする", "" + locvar_calcbuff_p + "% chance of nullifying lethal damage")
				return
			}
		}
		cbitmod CHARA_BIT_CONTINGENCY, calcbuff_charid, 1
		return
	}
	if ( calcbuff_buffid == BUFF_CLEAR_MIND ) {
		dur = 10
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力のアップ", "Increases Attributes")
				return
			}
		}
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = sdata(SKILL_ATTR_WIL, calcbuff_charid) * 130 / 100 + 10
		sdata(SKILL_ATTR_PER, calcbuff_charid) = sdata(SKILL_ATTR_PER, calcbuff_charid) * 130 / 100 + 10
		sdata(SKILL_NORMAL_EVASION, calcbuff_charid) = sdata(SKILL_NORMAL_EVASION, calcbuff_charid) * 120 / 100 + 25
		sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) = sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) * 120 / 100 + 25
		sdata(SKILL_WEAPON_MARTIAL_ARTS, calcbuff_charid) = sdata(SKILL_WEAPON_MARTIAL_ARTS, calcbuff_charid) * 110 / 100 + 5
		return
	}
	if ( calcbuff_buffid == BUFF_RESOLUTION_HAND ) {
		dur = 40
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("魔力上昇/手系攻撃に錬金術ダメージ追加", "Increases MAG/Alchemy damage added to Hand-skills")
				return
			}
		}
		sdata(SKILL_ATTR_MAG, calcbuff_charid) = sdata(SKILL_ATTR_MAG, calcbuff_charid) * 120 / 100 + 5
		return
	}
	if ( calcbuff_buffid == BUFF_ABYSS_IN_THE_EYE ) {
		dur = 40
		locvar_calcbuff_p = 5
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("心眼上昇/眼差し系にゲージ、HP、MPの吸収追加", "Enhances Eye of Mind/HP, MP and Gauge absorption added to Eye-skills")
				return
			}
		}
		sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) = sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) * 120 / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_RUN_WILDLY ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("能力の変動/耐恐怖", "Fluctuating Attributes/RES+ fear")
				return
			}
		}
		sdata(SKILL_ATTR_LER, calcbuff_charid) = limit(sdata(SKILL_ATTR_LER, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_STR, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		sdata(SKILL_ATTR_DEX, calcbuff_charid) = limit(sdata(SKILL_ATTR_DEX, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_PER, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		sdata(SKILL_ATTR_WIL, calcbuff_charid) = limit(sdata(SKILL_ATTR_WIL, calcbuff_charid) - locvar_calcbuff_p / 6, 5, 5000)
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += locvar_calcbuff_p / 6 + 1
		return
	}
	if ( calcbuff_buffid == BUFF_LUCK ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 777
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("" + locvar_calcbuff_p + "の幸運の上昇", "Luck +" + locvar_calcbuff_p)
				return
			}
		}
		sdata(SKILL_ATTR_LUC, calcbuff_charid) += locvar_calcbuff_p
		return
	}
	if ( calcbuff_buffid == BUFF_UNLUCKY ) {
		locvar_calcbuff_p = 666
		dur = 6666
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("666の幸運の低下", "Luck -666")
				return
			}
		}
		sdata(SKILL_ATTR_LUC, calcbuff_charid) -= 666
		return
	}
	if ( calcbuff_buffid == BUFF_FEATHER ) {
		dur = 20 + calcbuff_power / 15
		locvar_calcbuff_p = limit(25 + calcbuff_power / 8, 1, 1000)
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("DVを10%と" + locvar_calcbuff_p + "上昇/軽装備20%上昇/耐重力/浮遊", "DV +10% and +" + locvar_calcbuff_p + "/Float/RES+ Gravity")
				return
			}
		}
		if ( cdata(CDATA_DV, calcbuff_charid) >= 10 ) {
			cdata(CDATA_DV, calcbuff_charid) += cdata(CDATA_DV, calcbuff_charid) / 10
		}
		cdata(CDATA_DV, calcbuff_charid) += locvar_calcbuff_p
		cdata(CDATA_CONDITION_GRAVITY, calcbuff_charid) = 0
		cbitmod CHARA_BIT_FLOAT, calcbuff_charid, 1
		sdata(SKILL_NORMAL_LIGHT_ARMOR, calcbuff_charid) = sdata(SKILL_NORMAL_LIGHT_ARMOR, calcbuff_charid) * 12 / 10
		return
	}
	if ( calcbuff_buffid == BUFF_CHARGE ) {
		dur = 5
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("一度だけ通常攻撃/魔法/放射技能での攻撃力上昇", "Strengthens Physical/Magical/Breath damage for one attack")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_EMERGENCY_EVASION ) {
		dur = 15
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("軽装備時、クリティカル発生を無効化/通常ダメージ小軽減", "Light equipment prevents criticals/Small physical damage reduction")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_MAGIC_EQUIP ) {
		dur = 15
		locvar_calcbuff_p = 25
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("中装備時、魔法威力上昇/魔法属性ダメージ小軽減", "Medium equipment increases magical power/Magic damage reduction")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_SUPER_ARMOR ) {
		dur = 20
		locvar_calcbuff_p = 30
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("重装備時、通常大ダメージ軽減/重量命中ペナルティ無効/耐朦朧", "Heavy equipment reduces physical damage taken/No weight hit penalty/RES+ dim")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_SHIELD_PARRY ) {
		dur = 40
		locvar_calcbuff_p = 40
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("手に装備した盾で攻撃を弾き転倒させる", "Parry and overturn the attacker when equipped with a shield")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_KILLING_DANCE ) {
		dur = 13
		locvar_calcbuff_p = 13
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("回避成功時反撃/戦術見切り依存の回避スキル上昇", "Increase Evasion with Tactics & Greater Evasion, counterattack when evading")
				return
			}
		}
		sdata(SKILL_NORMAL_EVASION, calcbuff_charid) += (sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) + sdata(SKILL_NORMAL_GREATER_EVASION, calcbuff_charid) + 2) / 2
		return
	}
	if ( calcbuff_buffid == BUFF_ATTRIBUTE ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("最も耐性が高い属性を格闘に付加", "Add most resistant element damage to martial arts")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_POWER_ITEM ) {
		dur = 30
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == CALCBUFF_DURATION ) {
				return
			}
			else {
				buffdesc = lang("特定スキル上昇/一部アイテム使用時ゲージ増加", "Increases Magic Device, Throw, Alchemy, Literacy")
				return
			}
		}
		sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) = (sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) + 1) * 110 / 100 + 10
		sdata(SKILL_WEAPON_THROWING, calcbuff_charid) = (sdata(SKILL_WEAPON_THROWING, calcbuff_charid) + 1) * 110 / 100 + 10
		sdata(SKILL_NORMAL_ALCHEMY, calcbuff_charid) = (sdata(SKILL_NORMAL_ALCHEMY, calcbuff_charid) + 1) * 110 / 100 + 10
		sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) = (sdata(SKILL_NORMAL_LITERACY, calcbuff_charid) + 1) * 110 / 100 + 10
		return
	}
	if ( calcbuff_buffid == BUFF_AUTO_GUARD ) {
		dur = 50
		locvar_calcbuff_p = calcbuff_power
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("仲間が受けるダメージを肩代わりする", "Takes damage in place of an ally")
				return
			}
		}
		return
	}
	if ( calcbuff_buffid == BUFF_RETENTION ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("テレポート妨害/速度上昇/狂気半減", "Prevent teleport/Increases speed/Halve insane")
				return
			}
		}
		sdata(SKILL_ATTR_SPD, calcbuff_charid) += sdata(SKILL_ATTR_SPD, calcbuff_charid) / 8
		return
	}
	if ( calcbuff_buffid == BUFF_TAG_FORCE ) {
		locvar_calcbuff_p = calcbuff_power
		dur = 50
		if ( calcbuff_charid < CHARA_PLAYER ) {
			if ( calcbuff_charid == (-1) ) {
				return
			}
			else {
				buffdesc = lang("スキル値上昇/耐洗脳", "Increases skill level/RES+ brainwash")
				return
			}
		}
		sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) = (sdata(SKILL_NORMAL_TACTICS, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_MARKSMAN, calcbuff_charid) = (sdata(SKILL_NORMAL_MARKSMAN, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) = (sdata(SKILL_NORMAL_EYE_OF_MIND, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) = (sdata(SKILL_NORMAL_MAGIC_DEVICE, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_CASTING, calcbuff_charid) = (sdata(SKILL_NORMAL_CASTING, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_NORMAL_CONTROL_MAGIC, calcbuff_charid) = (sdata(SKILL_NORMAL_CONTROL_MAGIC, calcbuff_charid) + 1) * 130 / 100 + 5
		sdata(SKILL_ACTIVE_RIDING, calcbuff_charid) = (sdata(SKILL_ACTIVE_RIDING, calcbuff_charid) + 1) * 130 / 100 + 5
		return
	}
	return

