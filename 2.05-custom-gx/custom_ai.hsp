*InitCustomAI
	dim ItemHighlight, 1500
	dim CustomVal, 1200, 250
	dim EnemyAI, 250, 1000

	// NOTE: Previous versions of custom only allowed the usage of custom AI for
	// party members. Custom-GX now allows custom AI usage by NPCs. However,
	// when game data is saved, only the first 15 entries of AIData (for the
	// player's party) will be saved to aidata.s1, not the 244 that are allocated
	// here.
	//
	// The usage of custom AI for NPCs is currently limited to EX Team pet arena
	// battles, for which no saved data is necessary.
	dim AIData, 125, MAX_CHARA_TOTAL - 1

	dim TweakData, 100, 5
	sdim AITextData, 30, 15, 7
	dim PlaceholderMoveList, 20
	sdim AIStatusNames, 30, 25, 2
	dim StatusOffsets, 25

	AIStatusNames(0, 0) = "Afraid", "Atrophy", "Bind", "Bleeding", "Blind", "Brainwash", "Chills", "Confused", "Dim", "Fury", "Gravity", "Insane", "Jiu-Jitsu", "Metal", "MPoison", "Oil", "Paralyzed", "Poisoned", "Sleep", "Wet", "Wince", "NULL"
	StatusOffsets(0) = CDATA_CONDITION_FEAR, CDATA_CONDITION_ATROPHY, CDATA_CONDITION_BIND, CDATA_CONDITION_BLEED, CDATA_CONDITION_BLIND, CDATA_CONDITION_BRAINWASH, CDATA_CONDITION_CHILLS, CDATA_CONDITION_CONFUSE, CDATA_CONDITION_DIM, CDATA_CONDITION_ANGRY, CDATA_CONDITION_GRAVITY, CDATA_CONDITION_INSANE, CDATA_CONDITION_JIU_JITSU, CDATA_CONDITION_METAL, CDATA_CONDITION_MPOISON, CDATA_CONDITION_OIL, CDATA_CONDITION_PARALYZE, CDATA_CONDITION_POISON, CDATA_CONDITION_SLEEP, CDATA_CONDITION_WET, CDATA_CONDITION_WINCE
	AITextData(0, 0) = "Not Set", "Attack (Melee)", "Attack (Ranged)", "Move (Away)", "Move (Forward)", "And", "Do Nothing", "Use Shift Core", "NULL"
	AITextData(0, 1) = "Not Set", "Self", "Target", "Ally", "Player", "NULL"
	AITextData(0, 2) = "Not Set", "HP", "MP", "Distance", "Buff", "Gauge", "Class", "Status", "NULL"
	AITextData(0, 3) = "Not Set", "<", ">", "=", "!=", ">=", "<=", "NULL"
	AITextData(0, 4) = "10", "20", "25", "30", "40", "50", "60", "70", "75", "80", "90", "100", "NULL"
	AITextData(0, 5) = "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "NULL"
	AITextData(0, 6) = "warrior", "thief", "wizard", "farmer", "predator", "archer", "warmage", "tourist", "pianist", "gunner", "priest", "claymore", "NULL"

	return

*AnnaCustomAI
	if ( CAISavedDistance(cc) >= 1 ) {
		cdata(CDATA_AI_DISTANCE, cc) = CAISavedDistance(cc)
	}
	else {
		cdata(CDATA_AI_DISTANCE, cc) = 1
	}
	act = -10
	ActionTarget = -10
	LoopCount = 0
	ContinueTactic = 0
	TrueTarget = 0
	PreservedTarget = -1
	TriedLearnedSkill = 0
	gosub *IncrementFatigue
	repeat CUSTOM_AI_MAX_TACTICS
		PassTactic = 0
		if ( ContinueTactic == 2 ) {
			if ( CAIAction(cnt, cc) != 5 ) {
				ContinueTactic = 0
			}
			continue
		}
		if ( ContinueTactic == 0 ) {
			HoldTarget = 0
			PreservedTarget = -1
		}
		if ( CAIEntity(cnt, cc) \ 1000 != 0 & CAIComparator(cnt, cc) != 0 & CAIComparatorFix(cnt, cc) != 0 & CAIValue(cnt, cc) != 0 & CAIAction(cnt, cc) != 0 ) { ; Check that tactic has no "not set" parts
			if ( CAIAction(cnt, cc) == 5 ) { ; Processed
				ContinueTactic = 2
			}
			else {
				ContinueTactic = 0
			}

			; Switch to set target based on AIData value
			switch CAIEntity(cnt, cc) \ 1000
				case 1 ; Self
					ActionTarget = cc
					swbreak
				case 2 ; Target
					ActionTarget = tc
					swbreak
				case 3 ; Ally - Has to be handled separately in each section
					if ( HoldTarget != 1 ) {
						ActionTarget = -2
					}
					swbreak
				case 4 ; Player
					ActionTarget = 0
					swbreak
			swend

			if ( ActionTarget != (-2) & CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4 ) {
				dx = cdata(CDATA_X, ActionTarget)
				dy = cdata(CDATA_Y, ActionTarget)
				if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 ) {
					continue
				}
			}
			HoldTarget = CAIEntity(cnt, cc) / 1000

			; HP Condition Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_HP ) { ; If condition is equal to "HP"
				if ( CAIValue(cnt, cc) > 99 & CAIValue(cnt, cc) - 100 < 100 ) { ; If value is a percentage
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( (((cdata(CDATA_HP, LoopCount) * 100) / cdata(CDATA_MAX_HP, LoopCount)) == AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (((cdata(CDATA_HP, LoopCount) * 100) / cdata(CDATA_MAX_HP, LoopCount)) > AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (((cdata(CDATA_HP, LoopCount) * 100) / cdata(CDATA_MAX_HP, LoopCount)) < AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					if ( (((cdata(CDATA_HP, ActionTarget) * 100) / cdata(CDATA_MAX_HP, ActionTarget)) == AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (((cdata(CDATA_HP, ActionTarget) * 100) / cdata(CDATA_MAX_HP, ActionTarget)) > AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (((cdata(CDATA_HP, ActionTarget) * 100) / cdata(CDATA_MAX_HP, ActionTarget)) < AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				} ; End check for valid percentage
			} ; End HP Handling

			; MP Condition Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_MP ) { ; If condition is equal to "MP"
				if ( CAIValue(cnt, cc) > 99 & CAIValue(cnt, cc) - 100 < 100 ) { ; If value is a percentage
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							if ( (((cdata(CDATA_MP, LoopCount)*100) / cdata(CDATA_MAX_MP, LoopCount)) == AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (((cdata(CDATA_MP, LoopCount)*100) / cdata(CDATA_MAX_MP, LoopCount)) > AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (((cdata(CDATA_MP, LoopCount)*100) / cdata(CDATA_MAX_MP, LoopCount)) < AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					if ( (((cdata(CDATA_MP, ActionTarget) * 100) / cdata(CDATA_MAX_MP, ActionTarget)) == AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (((cdata(CDATA_MP, ActionTarget) * 100) / cdata(CDATA_MAX_MP, ActionTarget)) > AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (((cdata(CDATA_MP, ActionTarget) * 100) / cdata(CDATA_MAX_MP, ActionTarget)) < AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				} ; End check for valid percentage
			} ; End MP Handling

			; Distance Condition Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_DISTANCE ) { ; If condition is equal to "distance"
				if ( CAIValue(cnt, cc) > 99 & CAIValue(cnt, cc) - 200 < 100 & CAIValue(cnt, cc) - 200 >= 0 ) { ; If value is a distance
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( (dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == AITextData(CAIValue(cnt, cc) - 200, 5)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > AITextData(CAIValue(cnt, cc) - 200, 5)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) < AITextData(CAIValue(cnt, cc) - 200, 5)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					dx = cdata(CDATA_X, ActionTarget)
					dy = cdata(CDATA_Y, ActionTarget)
					if ( (dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == AITextData(CAIValue(cnt, cc) - 200, 5)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) > AITextData(CAIValue(cnt, cc) - 200, 5)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) < AITextData(CAIValue(cnt, cc) - 200, 5)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				} ; End check for valid distance
			} ; End Distance Handling

			; Buff Condition Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_BUFF ) { ; If condition is equal to "buff"
				if ( CAIValue(cnt, cc) < MAX_BUFF ) { ; If value is a valid buff ID
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( (findbuff(LoopCount, CAIValue(cnt, cc)) == (-1) & CAIComparatorFix(cnt, cc) == (4)) | (findbuff(LoopCount, CAIValue(cnt, cc)) != (-1) & CAIComparatorFix(cnt, cc) == (3)) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					if ( (findbuff(ActionTarget, CAIValue(cnt, cc)) == (-1) & CAIComparatorFix(cnt, cc) == (4)) | (findbuff(ActionTarget, CAIValue(cnt, cc)) != (-1) & CAIComparatorFix(cnt, cc) == (3)) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				} ; End check for valid buff ID
			} ; End Buff Handling

			; Gauge Condition Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_GAUGE ) { ; If condition is equal to "Gauge"
				if ( CAIValue(cnt, cc) > 99 & CAIValue(cnt, cc) - 100 < 100 ) { ; If value is a percentage
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							if ( (cdata(CDATA_POWER_GAUGE, LoopCount) == AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (cdata(CDATA_POWER_GAUGE, LoopCount) > AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							if ( (cdata(CDATA_POWER_GAUGE, LoopCount) < AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					if ( (cdata(CDATA_POWER_GAUGE, ActionTarget) == AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 3 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 6) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (cdata(CDATA_POWER_GAUGE, ActionTarget) > AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 2 | CAIComparatorFix(cnt, cc) == 5 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
					if ( (cdata(CDATA_POWER_GAUGE, ActionTarget) < AITextData(CAIValue(cnt, cc) - 100, 4)) & (CAIComparatorFix(cnt, cc) == 1 | CAIComparatorFix(cnt, cc) == 6 | CAIComparatorFix(cnt, cc) == 4) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				} ; End check for percentage
			} ; End Gauge Handling

			; Class Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_CLASS ) { ; If condition is equal to "Class"
				if ( CAIValue(cnt, cc) > 99 & CAIValue(cnt, cc) - 300 < 100 & CAIValue(cnt, cc) - 300 >= 0 ) { ; If value is a percentage
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							if ( (cdatan(CDATAN_CLASS, LoopCount) == AITextData(CAIValue(cnt, cc) - 300, 6) & CAIComparatorFix(cnt, cc) == (3)) | (cdatan(CDATAN_CLASS, LoopCount) != AITextData(CAIValue(cnt, cc) - 300, 6) & CAIComparatorFix(cnt, cc) == (4)) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					if ( (cdatan(CDATAN_CLASS, ActionTarget) == AITextData(CAIValue(cnt, cc) - 300, 6) & CAIComparatorFix(cnt, cc) == (3)) | (cdatan(CDATAN_CLASS, ActionTarget) != AITextData(CAIValue(cnt, cc) - 300, 6) & CAIComparatorFix(cnt, cc) == (4)) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				} ; End check for class
			} ; End Class Handling

			; Status Handling
			if ( CAIComparator(cnt, cc) == CUSTOM_AI_CONDITION_STATUS ) {; If condition is equal to "Status"
				if ( CAIValue(cnt, cc) > 99 & CAIValue(cnt, cc) - 400 < 100 & CAIValue(cnt, cc) - 400 >= 0 ) { ; Ensure value is a status
					if ( ActionTarget == -2 ) {
						if ( cc < MAX_CHARA_FOLLOWER ) {
							LoopCount = 0
							LoopMax = MAX_CHARA_FOLLOWER
						}
						else {
							LoopCount = MAX_CHARA_SAVE
							LoopMax = MAX_CHARA_TOTAL
						}
						while ( LoopCount < LoopMax )
							if ( cdata(CDATA_EXIST, LoopCount) != CHAR_STATE_ALIVE ) {
								LoopCount++
								_continue
							}
							dx = cdata(CDATA_X, LoopCount)
							dy = cdata(CDATA_Y, LoopCount)
							if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), dx, dy) == 0 & (CAIAction(cnt, cc) != 3 & CAIAction(cnt, cc) != 4) ) {
								LoopCount++
								_continue
							}
							if ( LoopCount == cc ) {
								LoopCount++
								_continue
							}
							if ( cc >= MAX_CHARA_FOLLOWER & cdata(CDATA_RELATION_ORG, LoopCount) > RELATION_ENEMY ) {
								LoopCount++
								_continue
							}
							if ( (cdata(StatusOffsets(CAIValue(cnt, cc) \ 100), LoopCount) > 0 & CAIComparatorFix(cnt, cc) == (3)) | (cdata(StatusOffsets(CAIValue(cnt, cc) \ 100), LoopCount) == 0 & CAIComparatorFix(cnt, cc) == (4)) ) {
								ActionTarget = LoopCount
								_break
							}
							LoopCount++
						wend
					}
					if ( ActionTarget == -2 ) {
						continue
					}
					if ( (cdata(StatusOffsets(CAIValue(cnt, cc) \ 100), ActionTarget) > 0 & CAIComparatorFix(cnt, cc) == (3)) | (cdata(StatusOffsets(CAIValue(cnt, cc) \ 100), ActionTarget) == 0 & CAIComparatorFix(cnt, cc) == (4)) ) {
						act = CAIAction(cnt, cc)
						gosub *ProcessTactic
						if ( ContinueTactic == 1 | PassTactic == 1 ) {
							continue
						}
						else {
							break
						}
					}
				}; End value verification
			}; End Status Handling
		}
	loop

	TrueTarget = tc
	if ( act != (-10) & PreservedTarget != (-1) ) {
		tc = PreservedTarget
	}
	if ( act == SKILL_SPACT_VARIABLE_BREATH ) { ; Variable Breath Handling
		act = SKILL_SPACT_POWER_BREATH
		bvar = sdata(SKILL_RES_MAGIC, cc)
		if ( sdata(SKILL_RES_FIRE, cc) > bvar ) {
			act = SKILL_SPACT_FIRE_BREATH
			bvar = sdata(SKILL_RES_FIRE, cc)
		}
		if ( sdata(SKILL_RES_COLD, cc) > bvar ) {
			act = SKILL_SPACT_COLD_BREATH
			bvar = sdata(SKILL_RES_COLD, cc)
		}
		if ( sdata(SKILL_RES_LIGHTNING, cc) > bvar ) {
			act = SKILL_SPACT_LIGHTNING_BREATH
			bvar = sdata(SKILL_RES_LIGHTNING, cc)
		}
		if ( sdata(SKILL_RES_DARKNESS, cc) > bvar ) {
			act = SKILL_SPACT_DARKNESS_BREATH
			bvar = sdata(SKILL_RES_DARKNESS, cc)
		}
		if ( sdata(SKILL_RES_MIND, cc) > bvar ) {
			act = SKILL_SPACT_MIND_BREATH
			bvar = sdata(SKILL_RES_MIND, cc)
		}
		if ( sdata(SKILL_RES_POISON, cc) > bvar ) {
			act = SKILL_SPACT_POISON_BREATH
			bvar = sdata(SKILL_RES_POISON, cc)
		}
		if ( sdata(SKILL_RES_NETHER, cc) > bvar ) {
			act = SKILL_SPACT_NETHER_BREATH
			bvar = sdata(SKILL_RES_NETHER, cc)
		}
		if ( sdata(SKILL_RES_SOUND, cc) > bvar ) {
			act = SKILL_SPACT_SOUND_BREATH
			bvar = sdata(SKILL_RES_SOUND, cc)
		}
		if ( sdata(SKILL_RES_NERVE, cc) > bvar ) {
			act = SKILL_SPACT_NERVE_BREATH
			bvar = sdata(SKILL_RES_NERVE, cc)
		}
		if ( sdata(SKILL_RES_CHAOS, cc) > bvar ) {
			act = SKILL_SPACT_CHAOS_BREATH
			bvar = sdata(SKILL_RES_CHAOS, cc)
		}
		if ( sdata(SKILL_RES_MAGIC, cc) >= bvar ) {
			act = SKILL_SPACT_POWER_BREATH
		}
		bvar = 0
		if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) != 0 ) {
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 1 ) {
				act = SKILL_SPACT_FIRE_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 2 ) {
				act = SKILL_SPACT_COLD_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 3 ) {
				act = SKILL_SPACT_LIGHTNING_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 4 ) {
				act = SKILL_SPACT_DARKNESS_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 5 ) {
				act = SKILL_SPACT_MIND_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 6 ) {
				act = SKILL_SPACT_POISON_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 7 ) {
				act = SKILL_SPACT_NETHER_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 8 ) {
				act = SKILL_SPACT_SOUND_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 9 ) {
				act = SKILL_SPACT_NERVE_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 10 ) {
				act = SKILL_SPACT_CHAOS_BREATH
			}
			if ( cdata(CDATA_ELEMENTS_EYES_ELE, cc) == 11 ) {
				act = SKILL_SPACT_POWER_BREATH
			}
		}
	}

	; Melee Attacks
	if ( act == CUSTOM_AI_ACTION_ATTACK_MELEE ) {
		distance = dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc))
		if ( distance == 1 ) {
			gosub *act_melee
			goto *turn_end
		}
	}

	; Ranged Attacks
	if ( act == CUSTOM_AI_ACTION_ATTACK_RANGED ) {
		distance = dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc))
		if ( distance < 6 ) {
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)) ) {
				gosub *FindRangeWeapon
				if ( stat == 1 ) {
					gosub *act_fire
					goto *turn_end
				}
			}
		}
	}

	; Movement
	if ( act == CUSTOM_AI_ACTION_MOVE_AWAY | act == CUSTOM_AI_ACTION_MOVE_FORWARD ) {
		CAISavedDistance(cc) = cdata(CDATA_AI_DISTANCE, cc)
		distance = dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc))
		if ( act == CUSTOM_AI_ACTION_MOVE_AWAY ) {
			cdata(CDATA_AI_DISTANCE, cc) = distance+1
		}
		if ( act == CUSTOM_AI_ACTION_MOVE_FORWARD & distance != 1 ) {
			cdata(CDATA_AI_DISTANCE, cc) = distance-1
		}
		goto *ai_followMove
	}

	; Spells
	if ( act >= STARTING_SKILL_SPELL & act < MAX_SPELL ) {
		if ( cdata(CDATA_SEALED_MAGIC, cc) == 0 ) { ; Magic not sealed
			efid = act
			npccostmp = 1
			gosub *cast
			if ( stat == 1 ) {
				goto *turn_end
			}
		}
	}

	; Abilities
	if ( act >= STARTING_SKILL_SPACT ) {
		if ( act == SKILL_SPACT_DISTURBANCE | cdata(CDATA_SEALED_ABILITY, cc) == 0 ) {
			efid = act
			gosub *action
			if ( stat == 1 ) {
				gosub *ProcessFatigue
				goto *turn_end
			}
		}
	}

	; Throwing Things
	if ( act >= ACTION_THROW & act < MAX_ACTION_THROW ) {
		distance = dist(cdata(CDATA_X, tc), cdata(CDATA_Y, tc), cdata(CDATA_X, cc), cdata(CDATA_Y, cc))
		if ( distance < 8 ) {
			if ( fov_los(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), cdata(CDATA_X, tc), cdata(CDATA_Y, tc)) ) {
				tlocx = cdata(CDATA_X, tc)
				tlocy = cdata(CDATA_Y, tc)
				if ( act == ACTION_THROW_POTION_MINOR ) {
					flt
					flttypemajor = FILTER_ITEM_POTION
					itemcreate cc, isetthrowpotionminor(rnd(length(isetthrowpotionminor))), -1, -1, 0
				}
				if ( act == ACTION_THROW_POTION_MAJOR ) {
					flt
					flttypemajor = FILTER_ITEM_POTION
					itemcreate cc, isetthrowpotionmajor(rnd(length(isetthrowpotionmajor))), -1, -1, 0
				}
				if ( act == ACTION_THROW_POTION_GREATER ) {
					flt
					flttypemajor = FILTER_ITEM_POTION
					itemcreate cc, isetthrowpotiongreater(rnd(length(isetthrowpotiongreater))), -1, -1, 0
				}
				if ( act == ACTION_THROW_POTION_SALT ) {
					flt
					itemcreate cc, ITEM_ID_POTION_SALT_SOLUTION, -1, -1, 0
				}
				if ( stat == 1 ) {
					gosub *ProcessFatigue
					goto *act_throw
				}
				goto *turn_end
			}
		}
	}

    ; Do Nothing
    if ( act == CUSTOM_AI_ACTION_DO_NOTHING ) {
        goto *turn_end
    }

    ; Use Shift Core
    if ( act == CUSTOM_AI_ACTION_USE_SHIFT_CORE ) {
		if ( cdata(CDATA_POWER_GAUGE, cc) >= 50 & cdata(CDATA_SHIFT_FORM, cc) == SHIFT_FORM_NONE ) {
			gosub *ai_useShiftCore
			if ( rtval == 1 ) {
				goto *turn_end
			}
		}
    }

	; Failure
	if ( CAIQuiet(cc) == 0 ) {
		if ( cc < MAX_CHARA_FOLLOWER ) {
			txt lang("" + name(cc) + "はあなたの指示によって、どのように対応すればいいのか分からない！", "" + name(cc) + " doesn't know how to respond to the situation based on the instructions you've given " + him(cc) + "!")
		}
		else {
			txt lang("" + name(cc) + "は自分の指示によって、どのように対応すればいいのか分からない！", "" + name(cc) + " doesn't know how to respond to the situation based on the instructions " + he(cc) + " " + have(cc) + " been given!")
		}
	}
	goto *turn_end
	return

*GetFatigue
	LoopCount = 0
	while( LoopCount < 20 )
	if ( CAIAction2(LoopCount, cc) == act ) {
		FatigueLevel = CAIActionFatigue(LoopCount, cc)
		_break
	}
	LoopCount++
	wend

	return

*IncrementFatigue
	LoopCount = 0
	while( LoopCount < 20 )
		if ( CAIAction2(LoopCount, cc) < MAX_ACTION_THROW & CAIAction2(LoopCount, cc) >= ACTION_THROW ) {
			if ( CAIActionFatigue(LoopCount, cc) < 15 ) {
				CAIActionFatigue(LoopCount, cc)++
			}
		}
		if ( CAIAction2(LoopCount, cc) >= STARTING_SKILL_SPACT ) {
			if ( CAIActionFatigue(LoopCount, cc) < ((sdataref(SKILL_DATAREF_COST, CAIAction2(LoopCount, cc))/10) * 5) & CAIActionFatigue(LoopCount, cc) < 20 ) {
				CAIActionFatigue(LoopCount, cc)++
			}
		}
		LoopCount++
	wend

	return

*ProcessFatigue
	LoopCount = 0
	while( LoopCount < 20 )
		if ( CAIAction2(LoopCount, cc) == act ) {
			if ( act < MAX_ACTION_THROW & act >= ACTION_THROW ) {
				CAIActionFatigue(LoopCount, cc) -= 4
			}
			else {
				CAIActionFatigue(LoopCount, cc) -= (limit(sdataref(SKILL_DATAREF_COST, act)/10, 1, 20) + 1)
			}
			_break
		}
		LoopCount++
	wend

	return

*AILearnAbility
	ActionToFind = act
	FoundAction = 0
	LoopCount = 0

	while( LoopCount < 20 )
		if ( CAIAction2(LoopCount, cc) == ActionToFind ) {
			FoundAction = 1
			_break
		}
		LoopCount++
	wend

	if ( FoundAction == 0 ) {
		LoopCount = 0

		while( LoopCount < 20 )
			if ( CAIAction2(LoopCount, cc) == 0 ) {
				CAIAction2(LoopCount, cc) = act
				CAIActionLearning(cc) = 0
				CAIActionLearnProgress(cc) = 0
				_break
			}
			LoopCount++
		wend
	}
	else {
		CAIActionLearning(cc) = 0
		CAIActionLearnProgress(cc) = 0
	}
	return

*ProcessTactic
	if ( act == CAIActionLearning(cc) ) {
		if ( rnd(100) > limit(CAIActionLearnProgress(cc)/2, 1, 20) | TriedLearnedSkill == 1 ) {
			PassTactic = 1
			act = -10
		}
		else {
			if ( rnd(4) == 0 & cbit(CHARA_BIT_SANDBAG, tc) != 1 ) {
				CAIActionLearnProgress(cc)++
				if ( CAIActionLearnProgress(cc) > 100 ) {
					CAIActionLearnProgress(cc) = 100
				}
				if ( CAIActionLearnProgress(cc) == 100 ) {
					gosub *AILearnAbility
				}
			}
		}
		TriedLearnedSkill = 1
	}
	if ( act < MAX_ACTION_THROW & act >= ACTION_THROW ) {
		gosub *GetFatigue
		if ( FatigueLevel < 3 ) {
			PassTactic = 1
			act = -10
		}
	}
	if ( act >= STARTING_SKILL_SPACT & act != CAIActionLearning(cc) ) {
		gosub *GetFatigue
		if ( FatigueLevel < sdataref(SKILL_DATAREF_COST, act)/10 ) {
			PassTactic = 1
			act = -10
		}
	}
	if ( act == CUSTOM_AI_ACTION_USE_SHIFT_CORE ) {
		if ( cdata(CDATA_POWER_GAUGE, cc) < 50 | cdata(CDATA_SHIFT_FORM, cc) != SHIFT_FORM_NONE ) {
			PassTactic = 1
			act = -10
		}
	}
	if ( PassTactic == 1 ) {
		return
	}
	if ( act == CUSTOM_AI_ACTION_AND ) {
		ContinueTactic = 1
	}
	if ( HoldTarget == 1 ) {
		PreservedTarget = ActionTarget
	}
	return

*PrintAIInfo
	if ( CAIEnabled(tc) == 1 ) {
		s = "Currently using custom AI."
	}
	else {
		s = "Currently using default AI."
	}
	pos wx + 400, wy + 378
	mes s
	s = "Currently Available Slots: " + CAIAvailableSlots(tc)
	pos wx + 400, wy + 397
	mes s
	if ( CAIActionLearning(tc) < 400 ) {
		CAIActionLearning(tc) = 0
	}
	ActionToGet = CAIActionLearning(tc)
	gosub *GetActionName
	if ( CAIActionLearning(tc) == 0 ) {
		s = "Currently Learning: N/A"
	}
	else {
		s = "Currently Learning: " + ActionName
	}
	pos wx + 400, wy + 416
	mes s
	if ( CAIActionLearning(tc) == 0 ) {
		s = "Current Progress: N/A"
	}
	else {
		s = "Current Progress: " + CAIActionLearnProgress(tc) + "%"
	}
	pos wx + 400, wy + 435
	mes s
	return

*AIMainMenu
	HeldTactic = -1
	pagesize = 0
	redraw 0
	CAIAvailableSlots(tc) = sdata(SKILL_ATTR_LER, CHARA_PLAYER) / 5
	if ( CAIAvailableSlots(tc) > sdata(SKILL_ATTR_LER, tc) /5 ) {
		CAIAvailableSlots(tc) = sdata(SKILL_ATTR_LER, tc) / 5
	}
	CAIAvailableSlots(tc) = limit(CAIAvailableSlots(tc), 3, 15)
	if ( CAIActionsInitialized(tc) == 0 ) {
		gosub *AIInitActions
	}
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	display_topic "Entity", wx + 28, wy + 30
	display_topic "Condition", wx + 128, wy + 30
	display_topic "Comparator", wx + 253, wy + 30
	display_topic "Value", wx + 388, wy + 30
	display_topic "Action", wx + 488, wy + 30
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	listn(0, 0) = "Configure"
	listn(0, 1) = "Teach a spell or ability."
	listn(0, 2) = "Exit"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat 3
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 38, wy + 385 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 64, wy + 385 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	repeat CAIAvailableSlots(tc)
	s = AITextData(CAIEntity(cnt, tc) \ 1000, 1)
	pos wx + 48, wy + 60 + cnt * 19 + 2
	mes s
	s = AITextData(CAIComparator(cnt, tc), 2)
	pos wx + 148, wy + 60 + cnt * 19 + 2
	mes s
	s = AITextData(CAIComparatorFix(cnt, tc), 3)
	pos wx + 273, wy + 60 + cnt * 19 + 2
	mes s
	SlotID = cnt
	gosub *GetValueName
	s = ValueName
	pos wx + 408, wy + 60 + cnt * 19 + 2
	mes s
	ActionToGet = CAIAction(SlotID, tc)
	gosub *GetActionName
	s = ActionName
	pos wx + 508, wy + 60 + cnt * 19 + 2
	mes s
	s = "" + (cnt+1)
	pos wx + 18, wy + 60 + cnt * 19 + 2
	mes s
	loop
	if ( listn(0, cs) == listn(0, 0) ) {
		s = "Change your pet's AI."
		pos wx + 38, wy + 359
		mes s
	}
	if ( listn(0, cs) == listn(0, 1) ) {
		s = "Teach your pet a new ability or spell."
		pos wx + 38, wy + 359
		mes s
	}
	if ( listn(0, cs) == listn(0, 2) ) {
		s = "Exit the menu."
		pos wx + 38, wy + 359
		mes s
	}
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	if ( key == key_select(0) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIConfigMenu
	}
	if ( key == key_select(1) ) {
		snd SOUNDLIST_OK1
		goto *AITeachConfigMenu
	}
	if ( key == key_select(2) ) {
		snd SOUNDLIST_OK1
		goto *chat_end
	}
	if ( key == key_cancel ) {
		goto *chat_end
	}
	goto *AIMainMenu
	return

*AITeachConfigMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	listn(0, 0) = "Teach a spell."
	listn(0, 1) = "Teach an ability."
	listn(0, 2) = "Make " + him(tc) + " forget a spell/ability."
	listn(0, 3) = "Back"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat 4
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 38, wy + 60 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 64, wy + 60 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	if ( key == key_select(0) ) {
		snd SOUNDLIST_OK1
		goto *AISpellLearnMenu
	}
	if ( key == key_select(1) ) {
		snd SOUNDLIST_OK1
		goto *AIAbilityLearnMenu
	}
	if ( key == key_select(2) ) {
		snd SOUNDLIST_OK1
		goto *AIDeleteAbilityMenu
	}
	if ( key == key_select(3) ) {
		snd SOUNDLIST_OK1
		goto *AIMainMenu
	}
	if ( key == key_cancel ) {
		goto *AIMainMenu
	}
	goto *AITeachConfigMenu
	return

*AIDeleteAbilityMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2

	repeat 20
		if ( CAIAction2(cnt, tc) == 0 ) {
			listn(0, cnt) = "Blank"
		}
		else {
			ActionToGet = CAIAction2(cnt, tc)
			gosub *GetActionName
			listn(0, cnt) = ActionName
		}
	loop

	listn(0, 20) = "Back"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat 21
		key_list(cnt) = cnt
		keyrange = cnt + 1
		pos wx + 18 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 2) - (283 * (cnt/15))
		;gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 44 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 1) - (284 * (cnt/15)), 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat 20
		if ( key == cnt ) {
			snd SOUNDLIST_OK1
			LoopCount = 0

			while( LoopCount < 15 )
				if ( CAIAction(LoopCount, tc) == CAIAction2(cnt, tc) ) {
					CAIAction(LoopCount, tc) = 0
				}
				LoopCount++
			wend

			if ( CAIAction2(cnt, tc) != 0 ) {
				CAIAction2(cnt, tc) = 0
				CAILearnedActionCount(tc)--
			}
			key = key_cancel
		}
	loop

	if ( key == 20 ) {
		snd SOUNDLIST_OK1
		goto *AITeachConfigMenu
	}
	if ( key == key_cancel ) {
		goto *AITeachConfigMenu
	}
	goto *AIDeleteAbilityMenu
	return

*AISpellLearnMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0

	; Spells
	repeat (MAX_SPELL - STARTING_SKILL_SPELL), STARTING_SKILL_SPELL
		if ( cnt == SKILL_SPELL_TELEPORT_OTHER | cnt == SKILL_SPELL_IDENTIFY | cnt == SKILL_SPELL_UNCURSE | cnt == SKILL_SPELL_ORACLE | cnt == SKILL_SPELL_SUMMON_MONSTERS | cnt == SKILL_SPELL_SUMMON_WILD | cnt == SKILL_SPELL_RETURN | cnt == SKILL_SPELL_MAGIC_MAP | cnt == SKILL_SPELL_SENSE_OBJECT | cnt == SKILL_SPELL_DOMINATE | cnt == SKILL_SPELL_WALL_CREATION | cnt == SKILL_SPELL_WISH | cnt == SKILL_SPELL_MUTATION | cnt == SKILL_SPELL_FIRE_WALL | cnt == SKILL_SPELL_DOOR_CREATION | cnt == SKILL_SPELL_INCOGNITO | cnt == SKILL_SPELL_RESURRECTION | cnt == SKILL_SPELL_4DIM_POCKET | cnt == SKILL_SPELL_WIZARDS_HARVEST | cnt == SKILL_SPELL_SUMMON_SPIRIT | cnt == SKILL_SPELL_METEOR ) {
			continue // Forbidden
		}
		if ( sdata(cnt, CHARA_PLAYER) >= 50 & (sdata(SKILL_NORMAL_CASTING, tc) >= (sdataref(SKILL_DATAREF_DIFF, cnt) / 15) | (cnt == SKILL_SPELL_HEAL_LIGHT | cnt == SKILL_SPELL_MAGIC_DART)) ) {
			ActionToGet = cnt
			gosub *GetActionName
			listn(0, NumActions) = ActionName
			key_list(NumActions) = cnt
			NumActions++
		}
	loop

	listn(0, NumActions) = "Back"
	key_list(NumActions) = 999
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0
	repeat NumActions+1
	keyrange = cnt + 1
	pos wx + 18 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 2) - (283 * (cnt/15))
	cs_list listn(0, cnt), wx + 44 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 1) - (284 * (cnt/15)), 19
	loop
	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	repeat (MAX_SPELL - STARTING_SKILL_SPELL), STARTING_SKILL_SPELL
	if ( key == cnt ) {
		snd SOUNDLIST_OK1
		LoopCount = 0

		while ( LoopCount < 20 )
			if ( CAIAction2(LoopCount, tc) == key ) {
				txt "" + name(tc) + " already knows that spell."
				p = 0
				break
			}
			LoopCount++
		wend

		LoopCount = 0

		while ( LoopCount < 15 )
			if ( CAIAction(LoopCount, tc) == CAIActionLearning(tc) ) {
				CAIAction(LoopCount, tc) = 0
			}
			LoopCount++
		wend

		CAIActionLearning(tc) = key
		CAIActionLearnProgress(tc) = 0

		break
	}
	loop
	if ( key == 999 ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AITeachConfigMenu
	}
	if ( key == key_cancel ) {
		cs = 0
		goto *AITeachConfigMenu
	}
	goto *AISpellLearnMenu
	return

*AIAbilityLearnMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0

	repeat (MAX_SKILL - STARTING_SKILL_SPACT), STARTING_SKILL_SPACT
		if ( cnt == SKILL_SPACT_DRAIN_BLOOD | cnt == SKILL_SPACT_FIRE_BREATH | cnt == SKILL_SPACT_COLD_BREATH | cnt == SKILL_SPACT_LIGHTNING_BREATH | cnt == SKILL_SPACT_DARKNESS_BREATH | cnt == SKILL_SPACT_CHAOS_BREATH | cnt == SKILL_SPACT_SOUND_BREATH | cnt == SKILL_SPACT_NETHER_BREATH | cnt == SKILL_SPACT_NERVE_BREATH | cnt == SKILL_SPACT_POISON_BREATH | cnt == SKILL_SPACT_MIND_BREATH | cnt == SKILL_SPACT_POWER_BREATH | cnt == SKILL_SPACT_TOUCH_OF_WEAKNESS | cnt == SKILL_SPACT_TOUCH_OF_HUNGER | cnt == SKILL_SPACT_TOUCH_OF_POISON | cnt == SKILL_SPACT_TOUCH_OF_NERVE | cnt == SKILL_SPACT_TOUCH_OF_FEAR | cnt == SKILL_SPACT_TOUCH_OF_SLEEP | cnt == SKILL_SPACT_SHADOW_STEP | cnt == SKILL_SPACT_DRAW_SHADOW | cnt == SKILL_SPACT_HARVEST_MANA | cnt == SKILL_SPACT_PUNISHMENT | cnt == SKILL_SPACT_DIMENSIONAL_MOVE | cnt == SKILL_SPACT_SWARM | cnt == SKILL_SPACT_EYE_OF_MUTATION | cnt == SKILL_SPACT_EYE_OF_ETHER | cnt == SKILL_SPACT_ETHER_GROUND | cnt == SKILL_SPACT_EYE_OF_INSANITY | cnt == SKILL_SPACT_RAIN_OF_SANITY | cnt == SKILL_SPACT_EYE_OF_DIMNESS | cnt == SKILL_SPACT_CURSE | cnt == SKILL_SPACT_DEATH_WORD | cnt == SKILL_SPACT_BOOST | cnt == SKILL_SPACT_INSULT | cnt == SKILL_SPACT_SHINING_WAVE | cnt == SKILL_SPACT_DISTANT_ATTACK7 | cnt == SKILL_SPACT_EYE_OF_MANA | cnt == SKILL_SPACT_PREGNANT | cnt == SKILL_SPACT_CHEER | cnt == SKILL_SPACT_RAMPAGE | cnt == SKILL_SPACT_SYNCHRO_HEARTS | cnt == SKILL_SPACT_MAGIC_KISS | cnt == SKILL_SPACT_CLEAR_MIND | cnt == SKILL_SPACT_PRESSURE | cnt == SKILL_SPACT_SUPER_REGEN | cnt == SKILL_SPACT_PLATINUM_SONG | cnt == SKILL_SPACT_PROVOKE | cnt == SKILL_SPACT_BIND | cnt == SKILL_SPACT_BROWBEAT | cnt == SKILL_SPACT_EYE_OF_BRAINWASHING | cnt == SKILL_SPACT_EXPLOSIVE_FIST | cnt == SKILL_SPACT_CHARGE | cnt == SKILL_SPACT_EMERGENCY_EVASION | cnt == SKILL_SPACT_MAGIC_EQUIP | cnt == SKILL_SPACT_SUPER_ARMOR | cnt == SKILL_SPACT_GRAVITY_SPHERE | cnt == SKILL_SPACT_ATTRIBUTE | cnt == SKILL_SPACT_FIRE_A_VOLLEY | cnt == SKILL_SPACT_MEGID_FLAME | cnt == SKILL_SPACT_CONTINUOUS_ATTACKS | cnt == SKILL_SPACT_VARIABLE_BREATH | cnt == SKILL_SPACT_DIVINE_STREAM | cnt == SKILL_SPACT_ZERO_SHOOT | cnt == SKILL_SPACT_SQUEEZE | cnt == SKILL_SPACT_DISTURBANCE | cnt == SKILL_SPACT_UNCONTROL | cnt == SKILL_SPACT_SPACE_RETENTION | cnt == SKILL_SPACT_DISTANT_ATTACK | cnt == SKILL_SPACT_SPINNING_THROW | cnt == SKILL_SPACT_METAL_GUARD | cnt == SKILL_SPACT_THUNDERCLAP_KICK | cnt == SKILL_SPACT_STRUCK_OUT | cnt == SKILL_SPACT_BEWITCH | cnt == SKILL_SPACT_SHADOW_RUSH | cnt == SKILL_SPACT_BODY_BLOW | cnt == SKILL_SPACT_KNOCKOUT | cnt == SKILL_SPACT_OVERRAY | cnt == SKILL_SPACT_SMASH_GROUND | cnt == SKILL_SPACT_MULTIPLE_GATHER | cnt == SKILL_SPACT_MANA_BURST | cnt == SKILL_SPACT_VINDALIAN_JIUJITSU | cnt == SKILL_SPACT_CLASH_RUSH | cnt == SKILL_SPACT_BLADE_TURBULENCE | cnt == SKILL_SPACT_DEATH_SONG | cnt == SKILL_SPACT_HOMING_LASER | cnt == SKILL_SPACT_MP_BREATH | cnt == SKILL_SPACT_BOUND_IN_BLOOD | cnt == SKILL_SPACT_SILENT_OCEAN | cnt == SKILL_SPACT_DIMENSION_FISHING | cnt == SKILL_SPACT_FASCINATION_DANCE | cnt == SKILL_SPACT_OVERLIMIT_THROW | cnt == SKILL_SPACT_DESTINY_DICE | cnt == SKILL_SPACT_ACID_HURRICANE | cnt == SKILL_SPACT_KAMUI | cnt == SKILL_SPACT_LOVE_CRAFTING | cnt == SKILL_SPACT_TICKLING_HELL ) {
			if ( spact(cnt - STARTING_SKILL_SPACT) == 1 ) {
				if ( sdata(sdataref(SKILL_DATAREF_USE, cnt), tc) > sdataref(SKILL_DATAREF_COST, cnt) * 2 ) {
					ActionToGet = cnt
					gosub *GetActionName

					listn(0, NumActions) = ActionName
					key_list(NumActions) = cnt
					NumActions++
				}
			}
		}
	loop

	listn(0, NumActions) = "Back"
	key_list(NumActions) = 999
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat NumActions+1
		keyrange = cnt + 1
		pos wx + 18 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 2) - (283 * (cnt/15))
		cs_list listn(0, cnt), wx + 44 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 1) - (284 * (cnt/15)), 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat (MAX_SKILL - STARTING_SKILL_SPACT), STARTING_SKILL_SPACT
		if ( key == cnt ) {
			snd SOUNDLIST_OK1
			LoopCount = 0
			while ( LoopCount < 20 )
				if ( CAIAction2(LoopCount, tc) == key ) {
					txt "" + name(tc) + " already knows that ability."
					p = 0
					break
				}
				LoopCount++
			wend

			LoopCount = 0

			while ( LoopCount < 15 )
				if ( CAIAction(LoopCount, tc) == CAIActionLearning(tc) ) {
					CAIAction(LoopCount, tc) = 0
				}
				LoopCount++
			wend

			CAIActionLearning(tc) = key
			CAIActionLearnProgress(tc) = 0

			break
		}
	loop

	if ( key == 999 ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AITeachConfigMenu
	}
	if ( key == key_cancel ) {
		cs = 0
		goto *AITeachConfigMenu
	}
	goto *AIAbilityLearnMenu
	return

*AIConfigMenu
	GoConfig = 0
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	display_topic "Entity", wx + 28, wy + 30
	display_topic "Condition", wx + 128, wy + 30
	display_topic "Comparator", wx + 253, wy + 30
	display_topic "Value", wx + 388, wy + 30
	display_topic "Action", wx + 488, wy + 30
	s = "Teach Your Pet"
	gosub *screen_drawMsg2

	repeat CAIAvailableSlots(tc)
		listn(0, cnt) = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\t\t\t\t\t\t\t\t\t\t\t\t\t\\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
	loop

	listn(0, CAIAvailableSlots(tc)) = "Toggle AI"
	listn(0, CAIAvailableSlots(tc)+1) = "Re-Initialize Actions"
	if ( CAIQuiet(tc) == 0 ) {
		listn(0, CAIAvailableSlots(tc)+2) = "Be quiet."
	}
	else {
		listn(0, CAIAvailableSlots(tc)+2) = "Tell me when you're confused."
	}
	listn(0, CAIAvailableSlots(tc)+3) = "Back"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat CAIAvailableSlots(tc) + 4
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 18, wy + 60 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 44, wy + 60 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo

	repeat CAIAvailableSlots(tc)
		s = AITextData(CAIEntity(cnt, tc) \ 1000, 1)
		pos wx + 48, wy + 60 + cnt * 19 + 2
		mes s
		s = AITextData(CAIComparator(cnt, tc), 2)
		pos wx + 148, wy + 60 + cnt * 19 + 2
		mes s
		s = AITextData(CAIComparatorFix(cnt, tc), 3)
		pos wx + 273, wy + 60 + cnt * 19 + 2
		mes s
		SlotID = cnt
		gosub *GetValueName
		s = ValueName
		pos wx + 408, wy + 60 + cnt * 19 + 2
		mes s
		ActionToGet = CAIAction(SlotID, tc)
		gosub *GetActionName
		s = ActionName
		pos wx + 508, wy + 60 + cnt * 19 + 2
		mes s
	loop

	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	if ( key == key_mode2 ) {
		snd SOUNDLIST_OK1
		if ( HeldTactic == -1 ) {
			HeldTactic = cs
		}
		else {
			TempSwap = CAIEntity(cs, tc)
			CAIEntity(cs, tc) = CAIEntity(HeldTactic, tc)
			CAIEntity(HeldTactic, tc) = TempSwap
			TempSwap = CAIComparator(cs, tc)
			CAIComparator(cs, tc) = CAIComparator(HeldTactic, tc)
			CAIComparator(HeldTactic, tc) = TempSwap
			TempSwap = CAIComparatorFix(cs, tc)
			CAIComparatorFix(cs, tc) = CAIComparatorFix(HeldTactic, tc)
			CAIComparatorFix(HeldTactic, tc) = TempSwap
			TempSwap = CAIValue(cs, tc)
			CAIValue(cs, tc) = CAIValue(HeldTactic, tc)
			CAIValue(HeldTactic, tc) = TempSwap
			TempSwap = CAIAction(cs, tc)
			CAIAction(cs, tc) = CAIAction(HeldTactic, tc)
			CAIAction(HeldTactic, tc) = TempSwap
			HeldTactic = -1
		}
	}

	repeat CAIAvailableSlots(tc)
		if ( key == key_select(cnt) ) {
			snd SOUNDLIST_OK1
			CurrentTactic = cnt
			cs = 0
			GoConfig = 1
			HeldTactic = -1
		}
	loop

	if ( GoConfig == 1 ) {
		goto *AITacticConfigMenu
	}
	if ( key == key_select(CAIAvailableSlots(tc)) ) {
		snd SOUNDLIST_OK1
		if ( CAIEnabled(tc) == TRUE ) {
			cdata(CDATA_AI_DISTANCE, tc) = CAISavedDistance(tc)
			CAISavedDistance(tc) = 0
			CAIEnabled(tc) = FALSE
		}
		else {
			CAIEnabled(tc) = TRUE
			CAISavedDistance(tc) = cdata(CDATA_AI_DISTANCE, tc)
		}
	}
	if ( key == key_select(CAIAvailableSlots(tc)+1) ) {
		snd SOUNDLIST_OK1
		dialog "Re-Initialize this pet's spells and abilities?", 3
		if ( stat == 6 ) {
			gosub *AIInitActions
		}
	}
	if ( key == key_select(CAIAvailableSlots(tc)+2) ) {
		snd SOUNDLIST_OK1
		if ( CAIQuiet(tc) == FALSE ) {
			CAIQuiet(tc) = TRUE
		}
		else {
			CAIQuiet(tc) = FALSE
		}
	}
	if ( key == key_select(CAIAvailableSlots(tc)+3) ) {
		snd SOUNDLIST_OK1
		goto *AIMainMenu
	}
	if ( key == key_cancel ) {
		goto *AIMainMenu
	}
	goto *AIConfigMenu
	return

*AITacticConfigMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	listn(0, 0) = "Modify Entity. (Current: " + AITextData(CAIEntity(CurrentTactic, tc) \ 1000, 1) + ")"
	listn(0, 1) = "Modify Condition. (Current: " + AITextData(CAIComparator(CurrentTactic, tc), 2) + ")"
	listn(0, 2) = "Modify Comparator. (Current: " + AITextData(CAIComparatorFix(CurrentTactic, tc), 3) + ")"
	SlotID = CurrentTactic
	gosub *GetValueName
	listn(0, 3) = "Modify Value. (Current: " + ValueName + ")"
	SlotID = CurrentTactic
	ActionToGet = CAIAction(SlotID, tc)
	gosub *GetActionName
	listn(0, 4) = "Modify Action. (Current: " + ActionName + ")"
	if ( CAIEntity(CurrentTactic, tc) / 1000 == 1 ) {
		listn(0, 5) = "Toggle Preserve Entity As Target. (Currently: On)"
	}
	else {
		listn(0, 5) = "Toggle Preserve Entity As Target. (Currently: Off)"
	}
	listn(0, 6) = "Back"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat 7
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 18, wy + 60 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 44, wy + 60 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	if ( key == key_select(0) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIEntitySetMenu
	}
	if ( key == key_select(1) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIConditionSetMenu
	}
	if ( key == key_select(2) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIComparatorSetMenu
	}
	if ( key == key_select(3) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIValueSetMenu
	}
	if ( key == key_select(4) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIActionSetMenu
	}
	if ( key == key_select(5) ) {
		snd SOUNDLIST_OK1
		if ( CAIEntity(CurrentTactic, tc) / 1000 == 1 ) {
			CAIEntity(CurrentTactic, tc) -= 1000
		}
		else {
			CAIEntity(CurrentTactic, tc) += 1000
		}
	}
	if ( key == key_select(6) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AIConfigMenu
	}
	if ( key == key_cancel ) {
		cs = 0
		goto *AIConfigMenu
	}
	goto *AITacticConfigMenu
	return

*AIActionSetMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0

	repeat length(AITextData)
		if ( AITextData(cnt, 0) != "NULL" ) {
			listn(0, NumActions) = AITextData(cnt, 0)
			key_list(NumActions) = NumActions + 100
			NumActions++
		}
		else {
			break
		}
	loop

	if ( CAIActionLearning(tc) != 0 ) {
		ActionToGet = CAIActionLearning(tc )
		gosub *GetActionName
		listn(0, NumActions) = ActionName
		key_list(NumActions) = NumActions + 100
		NumActions++
	}

	repeat 20
		if ( CAIAction2(cnt, tc) != 0 ) {
			ActionToGet = CAIAction2(cnt, tc)
			gosub *GetActionName
			listn(0, NumActions) = ActionName
			key_list(NumActions) = cnt
			NumActions++
		}
	loop

	listn(0, NumActions) = "Back"
	key_list(NumActions) = 999
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat NumActions+1
		keyrange = cnt + 1
		pos wx + 18 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 2) - (283 * (cnt/15))
		cs_list listn(0, cnt), wx + 44 + (150 * (cnt/15)), (wy + 60 + cnt * 19 - 1) - (284 * (cnt/15)), 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat 115
		if ( key == cnt ) {
			snd SOUNDLIST_OK1
			if ( cnt < 100 ) {
				CAIAction(CurrentTactic, tc) = CAIAction2(cnt, tc)
				key = key_cancel
				break
			}
			if ( cnt == 100 + CUSTOM_AI_MAX_ACTIONS + 1 ) {
				CAIAction(CurrentTactic, tc) = CAIActionLearning(tc)
				key = key_cancel
				break
			}
			if ( cnt >= 100 ) {
				CAIAction(CurrentTactic, tc) = cnt - 100
				key = key_cancel
				break
			}
		}
	loop

	if ( key == 999 ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AITacticConfigMenu
	}
	if ( key == key_cancel ) {
		cs = 0
		goto *AITacticConfigMenu
	}
	goto *AIActionSetMenu
	return

*AIFindAction
	FoundAction = 0
	LoopCount = 0

	while( LoopCount < 20 )
		if ( CAIAction2(LoopCount, tc) == ActionToFind ) {
			FoundAction = 1
			_break
		}
		LoopCount++
	wend

	return

*AIInitActions
	if ( CAIActionsInitialized(tc) == 1 ) {
		repeat 20
			PlaceholderMoveList(cnt) = CAIAction2(cnt, tc)
			CAIAction(cnt, tc) = 0
			CAIAction2(cnt, tc) = 0
			CAIActionFatigue(cnt, tc) = 0
		loop

		CAILearnedActionCount(tc) = 0
		ReInitActions = 1
	}
	gosub *AIGetEvolveActions

	repeat 10
		if ( (cdata(STARTING_CDATA_ACT_MAIN+cnt, tc) > STARTING_SKILL_SPELL & cdata(STARTING_CDATA_ACT_MAIN+cnt, tc) != SKILL_SPELL_METEOR) | (cdata(STARTING_CDATA_ACT_MAIN+cnt, tc) < MAX_ACTION_THROW & cdata(STARTING_CDATA_ACT_MAIN+cnt, tc) >= ACTION_THROW) ) {
			CAIAction2(CAILearnedActionCount(tc), tc) = cdata(STARTING_CDATA_ACT_MAIN+cnt, tc)
			CAILearnedActionCount(tc)++
		}
	loop

	if ( (cdata(CDATA_ACT_HEAL, tc) > STARTING_SKILL_SPELL & cdata(CDATA_ACT_HEAL, tc) != SKILL_SPELL_METEOR) | (cdata(CDATA_ACT_HEAL, tc) < MAX_ACTION_THROW & cdata(CDATA_ACT_HEAL, tc) >= ACTION_THROW) ) {
		CAIAction2(CAILearnedActionCount(tc), tc) = cdata(CDATA_ACT_HEAL, tc)
		CAILearnedActionCount(tc)++
	}
	if ( cbit(CHARA_BIT_AWAKE_INSULT, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_INSULT
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_CRYSTAL_SPEAR, tc) == 1 ) {
		ActionToFind = SKILL_SPELL_CRYSTAL_SPEAR
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_DIMENSIONAL_MOVE, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_DIMENSIONAL_MOVE
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_TACTICAL_HEAL, tc) == 1 ) {
		ActionToFind = SKILL_SPELL_REGENERATION
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_HEAL_CRITICAL
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_HEALING_RAIN
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_HARVEST_MANA
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_TACTICAL_ATTACK, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_DECAPITATION
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_SHADOW_STEP
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_TACTICAL_MARTIAL_ARTS, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_EXPLOSIVE_FIST
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_BODY_BLOW
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_ATTRIBUTE
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_CLEAR_MIND
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_TACTICAL_CURSE, tc) == 1 ) {
		ActionToFind = SKILL_SPELL_MIST_OF_FRAILNESS
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_NIGHTMARE
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_ELEMENT_SCAR
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_MIST_OF_SILENCE
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_SLOW
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_CHARGE_ATTACK, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_CHARGE
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_PROVOKE, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_PROVOKE
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_ZERO_SHOOT, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_ZERO_SHOOT
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_TACTICAL_THROW, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_STRUCK_OUT
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_SHINING_THROW
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPACT_OVERLIMIT_THROW
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_VARIABLE_BREATH, tc) == 1 ) {
		ActionToFind = SKILL_SPACT_VARIABLE_BREATH
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( cbit(CHARA_BIT_AWAKE_VARIABLE_STORM, tc) == 1 ) {
		ActionToFind = SKILL_SPELL_MAGIC_STORM
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_ICE_BALL
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_FIRE_BALL
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_CHAOS_BALL
		gosub *AIFindAction
		gosub *AIAddAction
		ActionToFind = SKILL_SPELL_RAGING_ROAR
		gosub *AIFindAction
		gosub *AIAddAction
	}
	if ( ReInitActions == 1 ) {
		ReInitActions = 0

		repeat 20
			if ( PlaceholderMoveList(cnt) != 0 ) {
				ActionToFind = PlaceholderMoveList(cnt)
				gosub *AIFindAction
				gosub *AIAddAction
			}
		loop
	}
	CAIActionsInitialized(tc) = 1
	return

*AIAddAction
	if ( FoundAction == 0 & CAILearnedActionCount(tc) < 20 ) {
		CAIAction2(CAILearnedActionCount(tc), tc) = ActionToFind
		CAILearnedActionCount(tc)++
	}
	return

*AIGetEvolveActions
	if ( cdata(CDATA_EVOLUTION_STAGE, tc) != 0 ) {
		switch cdata(CDATA_ID, tc)
			case CREATURE_ID_PUTIT
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_RED_PUTIT
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WILD_RABBIT
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 1 ) { ; sylbunny
					ActionToFind = SKILL_SPACT_TIME_STOP
					gosub *AIFindAction
					gosub *AIAddAction
				}
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) { ; red-eyes w.rabbit
					ActionToFind = SKILL_SPACT_CHEER
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_SNAIL
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_EMERGENCY_EVASION
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_FALLEN_SOLDIER
				ActionToFind = SKILL_SPACT_SUPER_ARMOR
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WILD_SHEEP
				ActionToFind = SKILL_SPACT_CURSE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_FLYING_FROG
				ActionToFind = SKILL_SPACT_PLATINUM_SONG
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_KOBOLD
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WARRIOR_OF_ELEA
				ActionToFind = SKILL_SPACT_EMERGENCY_EVASION
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_MANDRAKE
				ActionToFind = SKILL_SPACT_SHINING_WAVE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BEETLE
				ActionToFind = SKILL_SPACT_SUPER_ARMOR
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WIZARD_OF_ELEA
				ActionToFind = SKILL_SPELL_MAGIC_STORM
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GIANT_SQUIRREL
				ActionToFind = SKILL_SPACT_INSULT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_KILLER_SQUIRREL
				ActionToFind = SKILL_SPACT_INSULT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GRUDGE
				ActionToFind = ACTION_THROW_POTION_GREATER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_HUNGRY_DEMON
				ActionToFind = ACTION_THROW_POTION_GREATER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ELECTRIC_CLOUD
				ActionToFind = SKILL_SPELL_DARKNESS_BOLT
				gosub *AIFindAction
				gosub *AIAddAction
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPELL_HEALING_RAIN
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_CHAOS_CLOUD
				ActionToFind = SKILL_SPELL_DARKNESS_BOLT
				gosub *AIFindAction
				gosub *AIAddAction
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPELL_HEALING_RAIN
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_PUPPET
				ActionToFind = SKILL_SPACT_CONTINUOUS_ATTACKS
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WASP
				ActionToFind = SKILL_SPACT_FASCINATION_DANCE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_RED_WASP
				ActionToFind = SKILL_SPACT_FASCINATION_DANCE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CYCLOPS
				ActionToFind = SKILL_SPACT_COLD_BREATH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_TITAN
				ActionToFind = SKILL_SPACT_COLD_BREATH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_IMP
				ActionToFind = SKILL_SPACT_MAGIC_EQUIP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_NETHER_IMP
				ActionToFind = SKILL_SPACT_MAGIC_EQUIP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CHAOS_IMP
				ActionToFind = SKILL_SPACT_MAGIC_EQUIP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GHOST
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_NYMPH
				ActionToFind = SKILL_SPACT_PLATINUM_SONG
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_MAN_EATER_FLOWER
				ActionToFind = SKILL_SPACT_SQUEEZE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CHAOS_FLOWER
				ActionToFind = SKILL_SPACT_SQUEEZE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_COBRA
				ActionToFind = SKILL_SPACT_SQUEEZE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_KING_COBRA
				ActionToFind = SKILL_SPACT_SQUEEZE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CUPID_OF_LOVE
				ActionToFind = SKILL_SPACT_FIRE_A_VOLLEY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_LESSER_PHANTOM
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_GRAVITY_SPHERE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_HARPY
				ActionToFind = SKILL_SPACT_SUPER_REGEN
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_SPIDER
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BLACK_WIDOW
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_PARALYZER
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_TARANTULA
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BLOOD_SPIDER
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WOODEN_GOLEM
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPACT_SHINING_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_STONE_GOLEM
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPACT_SHINING_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_STEEL_GOLEM
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPACT_SHINING_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_FIRE_CRAB
				ActionToFind = SKILL_SPACT_SYNCHRO_HEARTS
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_DOG
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) >= 10 ) {
					ActionToFind = SKILL_SPACT_FLAME_OF_RAGE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_LITTLE_GIRL
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPELL_CRYSTAL_SPEAR
					gosub *AIFindAction
					gosub *AIAddAction
					ActionToFind = SKILL_SPACT_RAIN_OF_SANITY
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_RAT
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_LIGHTNING_BREATH
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_SLIME
				ActionToFind = SKILL_SPACT_MELT_CLINCH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YOUNGER_SISTER
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) >= 10 ) {
					ActionToFind = SKILL_SPACT_FLAME_OF_RAGE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_NURSE
				ActionToFind = SKILL_SPACT_RAIN_OF_SANITY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BLADE
				ActionToFind = SKILL_SPACT_SHADOW_STEP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BLADE_ALPHA
				ActionToFind = SKILL_SPACT_SHADOW_STEP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WISP
				ActionToFind = SKILL_SPELL_DARKNESS_BOLT
				gosub *AIFindAction
				gosub *AIAddAction
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPELL_NETHER_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_ACID_SLIME
				ActionToFind = SKILL_SPACT_MELT_CLINCH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_PUMPKIN
				ActionToFind = SKILL_SPACT_BIND
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GREATER_PUMPKIN
				ActionToFind = SKILL_SPACT_BIND
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_HALLOWEEN_NIGHTMARE
				ActionToFind = SKILL_SPACT_BIND
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_PUPPY
				ActionToFind = SKILL_SPACT_BIND
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YOUNGER_CAT_SISTER
				ActionToFind = SKILL_SPACT_EMERGENCY_EVASION
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YOUNG_LADY
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_DRAIN_BLOOD
					gosub *AIFindAction
					gosub *AIAddAction
				}
				ActionToFind = ACTION_THROW_POTION_GREATER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_THIEF
				ActionToFind = SKILL_SPACT_GOLDEN_STORM
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ROBBER
				ActionToFind = SKILL_SPACT_GOLDEN_STORM
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YEEK
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_KAMIKAZE_YEEK
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YEEK_WARRIOR
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_MASTER_YEEK
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YEEK_ARCHER
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BOMB_ROCK
				ActionToFind = SKILL_SPACT_SHADOW_STEP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_FAIRY
				ActionToFind = SKILL_SPACT_MAGIC_EQUIP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_SCORPION
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_KING_SCORPION
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BLACK_CAT
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CUTE_FAIRY
				ActionToFind = SKILL_SPACT_BIND
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ANDROID
				ActionToFind = SKILL_SPACT_FIRE_A_VOLLEY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BLACK_ANGEL
				ActionToFind = SKILL_SPACT_LULWYS_TRICK
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_EXILE
				ActionToFind = SKILL_SPELL_ECLIPSE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GOLDEN_KNIGHT
				ActionToFind = SKILL_SPACT_SUPER_ARMOR
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_DEFENDER
				ActionToFind = SKILL_SPACT_ABSOLUTE_PROTECT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_LAME_HORSE
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_YOWYN_HORSE
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_NOYEL_HORSE
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_WILD_HORSE
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_THOROUGHBRED
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_LIZARD_MAN
				ActionToFind = SKILL_SPACT_SHADOW_RUSH
				gosub *AIFindAction
				gosub *AIAddAction
				ActionToFind = SKILL_SPACT_LIGHTNING_BREATH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_MINOTAUR
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_BOOST
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_MINOTAUR_MAGICIAN
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_BOOST
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_MINOTAUR_BOXER
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_BOOST
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_MINOTAUR_KING
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_BOOST
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_LITTLE_SISTER
				ActionToFind = SKILL_SPACT_SHADOW_STEP
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GOOSE
				ActionToFind = SKILL_SPACT_PLATINUM_SONG
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_OLDER_SISTER
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) >= 10 ) {
					ActionToFind = SKILL_SPACT_FLAME_OF_RAGE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_OLDER_DOG_SISTER
				ActionToFind = SKILL_SPACT_CHARGE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GIRAFFE
				ActionToFind = SKILL_SPACT_PUNISHMENT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ELECTRIC_SHEEP
				ActionToFind = SKILL_SPELL_THUNDER_VORTEX
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_FIRE_DRAGON_CHILD
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_BOOST
					gosub *AIFindAction
					gosub *AIAddAction
				}
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 2 ) {
					ActionToFind = SKILL_SPACT_MEGID_FLAME
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_BLACK_HORNET
				ActionToFind = SKILL_SPACT_FASCINATION_DANCE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_FOX_BROTHER
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_MEGID_FLAME
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_MOAI
				ActionToFind = SKILL_SPACT_FIRE_A_VOLLEY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_HAMSTER
				ActionToFind = SKILL_SPACT_SWARM
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_SMALL_STONE_GOLEM
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPACT_SHINING_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_SMALL_WOODEN_GOLEM
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPACT_SHINING_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_WANDERING_PENGUIN
				ActionToFind = SKILL_SPACT_BROWBEAT
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ZOMBIE_GIRL
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 1 ) {
					ActionToFind = SKILL_SPACT_ABSOLUTE_PROTECT
					gosub *AIFindAction
					gosub *AIAddAction
					ActionToFind = SKILL_SPELL_REGENERATION
					gosub *AIFindAction
					gosub *AIAddAction
				}
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 2 ) {
					ActionToFind = SKILL_SPACT_EMERGENCY_EVASION
					gosub *AIFindAction
					gosub *AIAddAction
					ActionToFind = SKILL_SPACT_RUBBING
					gosub *AIFindAction
					gosub *AIAddAction
					ActionToFind = SKILL_SPACT_KILLING_DANCE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) == 3 ) {
					ActionToFind = SKILL_SPACT_SWARM
					gosub *AIFindAction
					gosub *AIAddAction
					ActionToFind = SKILL_SPELL_NETHER_WAVE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_KENTAURS
				ActionToFind = SKILL_SPACT_BOOST
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CATTLE
				ActionToFind = SKILL_SPACT_PUNISHMENT
				gosub *AIFindAction
				gosub *AIAddAction
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_POISON_ARROW_FROG
				ActionToFind = SKILL_SPACT_PLATINUM_SONG
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_APPRENTICE_ANGEL
				ActionToFind = SKILL_SPACT_OVERRAY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_LIZARD_MAGE
				ActionToFind = SKILL_SPACT_SHADOW_RUSH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_GUNFISH
				ActionToFind = SKILL_SPACT_FIRE_A_VOLLEY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_LARGE_BIKE
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_XEREN_AUTO_TANK
				ActionToFind = SKILL_SPACT_FIRE_A_VOLLEY
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_CHAOS_SEED
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_EXTERMINATION_BREATH
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_CATERPILLAR_SNIPER
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_DRAW_SHADOW
					gosub *AIFindAction
					gosub *AIAddAction
					ActionToFind = SKILL_SPACT_PUNISHMENT
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_LITTLE_BOY
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_KILLING_DANCE
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			case CREATURE_ID_BUTLER
				ActionToFind = SKILL_SPACT_GROUP_HYPNOSIS
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_BISQUE_DOLL
				ActionToFind = SKILL_SPACT_SHADOW_RUSH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ORC
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_ORC_WARRIOR
				ActionToFind = SKILL_SPACT_CHEER
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_PORC
				ActionToFind = SKILL_SPACT_BOOST
				gosub *AIFindAction
				gosub *AIAddAction
				ActionToFind = SKILL_SPACT_HYPER_DASH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_DEFORMED_EYE
			case CREATURE_ID_IMPURE_EYE
				ActionToFind = SKILL_SPACT_DISTANT_ATTACK7
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_FLOATING_EYE
			case CREATURE_ID_CHAOS_EYE
			case CREATURE_ID_MAD_GAZE
			case CREATURE_ID_DEATH_GAZE
				ActionToFind = SKILL_SPACT_DANCING_WIRE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_VARUNA
				ActionToFind = SKILL_SPACT_SILENT_OCEAN
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			 case CREATURE_ID_MITRA
				ActionToFind = SKILL_SPACT_TAG_FORCE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			 case CREATURE_ID_ASURA
				ActionToFind = SKILL_SPACT_KILLING_DANCE
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			 case CREATURE_ID_FIN_CROCODILE
				ActionToFind = SKILL_SPACT_BOUND_IN_BLOOD
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			 case CREATURE_ID_CTHULHICK
				act = SKILL_SPACT_ALCHEMICAL_RAIN
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_KING_COCKROACH
				ActionToFind = SKILL_SPACT_SHADOW_RUSH
				gosub *AIFindAction
				gosub *AIAddAction
				swbreak
			case CREATURE_ID_HAND_OF_THE_DEAD
			case CREATURE_ID_HAND_OF_THE_CHAOS
			case CREATURE_ID_HAND_OF_THE_MURDERER
				ActionToFind = SKILL_SPACT_EXPLOSIVE_FIST
				gosub *AIFindAction
				gosub *AIAddAction
				if ( cdata(CDATA_EVOLUTION_STAGE, tc) > 1 ) {
					ActionToFind = SKILL_SPACT_MELT_CLINCH
					gosub *AIFindAction
					gosub *AIAddAction
				}
				swbreak
			default
				swbreak
		swend
	}
	switch cdata(CDATA_ID, tc)
		case CREATURE_ID_SPIRAL_KING
			ActionToFind = SKILL_SPELL_DARK_EYE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_BLUE_BUBBLE
			ActionToFind = SKILL_SPELL_BUBBLE_STORM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_BUBBLE
			ActionToFind = SKILL_SPELL_BUBBLE_STORM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_SNAIL_THE_ANDROID_RIDER
			ActionToFind = SKILL_SPACT_SHINE_SNAIL
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_CAMOUFLAGED_IMP
			ActionToFind = SKILL_SPACT_GROUP_HYPNOSIS
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_EXOSSIL_THE_CHAOS_WING
			ActionToFind = SKILL_SPACT_GROUP_HYPNOSIS
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_JYUSOU_GOUSHIN
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_TITANIA
			ActionToFind = SKILL_SPACT_GROUP_HYPNOSIS
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_H_SISTER2
			ActionToFind = SKILL_SPACT_BLOOD_STREAM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ARMA_THE_TOUR_GUIDE
			ActionToFind = SKILL_SPACT_VINDALIAN_JIUJITSU
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ALCHEMIST_NAPLUS
			ActionToFind = ACTION_THROW_POTION_GREATER
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_GETUEI_THE_NINJA_MASTER
			ActionToFind = SKILL_SPACT_SHADOW_RUSH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_EILA_THE_FUGITIVE_KUNOICHI
			ActionToFind = SKILL_SPACT_CURTAIN_OF_SMOKE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_RED_NINJA
			ActionToFind = SKILL_SPACT_CURTAIN_OF_SMOKE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_NEW_CITIZEN
			ActionToFind = SKILL_SPACT_CURTAIN_OF_SMOKE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_BLOOD_GOLEM
			ActionToFind = SKILL_SPACT_BLOOD_STREAM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ULTIMATE_GOLEM
			ActionToFind = SKILL_SPACT_VINDALIAN_JIUJITSU
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_KALI
			ActionToFind = SKILL_SPACT_BLOOD_STREAM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_MARY_THE_INSECT_MASTER
			ActionToFind = SKILL_SPACT_ATTRIBUTE
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_VINDALIAN_JIUJITSU
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_RAIZEL_THE_OLD_WIZARD
			ActionToFind = SKILL_SPELL_HOLY_VEIL
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_DEATH_HAMSTER
			ActionToFind = SKILL_SPELL_CONTINGENCY
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_YELLOW_FIRE_DRAGON
			ActionToFind = SKILL_SPACT_ATTRIBUTE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_VANSESDA_THE_ANCIENT_FIRE
			ActionToFind = SKILL_SPACT_ATTRIBUTE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_PHANTOM_OF_END
			ActionToFind = SKILL_SPACT_MP_BREATH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_URCAGUARY
			ActionToFind = SKILL_SPACT_SUPER_ARMOR
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_SMALL_STONE_GOLEM
			ActionToFind = SKILL_SPELL_HOLY_SHIELD
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_SMALL_WOODEN_GOLEM
			ActionToFind = SKILL_SPELL_REGENERATION
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_NERES_THE_AMNESIAC
			ActionToFind = SKILL_SPACT_SMASH_GROUND
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_LAZASYE_THE_DESTROY
			ActionToFind = SKILL_SPACT_MP_BREATH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_POWERFUL_GREAT_WYRM
			ActionToFind = SKILL_SPACT_MP_BREATH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_NIGHTMARE_SHEEP
			ActionToFind = SKILL_SPACT_GROUP_HYPNOSIS
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_CONDUCTOR_KOALA
			ActionToFind = SKILL_SPACT_SHADOW_RUSH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_GRIM_REAPER
			ActionToFind = SKILL_SPACT_KILLING_DANCE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_DREAD_RABBIT
			ActionToFind = SKILL_SPACT_MULTIPLE_GATHER
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_FALLEN_ANGEL
			ActionToFind = SKILL_SPACT_GROUP_HYPNOSIS
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_DHWTY
			ActionToFind = SKILL_SPACT_MP_BREATH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_PERFORMAID_BLOODRESS
			ActionToFind = SKILL_SPACT_BLOOD_STREAM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_PERFORMAID_DESWEEPER
			ActionToFind = SKILL_SPACT_OVERRAY
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_PERFORMAID_COCRUEL
			ActionToFind = SKILL_SPACT_SHADOW_RUSH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_PERFORMAID_BITCHIACK
			ActionToFind = SKILL_SPACT_MP_BREATH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_LANKATA_THE_LIGHTNING_OF_BLUE
			ActionToFind = SKILL_SPACT_FIRE_A_VOLLEY
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ZANAN_OLD_SOLDIER
			ActionToFind = SKILL_SPACT_PRESSURE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_STORMBLING
			ActionToFind = SKILL_SPACT_BLADE_TURBULENCE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_HELLSTLING
			ActionToFind = SKILL_SPACT_BLADE_STRINGS
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_RIANNA_THE_DAYDREAMER
			ActionToFind = SKILL_SPACT_TAG_FORCE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_UNITDEAD_JOKER
			ActionToFind = SKILL_SPACT_OVERRAY
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ALFRED_THE_CANGNAN_WIND
			ActionToFind = SKILL_SPACT_SHIELD_PARRY
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_CHAOS_SERPENT
			ActionToFind = SKILL_SPACT_ABYSS_IN_THE_EYE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_AJETALIO_THE_SEMINAR_LECTURER
			ActionToFind = SKILL_SPACT_VINDALIAN_JIUJITSU
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_TEZCATLIPOCA
			ActionToFind = SKILL_SPACT_SMOKE_MIRROR
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_JALDABAOTH_THE_CHAOS_CHILD
			ActionToFind = SKILL_SPACT_KAMUI
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_SILVER_FOX_BROTHER
			ActionToFind = SKILL_SPACT_RESOLUTION_HAND
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_SICKFULL_OLDER_BROTHER
			ActionToFind = SKILL_SPACT_BLOOD_STREAM
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ALSAPIA_THE_MURDERER_MASK
			ActionToFind = SKILL_SPACT_KILLING_DANCE
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_EMERGENCY_EVASION
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_LAST_DANCER
		//	ActionToFind = SKILL_SPACT_GRAND_FINALE
		//	gosub *AIFindAction
		//	gosub *AIAddAction
			ActionToFind = SKILL_SPACT_KILLING_DANCE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_BYSYMLHA_THE_AMBER_EYES
			ActionToFind = SKILL_SPACT_ABYSS_IN_THE_EYE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_BUTLER
			ActionToFind = SKILL_SPACT_PRESSURE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_LOTHRIAN_AGENT
		case CREATURE_ID_METAL_ZILLA
		case CREATURE_ID_MELGET_THE_INFORMER
		case CREATURE_ID_MOBILE_COMMUNICATION_EQUIPMENT
		case CREATURE_ID_LEAD_DEVELOPER_DR_GAVELA
			ActionToFind = SKILL_SPACT_DATA_SCAN
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_INDRA
			ActionToFind = SKILL_SPACT_EXTERMINATION_BREATH
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_MAGIC_BEE
			ActionToFind = SKILL_SPACT_FLAME_OF_RAGE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_MIKRAANESIS
			ActionToFind = SKILL_SPACT_KILLING_DANCE
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_SHADOW_STEP
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_SWARM
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_TIME_STOP
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_CURSE_GRAPPLER
			ActionToFind = SKILL_SPACT_JYUSOU_GOUSHIN
			gosub *AIFindAction
			gosub *AIAddAction
			ActionToFind = SKILL_SPACT_VINDALIAN_JIUJITSU
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_CURSE_WOOD_KING
		case CREATURE_ID_13TH_STEP_GHOST
		case CREATURE_ID_PROFANITY_PRIEST
		case CREATURE_ID_DIABOLIC_CLOWN
		case CREATURE_ID_ULZASSIL_THE_DEAD_EMPEROR
		case CREATURE_ID_SSIL_THE_UNDEAD_WITCH
			ActionToFind = SKILL_SPACT_JYUSOU_GOUSHIN
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_KESALANPATHARAN
		case CREATURE_ID_BLACK_ANGEL_HAIR
		case CREATURE_ID_MATANGODDESS
			ActionToFind = SKILL_SPACT_DOWNPOUR_SPORE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_EHEKATL
		case CREATURE_ID_GOD_INSIDE_EHEKATL
		case CREATURE_ID_GAMBLER
			ActionToFind = SKILL_SPACT_DESTINY_DICE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_DESKTOP_NAVY
			ActionToFind = SKILL_SPACT_ROCKET_FIRE
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		case CREATURE_ID_ORICHAL_CHILD
			ActionToFind = SKILL_SPELL_CONTINGENCY
			gosub *AIFindAction
			gosub *AIAddAction
			swbreak
		default
			swbreak
	swend
	return

*GetActionName
	ActionName = ""
	if ( ActionToGet >= STARTING_SKILL_SPELL ) {
		ActionName = skillname(ActionToGet)
	}
	if ( ActionToGet >= 0 & ActionToGet < STARTING_SKILL_SPELL ) {
		ActionName = AITextData(ActionToGet,0)
	}
	if ( ActionToGet == ACTION_THROW_POTION_SALT ) {
		ActionName = "Throw Salt"
	}
	if ( ActionToGet == ACTION_THROW_POTION_GREATER ) {
		ActionName = "Throw Greater Potion"
	}
	if ( ActionToGet == ACTION_THROW_POTION_MAJOR ) {
		ActionName = "Throw Major Potion"
	}
	if ( ActionToGet == ACTION_THROW_POTION_MINOR ) {
		ActionName = "Throw Potion"
	}
	return

*AIValueSetMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0
	listn(0, NumActions) = "Not Set"
	key_list(NumActions) = 0
	NumActions++
	if ( CAIComparator(CurrentTactic, tc) == 1 | CAIComparator(CurrentTactic, tc) == 2 | CAIComparator(CurrentTactic, tc) == 5 ) {
		repeat length(AITextData)
			if ( AITextData(cnt,4) != "NULL" ) {
				listn(0, NumActions) = AITextData(cnt, 4) + "%"
				key_list(NumActions) = 100+cnt
				NumActions++
			}
			else {
				break
			}
		loop
	}
	if ( CAIComparator(CurrentTactic, tc) == 3 ) {
		repeat length(AITextData)
			if ( AITextData(cnt, 5) != "NULL" ) {
				listn(0, NumActions) = AITextData(cnt, 5)
				key_list(NumActions) = 200+cnt
				NumActions++
			}
			else {
				break
			}
		loop
	}
	if ( CAIComparator(CurrentTactic, tc) == 6 ) {
		repeat length(AITextData)
			if ( AITextData(cnt, 6) != "NULL" ) {
				listn(0, NumActions) = AITextData(cnt, 6)
				key_list(NumActions) = 300+cnt
				NumActions++
			}
			else {
				break
			}
		loop
	}
	if ( CAIComparator(CurrentTactic, tc) == 4 ) {
		repeat MAX_BUFF-1, 1
			listn(0, NumActions) = buffname(cnt)
			key_list(NumActions) = cnt
			NumActions++
		loop
	}
	if ( CAIComparator(CurrentTactic, tc) == 7 ) {
		repeat length(AIStatusNames)
			if ( AIStatusNames(cnt, 0) != "NULL" ) {
				listn(0, NumActions) = AIStatusNames(cnt, 0)
				key_list(NumActions) = 400+cnt
				NumActions++
			}
			else {
				break
			}
		loop
	}
	listn(0, NumActions) = "Back"
	key_list(NumActions) = 999
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat NumActions+1
		keyrange = cnt + 1
		pos wx + 18 + (145 * (cnt/22)), (wy + 25 + cnt * 19 - 2) - (416 * (cnt/22))
		cs_list listn(0, cnt), wx + 18 + (145 * (cnt/22)), (wy + 25 + cnt * 19 - 1) - (417 * (cnt/22)), 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat 500
		if ( key == cnt ) {
			snd SOUNDLIST_OK1
			CAIValue(CurrentTactic, tc) = key
			cs = 0
			key = key_cancel
		}
	loop

	if ( key == 999 ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AITacticConfigMenu
	}
	if ( key == key_cancel ) {
		cs = 0
		goto *AITacticConfigMenu
	}
	goto *AIValueSetMenu
	return

*GetValueName
	ValueName = ""
	if ( CAIValue(SlotID, tc) == 0 ) {
		ValueName = "Not Set"
		return
	}
	if ( CAIValue(SlotID, tc) < 100 ) {
		ValueName = buffname(CAIValue(SlotID, tc))
	}
	if ( CAIValue(SlotID, tc) >= 100 & CAIValue(SlotID, tc) < 200 ) {
		ValueName = AITextData(CAIValue(SlotID, tc) \ 100, 4) + "%"
	}
	if ( CAIValue(SlotID, tc) >= 200 & CAIValue(SlotID, tc) < 300 ) {
		ValueName = AITextData(CAIValue(SlotID, tc) \ 200, 5)
	}
	if ( CAIValue(SlotID, tc) >= 300 & CAIValue(SlotID, tc) < 400 ) {
		ValueName = AITextData(CAIValue(SlotID, tc) \ 300, 6)
	}
	if ( CAIValue(SlotID, tc) >= 400 & CAIValue(SlotID, tc) < 500 ) {
		ValueName = AIStatusNames(CAIValue(SlotID, tc) \ 400, 0)
	}
	return

*AIEntitySetMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0

	repeat length(AITextData)
		if ( AITextData(cnt, 1) != "NULL" ) {
			listn(0, cnt) = AITextData(cnt, 1)
			NumActions++
		}
		else {
			break
		}
	loop

	listn(0, NumActions) = "Back"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat NumActions+1
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 18, wy + 60 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 44, wy + 60 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat NumActions+1
		if ( key == key_select(cnt) ) {
			snd SOUNDLIST_OK1
			if ( cnt < NumActions ) {
				CAIEntity(CurrentTactic, tc) = cnt + (CAIEntity(CurrentTactic, tc) / 1000) * 1000
			}
			cs = 0
			key = key_cancel
		}
	loop

	if ( key == key_cancel ) {
		cs = 0
		goto *AITacticConfigMenu
	}
	goto *AIEntitySetMenu
	return

*AIConditionSetMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0

	repeat length(AITextData)
		if ( AITextData(cnt, 2) != "NULL" ) {
			listn(0, cnt) = AITextData(cnt, 2)
			NumActions++
		}
		else {
			break
		}
	loop

	listn(0, NumActions) = "Back"
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat NumActions+1
		key_list(cnt) = key_select(cnt)
		keyrange = cnt + 1
		pos wx + 18, wy + 60 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 44, wy + 60 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat NumActions+1
		if ( key == key_select(cnt) ) {
			snd SOUNDLIST_OK1
			if ( cnt < NumActions ) {
				CAIComparator(CurrentTactic, tc) = cnt
				if ( cnt == 4 | cnt == 6 | cnt == 7 ) {
					CAIComparatorFix(CurrentTactic, tc) = 0
				}
				CAIValue(CurrentTactic, tc) = 0
			}
			cs = 0
			key = key_cancel
		}
	loop

	if ( key == key_cancel ) {
		cs = 0
		goto *AITacticConfigMenu
	}
	goto *AIConditionSetMenu
	return

*AIComparatorSetMenu
	redraw 0
	s = "Tactical Instructions", strhint3b
	display_window (windoww - 680) / 2 + inf_screenx, winposy(500, 1) + 20, 680, 500
	s = "Teach Your Pet"
	gosub *screen_drawMsg2
	NumActions = 0

	sdim AIComparatorFix, 30, 15

	repeat length(AITextData)
		if ( AITextData(cnt, 3) != "NULL" ) {
			; "Not Set", "=" and "!=" are always included
			if ( cnt == 0 | (CAIComparator(CurrentTactic, tc) != 4 & CAIComparator(CurrentTactic, tc) != 6 & CAIComparator(CurrentTactic, tc) != 7 ) | (cnt == 3) | (cnt == 4) ) {
				listn(0, NumActions) = AITextData(cnt, 3)
				key_list(NumActions) = key_select(NumActions)
				AIComparatorFix(NumActions) = cnt

				NumActions++
			}
		}
		else {
			break
		}
	loop

	listn(0, NumActions) = "Back"
	key_list(NumActions) = key_select(16)
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0

	repeat NumActions + 1
		keyrange = cnt + 1
		pos wx + 18, wy + 60 + cnt * 19 - 2
		gcopy 3, cnt * 24 + 72, 30, 24, 18
		cs_list listn(0, cnt), wx + 44, wy + 60 + cnt * 19 - 1, 19
	loop

	font lang(cfg_font1, cfg_font2), 13 - en * 2, 0
	gosub *PrintAIInfo
	cs_bk = cs
	redraw 1
	await cfg_wait1
	key_check
	cursor_check

	repeat CUSTOM_AI_MAX_TACTICS
		if ( key == key_select(cnt) & cnt < NumActions + 1 ) {
			snd SOUNDLIST_OK1
			if ( cnt < NumActions ) {
				CAIComparatorFix(CurrentTactic, tc) = AIComparatorFix(cnt)
			}
			cs = 0
			key = key_cancel

			break
		}
	loop

	if ( key == key_select(16) ) {
		snd SOUNDLIST_OK1
		cs = 0
		goto *AITacticConfigMenu
	}
	if ( key == key_cancel ) {
		cs = 0
		goto *AITacticConfigMenu
	}
	goto *AIComparatorSetMenu
	return

*DeleteAIInfo
	LoopCount = 0

	while ( LoopCount < 125 )
		AIData(LoopCount, AllyID-1) = 0
		LoopCount++
	wend

	return
